
ModbusRTU_AWS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004488  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000026c  08004618  08004618  00005618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004884  08004884  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  08004884  08004884  00005884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800488c  0800488c  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800488c  0800488c  0000588c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004890  08004890  00005890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004894  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000605c  2**0
                  CONTENTS
 10 .bss          000005e0  2000005c  2000005c  0000605c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000063c  2000063c  0000605c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b1bb  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d08  00000000  00000000  00011247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000980  00000000  00000000  00012f50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000749  00000000  00000000  000138d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020a2b  00000000  00000000  00014019  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c020  00000000  00000000  00034a44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c4d4e  00000000  00000000  00040a64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001057b2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002b04  00000000  00000000  001057f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006f  00000000  00000000  001082fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004600 	.word	0x08004600

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08004600 	.word	0x08004600

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b08e      	sub	sp, #56	@ 0x38
 8000574:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000576:	f000 ff1f 	bl	80013b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057a:	f000 f8ad 	bl	80006d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057e:	f000 f9e5 	bl	800094c <MX_GPIO_Init>
  MX_DMA_Init();
 8000582:	f000 f99d 	bl	80008c0 <MX_DMA_Init>
  MX_SPI2_Init();
 8000586:	f000 f911 	bl	80007ac <MX_SPI2_Init>
  MX_USART1_UART_Init();
 800058a:	f000 f945 	bl	8000818 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 800058e:	f000 f96d 	bl	800086c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  Modbus_Init(&hmodbus, &huart1, RS485_EN_GPIO_Port, RS485_EN_Pin);
 8000592:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000596:	4a49      	ldr	r2, [pc, #292]	@ (80006bc <main+0x14c>)
 8000598:	4949      	ldr	r1, [pc, #292]	@ (80006c0 <main+0x150>)
 800059a:	484a      	ldr	r0, [pc, #296]	@ (80006c4 <main+0x154>)
 800059c:	f000 fa76 	bl	8000a8c <Modbus_Init>
  uint8_t holdingreg[2];
  uint16_t holdingRegs[2];
  char TXRespons[30];
  int i=0;
 80005a0:	2300      	movs	r3, #0
 80005a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if((holdingreg[0] & 0x01) == 0){
 80005a4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80005a8:	f003 0301 	and.w	r3, r3, #1
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d107      	bne.n	80005c0 <main+0x50>
		holdingreg[0] = holdingreg[0] | 0x01;
 80005b0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80005b4:	f043 0301 	orr.w	r3, r3, #1
 80005b8:	b2db      	uxtb	r3, r3
 80005ba:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 80005be:	e006      	b.n	80005ce <main+0x5e>
	}
	else{
		holdingreg[0] = holdingreg[0] & 0xFE;
 80005c0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80005c4:	f023 0301 	bic.w	r3, r3, #1
 80005c8:	b2db      	uxtb	r3, r3
 80005ca:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	}
	if((holdingreg[0] & 0x02) == 0){
 80005ce:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80005d2:	f003 0302 	and.w	r3, r3, #2
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d107      	bne.n	80005ea <main+0x7a>
		holdingreg[0] = holdingreg[0] | 0x02;
 80005da:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80005de:	f043 0302 	orr.w	r3, r3, #2
 80005e2:	b2db      	uxtb	r3, r3
 80005e4:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 80005e8:	e006      	b.n	80005f8 <main+0x88>
	}
	else{
		holdingreg[0] = holdingreg[0] & 0xFD;
 80005ea:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80005ee:	f023 0302 	bic.w	r3, r3, #2
 80005f2:	b2db      	uxtb	r3, r3
 80005f4:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	}
	ModbusStatus status = Modbus_WriteMultipleCoils(&hmodbus, 2, 1281, 2, holdingreg);
 80005f8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80005fc:	9300      	str	r3, [sp, #0]
 80005fe:	2302      	movs	r3, #2
 8000600:	f240 5201 	movw	r2, #1281	@ 0x501
 8000604:	2102      	movs	r1, #2
 8000606:	482f      	ldr	r0, [pc, #188]	@ (80006c4 <main+0x154>)
 8000608:	f000 fb81 	bl	8000d0e <Modbus_WriteMultipleCoils>
 800060c:	4603      	mov	r3, r0
 800060e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	if(status == MODBUS_OK){
 8000612:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8000616:	2b00      	cmp	r3, #0
 8000618:	d105      	bne.n	8000626 <main+0xb6>
		HAL_UART_Transmit(&huart3, (uint8_t *)"OK!\n", 4, 100);
 800061a:	2364      	movs	r3, #100	@ 0x64
 800061c:	2204      	movs	r2, #4
 800061e:	492a      	ldr	r1, [pc, #168]	@ (80006c8 <main+0x158>)
 8000620:	482a      	ldr	r0, [pc, #168]	@ (80006cc <main+0x15c>)
 8000622:	f002 faee 	bl	8002c02 <HAL_UART_Transmit>
	}
    status = Modbus_ReadHoldingRegisters(&hmodbus, 2, 4097, 2, holdingRegs);
 8000626:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800062a:	9300      	str	r3, [sp, #0]
 800062c:	2302      	movs	r3, #2
 800062e:	f241 0201 	movw	r2, #4097	@ 0x1001
 8000632:	2102      	movs	r1, #2
 8000634:	4823      	ldr	r0, [pc, #140]	@ (80006c4 <main+0x154>)
 8000636:	f000 fab3 	bl	8000ba0 <Modbus_ReadHoldingRegisters>
 800063a:	4603      	mov	r3, r0
 800063c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    sprintf(TXRespons, "Response= %d\n", holdingRegs[0]);
 8000640:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000642:	461a      	mov	r2, r3
 8000644:	1d3b      	adds	r3, r7, #4
 8000646:	4922      	ldr	r1, [pc, #136]	@ (80006d0 <main+0x160>)
 8000648:	4618      	mov	r0, r3
 800064a:	f003 fb39 	bl	8003cc0 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *)TXRespons, strlen(TXRespons), 100);
 800064e:	1d3b      	adds	r3, r7, #4
 8000650:	4618      	mov	r0, r3
 8000652:	f7ff fdbd 	bl	80001d0 <strlen>
 8000656:	4603      	mov	r3, r0
 8000658:	b29a      	uxth	r2, r3
 800065a:	1d39      	adds	r1, r7, #4
 800065c:	2364      	movs	r3, #100	@ 0x64
 800065e:	481b      	ldr	r0, [pc, #108]	@ (80006cc <main+0x15c>)
 8000660:	f002 facf 	bl	8002c02 <HAL_UART_Transmit>
    if (status == MODBUS_OK) {
 8000664:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8000668:	2b00      	cmp	r3, #0
 800066a:	d122      	bne.n	80006b2 <main+0x142>
        // Successfully read, now write to register 0x0001
        status = Modbus_WriteSingleRegister(&hmodbus, 2, 4097, 823 + i);
 800066c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800066e:	b29b      	uxth	r3, r3
 8000670:	f203 3337 	addw	r3, r3, #823	@ 0x337
 8000674:	b29b      	uxth	r3, r3
 8000676:	f241 0201 	movw	r2, #4097	@ 0x1001
 800067a:	2102      	movs	r1, #2
 800067c:	4811      	ldr	r0, [pc, #68]	@ (80006c4 <main+0x154>)
 800067e:	f000 fb03 	bl	8000c88 <Modbus_WriteSingleRegister>
 8000682:	4603      	mov	r3, r0
 8000684:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        i++;
 8000688:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800068a:	3301      	adds	r3, #1
 800068c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        if(i == 50) i = 0;
 800068e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000690:	2b32      	cmp	r3, #50	@ 0x32
 8000692:	d101      	bne.n	8000698 <main+0x128>
 8000694:	2300      	movs	r3, #0
 8000696:	62fb      	str	r3, [r7, #44]	@ 0x2c
        if (status == MODBUS_OK) {
 8000698:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800069c:	2b00      	cmp	r3, #0
 800069e:	d108      	bne.n	80006b2 <main+0x142>
            // Indicate success (e.g., blink an LED)
            HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13); // assuming onboard LED
 80006a0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006a4:	480b      	ldr	r0, [pc, #44]	@ (80006d4 <main+0x164>)
 80006a6:	f001 fd60 	bl	800216a <HAL_GPIO_TogglePin>
            HAL_Delay(500);
 80006aa:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80006ae:	f000 fef5 	bl	800149c <HAL_Delay>
        }
    }
	HAL_Delay(2000);
 80006b2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80006b6:	f000 fef1 	bl	800149c <HAL_Delay>
  {
 80006ba:	e773      	b.n	80005a4 <main+0x34>
 80006bc:	40020000 	.word	0x40020000
 80006c0:	200000d0 	.word	0x200000d0
 80006c4:	200002e0 	.word	0x200002e0
 80006c8:	08004618 	.word	0x08004618
 80006cc:	20000118 	.word	0x20000118
 80006d0:	08004620 	.word	0x08004620
 80006d4:	40020800 	.word	0x40020800

080006d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b094      	sub	sp, #80	@ 0x50
 80006dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006de:	f107 0320 	add.w	r3, r7, #32
 80006e2:	2230      	movs	r2, #48	@ 0x30
 80006e4:	2100      	movs	r1, #0
 80006e6:	4618      	mov	r0, r3
 80006e8:	f003 fb0a 	bl	8003d00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ec:	f107 030c 	add.w	r3, r7, #12
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
 80006f6:	609a      	str	r2, [r3, #8]
 80006f8:	60da      	str	r2, [r3, #12]
 80006fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006fc:	2300      	movs	r3, #0
 80006fe:	60bb      	str	r3, [r7, #8]
 8000700:	4b28      	ldr	r3, [pc, #160]	@ (80007a4 <SystemClock_Config+0xcc>)
 8000702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000704:	4a27      	ldr	r2, [pc, #156]	@ (80007a4 <SystemClock_Config+0xcc>)
 8000706:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800070a:	6413      	str	r3, [r2, #64]	@ 0x40
 800070c:	4b25      	ldr	r3, [pc, #148]	@ (80007a4 <SystemClock_Config+0xcc>)
 800070e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000710:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000714:	60bb      	str	r3, [r7, #8]
 8000716:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000718:	2300      	movs	r3, #0
 800071a:	607b      	str	r3, [r7, #4]
 800071c:	4b22      	ldr	r3, [pc, #136]	@ (80007a8 <SystemClock_Config+0xd0>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a21      	ldr	r2, [pc, #132]	@ (80007a8 <SystemClock_Config+0xd0>)
 8000722:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000726:	6013      	str	r3, [r2, #0]
 8000728:	4b1f      	ldr	r3, [pc, #124]	@ (80007a8 <SystemClock_Config+0xd0>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000730:	607b      	str	r3, [r7, #4]
 8000732:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000734:	2301      	movs	r3, #1
 8000736:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000738:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800073c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800073e:	2302      	movs	r3, #2
 8000740:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000742:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000746:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000748:	2319      	movs	r3, #25
 800074a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800074c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000750:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000752:	2302      	movs	r3, #2
 8000754:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000756:	2304      	movs	r3, #4
 8000758:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800075a:	f107 0320 	add.w	r3, r7, #32
 800075e:	4618      	mov	r0, r3
 8000760:	f001 fd1e 	bl	80021a0 <HAL_RCC_OscConfig>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800076a:	f000 f989 	bl	8000a80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800076e:	230f      	movs	r3, #15
 8000770:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000772:	2302      	movs	r3, #2
 8000774:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000776:	2300      	movs	r3, #0
 8000778:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800077a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800077e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000780:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000784:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000786:	f107 030c 	add.w	r3, r7, #12
 800078a:	2105      	movs	r1, #5
 800078c:	4618      	mov	r0, r3
 800078e:	f001 ff7f 	bl	8002690 <HAL_RCC_ClockConfig>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000798:	f000 f972 	bl	8000a80 <Error_Handler>
  }
}
 800079c:	bf00      	nop
 800079e:	3750      	adds	r7, #80	@ 0x50
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	40023800 	.word	0x40023800
 80007a8:	40007000 	.word	0x40007000

080007ac <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80007b0:	4b17      	ldr	r3, [pc, #92]	@ (8000810 <MX_SPI2_Init+0x64>)
 80007b2:	4a18      	ldr	r2, [pc, #96]	@ (8000814 <MX_SPI2_Init+0x68>)
 80007b4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80007b6:	4b16      	ldr	r3, [pc, #88]	@ (8000810 <MX_SPI2_Init+0x64>)
 80007b8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80007bc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80007be:	4b14      	ldr	r3, [pc, #80]	@ (8000810 <MX_SPI2_Init+0x64>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80007c4:	4b12      	ldr	r3, [pc, #72]	@ (8000810 <MX_SPI2_Init+0x64>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007ca:	4b11      	ldr	r3, [pc, #68]	@ (8000810 <MX_SPI2_Init+0x64>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000810 <MX_SPI2_Init+0x64>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80007d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000810 <MX_SPI2_Init+0x64>)
 80007d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007dc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007de:	4b0c      	ldr	r3, [pc, #48]	@ (8000810 <MX_SPI2_Init+0x64>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007e4:	4b0a      	ldr	r3, [pc, #40]	@ (8000810 <MX_SPI2_Init+0x64>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80007ea:	4b09      	ldr	r3, [pc, #36]	@ (8000810 <MX_SPI2_Init+0x64>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007f0:	4b07      	ldr	r3, [pc, #28]	@ (8000810 <MX_SPI2_Init+0x64>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80007f6:	4b06      	ldr	r3, [pc, #24]	@ (8000810 <MX_SPI2_Init+0x64>)
 80007f8:	220a      	movs	r2, #10
 80007fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80007fc:	4804      	ldr	r0, [pc, #16]	@ (8000810 <MX_SPI2_Init+0x64>)
 80007fe:	f002 f927 	bl	8002a50 <HAL_SPI_Init>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000808:	f000 f93a 	bl	8000a80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800080c:	bf00      	nop
 800080e:	bd80      	pop	{r7, pc}
 8000810:	20000078 	.word	0x20000078
 8000814:	40003800 	.word	0x40003800

08000818 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800081c:	4b11      	ldr	r3, [pc, #68]	@ (8000864 <MX_USART1_UART_Init+0x4c>)
 800081e:	4a12      	ldr	r2, [pc, #72]	@ (8000868 <MX_USART1_UART_Init+0x50>)
 8000820:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000822:	4b10      	ldr	r3, [pc, #64]	@ (8000864 <MX_USART1_UART_Init+0x4c>)
 8000824:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000828:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800082a:	4b0e      	ldr	r3, [pc, #56]	@ (8000864 <MX_USART1_UART_Init+0x4c>)
 800082c:	2200      	movs	r2, #0
 800082e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000830:	4b0c      	ldr	r3, [pc, #48]	@ (8000864 <MX_USART1_UART_Init+0x4c>)
 8000832:	2200      	movs	r2, #0
 8000834:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000836:	4b0b      	ldr	r3, [pc, #44]	@ (8000864 <MX_USART1_UART_Init+0x4c>)
 8000838:	2200      	movs	r2, #0
 800083a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800083c:	4b09      	ldr	r3, [pc, #36]	@ (8000864 <MX_USART1_UART_Init+0x4c>)
 800083e:	220c      	movs	r2, #12
 8000840:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000842:	4b08      	ldr	r3, [pc, #32]	@ (8000864 <MX_USART1_UART_Init+0x4c>)
 8000844:	2200      	movs	r2, #0
 8000846:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000848:	4b06      	ldr	r3, [pc, #24]	@ (8000864 <MX_USART1_UART_Init+0x4c>)
 800084a:	2200      	movs	r2, #0
 800084c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800084e:	4805      	ldr	r0, [pc, #20]	@ (8000864 <MX_USART1_UART_Init+0x4c>)
 8000850:	f002 f987 	bl	8002b62 <HAL_UART_Init>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800085a:	f000 f911 	bl	8000a80 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800085e:	bf00      	nop
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	200000d0 	.word	0x200000d0
 8000868:	40011000 	.word	0x40011000

0800086c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000870:	4b11      	ldr	r3, [pc, #68]	@ (80008b8 <MX_USART3_UART_Init+0x4c>)
 8000872:	4a12      	ldr	r2, [pc, #72]	@ (80008bc <MX_USART3_UART_Init+0x50>)
 8000874:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000876:	4b10      	ldr	r3, [pc, #64]	@ (80008b8 <MX_USART3_UART_Init+0x4c>)
 8000878:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800087c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800087e:	4b0e      	ldr	r3, [pc, #56]	@ (80008b8 <MX_USART3_UART_Init+0x4c>)
 8000880:	2200      	movs	r2, #0
 8000882:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000884:	4b0c      	ldr	r3, [pc, #48]	@ (80008b8 <MX_USART3_UART_Init+0x4c>)
 8000886:	2200      	movs	r2, #0
 8000888:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800088a:	4b0b      	ldr	r3, [pc, #44]	@ (80008b8 <MX_USART3_UART_Init+0x4c>)
 800088c:	2200      	movs	r2, #0
 800088e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000890:	4b09      	ldr	r3, [pc, #36]	@ (80008b8 <MX_USART3_UART_Init+0x4c>)
 8000892:	220c      	movs	r2, #12
 8000894:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000896:	4b08      	ldr	r3, [pc, #32]	@ (80008b8 <MX_USART3_UART_Init+0x4c>)
 8000898:	2200      	movs	r2, #0
 800089a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800089c:	4b06      	ldr	r3, [pc, #24]	@ (80008b8 <MX_USART3_UART_Init+0x4c>)
 800089e:	2200      	movs	r2, #0
 80008a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008a2:	4805      	ldr	r0, [pc, #20]	@ (80008b8 <MX_USART3_UART_Init+0x4c>)
 80008a4:	f002 f95d 	bl	8002b62 <HAL_UART_Init>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80008ae:	f000 f8e7 	bl	8000a80 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008b2:	bf00      	nop
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	20000118 	.word	0x20000118
 80008bc:	40004800 	.word	0x40004800

080008c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	607b      	str	r3, [r7, #4]
 80008ca:	4b1f      	ldr	r3, [pc, #124]	@ (8000948 <MX_DMA_Init+0x88>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ce:	4a1e      	ldr	r2, [pc, #120]	@ (8000948 <MX_DMA_Init+0x88>)
 80008d0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80008d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008d6:	4b1c      	ldr	r3, [pc, #112]	@ (8000948 <MX_DMA_Init+0x88>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80008de:	607b      	str	r3, [r7, #4]
 80008e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	603b      	str	r3, [r7, #0]
 80008e6:	4b18      	ldr	r3, [pc, #96]	@ (8000948 <MX_DMA_Init+0x88>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ea:	4a17      	ldr	r2, [pc, #92]	@ (8000948 <MX_DMA_Init+0x88>)
 80008ec:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80008f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008f2:	4b15      	ldr	r3, [pc, #84]	@ (8000948 <MX_DMA_Init+0x88>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80008fa:	603b      	str	r3, [r7, #0]
 80008fc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80008fe:	2200      	movs	r2, #0
 8000900:	2100      	movs	r1, #0
 8000902:	200c      	movs	r0, #12
 8000904:	f000 fec9 	bl	800169a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000908:	200c      	movs	r0, #12
 800090a:	f000 fee2 	bl	80016d2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800090e:	2200      	movs	r2, #0
 8000910:	2100      	movs	r1, #0
 8000912:	200e      	movs	r0, #14
 8000914:	f000 fec1 	bl	800169a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000918:	200e      	movs	r0, #14
 800091a:	f000 feda 	bl	80016d2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800091e:	2200      	movs	r2, #0
 8000920:	2100      	movs	r1, #0
 8000922:	203a      	movs	r0, #58	@ 0x3a
 8000924:	f000 feb9 	bl	800169a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000928:	203a      	movs	r0, #58	@ 0x3a
 800092a:	f000 fed2 	bl	80016d2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 800092e:	2200      	movs	r2, #0
 8000930:	2100      	movs	r1, #0
 8000932:	2046      	movs	r0, #70	@ 0x46
 8000934:	f000 feb1 	bl	800169a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000938:	2046      	movs	r0, #70	@ 0x46
 800093a:	f000 feca 	bl	80016d2 <HAL_NVIC_EnableIRQ>

}
 800093e:	bf00      	nop
 8000940:	3708      	adds	r7, #8
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	40023800 	.word	0x40023800

0800094c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08a      	sub	sp, #40	@ 0x28
 8000950:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000952:	f107 0314 	add.w	r3, r7, #20
 8000956:	2200      	movs	r2, #0
 8000958:	601a      	str	r2, [r3, #0]
 800095a:	605a      	str	r2, [r3, #4]
 800095c:	609a      	str	r2, [r3, #8]
 800095e:	60da      	str	r2, [r3, #12]
 8000960:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	613b      	str	r3, [r7, #16]
 8000966:	4b42      	ldr	r3, [pc, #264]	@ (8000a70 <MX_GPIO_Init+0x124>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096a:	4a41      	ldr	r2, [pc, #260]	@ (8000a70 <MX_GPIO_Init+0x124>)
 800096c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000970:	6313      	str	r3, [r2, #48]	@ 0x30
 8000972:	4b3f      	ldr	r3, [pc, #252]	@ (8000a70 <MX_GPIO_Init+0x124>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000976:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800097a:	613b      	str	r3, [r7, #16]
 800097c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	60fb      	str	r3, [r7, #12]
 8000982:	4b3b      	ldr	r3, [pc, #236]	@ (8000a70 <MX_GPIO_Init+0x124>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000986:	4a3a      	ldr	r2, [pc, #232]	@ (8000a70 <MX_GPIO_Init+0x124>)
 8000988:	f043 0304 	orr.w	r3, r3, #4
 800098c:	6313      	str	r3, [r2, #48]	@ 0x30
 800098e:	4b38      	ldr	r3, [pc, #224]	@ (8000a70 <MX_GPIO_Init+0x124>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000992:	f003 0304 	and.w	r3, r3, #4
 8000996:	60fb      	str	r3, [r7, #12]
 8000998:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	60bb      	str	r3, [r7, #8]
 800099e:	4b34      	ldr	r3, [pc, #208]	@ (8000a70 <MX_GPIO_Init+0x124>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a2:	4a33      	ldr	r2, [pc, #204]	@ (8000a70 <MX_GPIO_Init+0x124>)
 80009a4:	f043 0302 	orr.w	r3, r3, #2
 80009a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009aa:	4b31      	ldr	r3, [pc, #196]	@ (8000a70 <MX_GPIO_Init+0x124>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ae:	f003 0302 	and.w	r3, r3, #2
 80009b2:	60bb      	str	r3, [r7, #8]
 80009b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	607b      	str	r3, [r7, #4]
 80009ba:	4b2d      	ldr	r3, [pc, #180]	@ (8000a70 <MX_GPIO_Init+0x124>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009be:	4a2c      	ldr	r2, [pc, #176]	@ (8000a70 <MX_GPIO_Init+0x124>)
 80009c0:	f043 0308 	orr.w	r3, r3, #8
 80009c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009c6:	4b2a      	ldr	r3, [pc, #168]	@ (8000a70 <MX_GPIO_Init+0x124>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ca:	f003 0308 	and.w	r3, r3, #8
 80009ce:	607b      	str	r3, [r7, #4]
 80009d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	603b      	str	r3, [r7, #0]
 80009d6:	4b26      	ldr	r3, [pc, #152]	@ (8000a70 <MX_GPIO_Init+0x124>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009da:	4a25      	ldr	r2, [pc, #148]	@ (8000a70 <MX_GPIO_Init+0x124>)
 80009dc:	f043 0301 	orr.w	r3, r3, #1
 80009e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009e2:	4b23      	ldr	r3, [pc, #140]	@ (8000a70 <MX_GPIO_Init+0x124>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e6:	f003 0301 	and.w	r3, r3, #1
 80009ea:	603b      	str	r3, [r7, #0]
 80009ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 80009ee:	2200      	movs	r2, #0
 80009f0:	2110      	movs	r1, #16
 80009f2:	4820      	ldr	r0, [pc, #128]	@ (8000a74 <MX_GPIO_Init+0x128>)
 80009f4:	f001 fba0 	bl	8002138 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80009f8:	2200      	movs	r2, #0
 80009fa:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80009fe:	481e      	ldr	r0, [pc, #120]	@ (8000a78 <MX_GPIO_Init+0x12c>)
 8000a00:	f001 fb9a 	bl	8002138 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RS485_EN_GPIO_Port, RS485_EN_Pin, GPIO_PIN_RESET);
 8000a04:	2200      	movs	r2, #0
 8000a06:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000a0a:	481c      	ldr	r0, [pc, #112]	@ (8000a7c <MX_GPIO_Init+0x130>)
 8000a0c:	f001 fb94 	bl	8002138 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000a10:	2310      	movs	r3, #16
 8000a12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a14:	2301      	movs	r3, #1
 8000a16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a20:	f107 0314 	add.w	r3, r7, #20
 8000a24:	4619      	mov	r1, r3
 8000a26:	4813      	ldr	r0, [pc, #76]	@ (8000a74 <MX_GPIO_Init+0x128>)
 8000a28:	f001 f9ea 	bl	8001e00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000a2c:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000a30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a32:	2301      	movs	r3, #1
 8000a34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	2300      	movs	r3, #0
 8000a38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a3e:	f107 0314 	add.w	r3, r7, #20
 8000a42:	4619      	mov	r1, r3
 8000a44:	480c      	ldr	r0, [pc, #48]	@ (8000a78 <MX_GPIO_Init+0x12c>)
 8000a46:	f001 f9db 	bl	8001e00 <HAL_GPIO_Init>

  /*Configure GPIO pin : RS485_EN_Pin */
  GPIO_InitStruct.Pin = RS485_EN_Pin;
 8000a4a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000a4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a50:	2301      	movs	r3, #1
 8000a52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a54:	2300      	movs	r3, #0
 8000a56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RS485_EN_GPIO_Port, &GPIO_InitStruct);
 8000a5c:	f107 0314 	add.w	r3, r7, #20
 8000a60:	4619      	mov	r1, r3
 8000a62:	4806      	ldr	r0, [pc, #24]	@ (8000a7c <MX_GPIO_Init+0x130>)
 8000a64:	f001 f9cc 	bl	8001e00 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a68:	bf00      	nop
 8000a6a:	3728      	adds	r7, #40	@ 0x28
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	40023800 	.word	0x40023800
 8000a74:	40020800 	.word	0x40020800
 8000a78:	40020c00 	.word	0x40020c00
 8000a7c:	40020000 	.word	0x40020000

08000a80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a84:	b672      	cpsid	i
}
 8000a86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a88:	bf00      	nop
 8000a8a:	e7fd      	b.n	8000a88 <Error_Handler+0x8>

08000a8c <Modbus_Init>:
#include "modbusMaster.h"
#include "modbus_crc.h"
#include <string.h>


void Modbus_Init(ModbusMaster* modbus, UART_HandleTypeDef* huart, GPIO_TypeDef* EN_Port, uint16_t EN_Pin){
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b084      	sub	sp, #16
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	60f8      	str	r0, [r7, #12]
 8000a94:	60b9      	str	r1, [r7, #8]
 8000a96:	607a      	str	r2, [r7, #4]
 8000a98:	807b      	strh	r3, [r7, #2]
	modbus->huart = huart;
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	68ba      	ldr	r2, [r7, #8]
 8000a9e:	601a      	str	r2, [r3, #0]
    modbus->EN_Port = EN_Port;
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	687a      	ldr	r2, [r7, #4]
 8000aa4:	605a      	str	r2, [r3, #4]
    modbus->EN_Pin = EN_Pin;
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	887a      	ldrh	r2, [r7, #2]
 8000aaa:	811a      	strh	r2, [r3, #8]
    // Set DE pin to output mode and disable transmission initially
	HAL_GPIO_WritePin(modbus->EN_Port, modbus->EN_Pin, GPIO_PIN_RESET);
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	6858      	ldr	r0, [r3, #4]
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	891b      	ldrh	r3, [r3, #8]
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	f001 fb3e 	bl	8002138 <HAL_GPIO_WritePin>

	// Optional: You could initialize buffers here to zero
	memset(modbus->txBuffer, 0, sizeof(modbus->txBuffer));
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	330a      	adds	r3, #10
 8000ac0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f003 f91a 	bl	8003d00 <memset>
	memset(modbus->rxBuffer, 0, sizeof(modbus->rxBuffer));
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	f503 7385 	add.w	r3, r3, #266	@ 0x10a
 8000ad2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f003 f911 	bl	8003d00 <memset>
}
 8000ade:	bf00      	nop
 8000ae0:	3710      	adds	r7, #16
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}

08000ae6 <Modbus_SendRequest>:


//Send command function
static ModbusStatus Modbus_SendRequest(ModbusMaster* modbus, uint8_t requestLength, uint8_t expectedResponseLength) {
 8000ae6:	b580      	push	{r7, lr}
 8000ae8:	b084      	sub	sp, #16
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	6078      	str	r0, [r7, #4]
 8000aee:	460b      	mov	r3, r1
 8000af0:	70fb      	strb	r3, [r7, #3]
 8000af2:	4613      	mov	r3, r2
 8000af4:	70bb      	strb	r3, [r7, #2]
    HAL_GPIO_WritePin(modbus->EN_Port, modbus->EN_Pin, GPIO_PIN_SET); // Enable transmit
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	6858      	ldr	r0, [r3, #4]
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	891b      	ldrh	r3, [r3, #8]
 8000afe:	2201      	movs	r2, #1
 8000b00:	4619      	mov	r1, r3
 8000b02:	f001 fb19 	bl	8002138 <HAL_GPIO_WritePin>
    HAL_UART_Transmit(modbus->huart, modbus->txBuffer, requestLength, HAL_MAX_DELAY);
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	6818      	ldr	r0, [r3, #0]
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	f103 010a 	add.w	r1, r3, #10
 8000b10:	78fb      	ldrb	r3, [r7, #3]
 8000b12:	b29a      	uxth	r2, r3
 8000b14:	f04f 33ff 	mov.w	r3, #4294967295
 8000b18:	f002 f873 	bl	8002c02 <HAL_UART_Transmit>
    HAL_GPIO_WritePin(modbus->EN_Port, modbus->EN_Pin, GPIO_PIN_RESET); // Disable transmit
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	6858      	ldr	r0, [r3, #4]
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	891b      	ldrh	r3, [r3, #8]
 8000b24:	2200      	movs	r2, #0
 8000b26:	4619      	mov	r1, r3
 8000b28:	f001 fb06 	bl	8002138 <HAL_GPIO_WritePin>

    if (HAL_UART_Receive(modbus->huart, modbus->rxBuffer, expectedResponseLength, 1000) != HAL_OK) {
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	6818      	ldr	r0, [r3, #0]
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	f503 7185 	add.w	r1, r3, #266	@ 0x10a
 8000b36:	78bb      	ldrb	r3, [r7, #2]
 8000b38:	b29a      	uxth	r2, r3
 8000b3a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b3e:	f002 f8eb 	bl	8002d18 <HAL_UART_Receive>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <Modbus_SendRequest+0x66>
        return MODBUS_TIMEOUT;
 8000b48:	2302      	movs	r3, #2
 8000b4a:	e025      	b.n	8000b98 <Modbus_SendRequest+0xb2>
    }

    uint16_t crc = crc16(modbus->rxBuffer, expectedResponseLength - 2);
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	f503 7285 	add.w	r2, r3, #266	@ 0x10a
 8000b52:	78bb      	ldrb	r3, [r7, #2]
 8000b54:	b29b      	uxth	r3, r3
 8000b56:	3b02      	subs	r3, #2
 8000b58:	b29b      	uxth	r3, r3
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	4610      	mov	r0, r2
 8000b5e:	f000 f947 	bl	8000df0 <crc16>
 8000b62:	4603      	mov	r3, r0
 8000b64:	81fb      	strh	r3, [r7, #14]
    uint16_t receivedCRC = modbus->rxBuffer[expectedResponseLength - 2] | (modbus->rxBuffer[expectedResponseLength - 1] << 8);
 8000b66:	78bb      	ldrb	r3, [r7, #2]
 8000b68:	3b02      	subs	r3, #2
 8000b6a:	687a      	ldr	r2, [r7, #4]
 8000b6c:	4413      	add	r3, r2
 8000b6e:	f893 310a 	ldrb.w	r3, [r3, #266]	@ 0x10a
 8000b72:	b21a      	sxth	r2, r3
 8000b74:	78bb      	ldrb	r3, [r7, #2]
 8000b76:	3b01      	subs	r3, #1
 8000b78:	6879      	ldr	r1, [r7, #4]
 8000b7a:	440b      	add	r3, r1
 8000b7c:	f893 310a 	ldrb.w	r3, [r3, #266]	@ 0x10a
 8000b80:	021b      	lsls	r3, r3, #8
 8000b82:	b21b      	sxth	r3, r3
 8000b84:	4313      	orrs	r3, r2
 8000b86:	b21b      	sxth	r3, r3
 8000b88:	81bb      	strh	r3, [r7, #12]
    if (crc != receivedCRC) {
 8000b8a:	89fa      	ldrh	r2, [r7, #14]
 8000b8c:	89bb      	ldrh	r3, [r7, #12]
 8000b8e:	429a      	cmp	r2, r3
 8000b90:	d001      	beq.n	8000b96 <Modbus_SendRequest+0xb0>
        return MODBUS_INVALID_CRC;
 8000b92:	2303      	movs	r3, #3
 8000b94:	e000      	b.n	8000b98 <Modbus_SendRequest+0xb2>
    }

    return MODBUS_OK;
 8000b96:	2300      	movs	r3, #0
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	3710      	adds	r7, #16
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}

08000ba0 <Modbus_ReadHoldingRegisters>:


ModbusStatus Modbus_ReadHoldingRegisters(ModbusMaster* modbus, uint8_t slaveID, uint16_t startAddress, uint16_t quantity, uint16_t* data) {
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b086      	sub	sp, #24
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	60f8      	str	r0, [r7, #12]
 8000ba8:	4608      	mov	r0, r1
 8000baa:	4611      	mov	r1, r2
 8000bac:	461a      	mov	r2, r3
 8000bae:	4603      	mov	r3, r0
 8000bb0:	72fb      	strb	r3, [r7, #11]
 8000bb2:	460b      	mov	r3, r1
 8000bb4:	813b      	strh	r3, [r7, #8]
 8000bb6:	4613      	mov	r3, r2
 8000bb8:	80fb      	strh	r3, [r7, #6]
    modbus->txBuffer[0] = slaveID;
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	7afa      	ldrb	r2, [r7, #11]
 8000bbe:	729a      	strb	r2, [r3, #10]
    modbus->txBuffer[1] = MODBUS_FUNCTION_READ_HOLDING_REGISTERS;
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	2203      	movs	r2, #3
 8000bc4:	72da      	strb	r2, [r3, #11]
    modbus->txBuffer[2] = startAddress >> 8;
 8000bc6:	893b      	ldrh	r3, [r7, #8]
 8000bc8:	0a1b      	lsrs	r3, r3, #8
 8000bca:	b29b      	uxth	r3, r3
 8000bcc:	b2da      	uxtb	r2, r3
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	731a      	strb	r2, [r3, #12]
    modbus->txBuffer[3] = startAddress & 0xFF;
 8000bd2:	893b      	ldrh	r3, [r7, #8]
 8000bd4:	b2da      	uxtb	r2, r3
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	735a      	strb	r2, [r3, #13]
    modbus->txBuffer[4] = quantity >> 8;
 8000bda:	88fb      	ldrh	r3, [r7, #6]
 8000bdc:	0a1b      	lsrs	r3, r3, #8
 8000bde:	b29b      	uxth	r3, r3
 8000be0:	b2da      	uxtb	r2, r3
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	739a      	strb	r2, [r3, #14]
    modbus->txBuffer[5] = quantity & 0xFF;
 8000be6:	88fb      	ldrh	r3, [r7, #6]
 8000be8:	b2da      	uxtb	r2, r3
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	73da      	strb	r2, [r3, #15]

    uint16_t crc = crc16(modbus->txBuffer, 6);
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	330a      	adds	r3, #10
 8000bf2:	2106      	movs	r1, #6
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f000 f8fb 	bl	8000df0 <crc16>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	82bb      	strh	r3, [r7, #20]
    modbus->txBuffer[6] = crc & 0xFF;
 8000bfe:	8abb      	ldrh	r3, [r7, #20]
 8000c00:	b2da      	uxtb	r2, r3
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	741a      	strb	r2, [r3, #16]
    modbus->txBuffer[7] = crc >> 8;
 8000c06:	8abb      	ldrh	r3, [r7, #20]
 8000c08:	0a1b      	lsrs	r3, r3, #8
 8000c0a:	b29b      	uxth	r3, r3
 8000c0c:	b2da      	uxtb	r2, r3
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	745a      	strb	r2, [r3, #17]

    uint8_t responseLength = 5 + 2 * quantity; // SlaveID + Function + ByteCount + Data + CRC
 8000c12:	88fb      	ldrh	r3, [r7, #6]
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	005b      	lsls	r3, r3, #1
 8000c18:	b2db      	uxtb	r3, r3
 8000c1a:	3305      	adds	r3, #5
 8000c1c:	74fb      	strb	r3, [r7, #19]
    ModbusStatus status = Modbus_SendRequest(modbus, 8, responseLength);
 8000c1e:	7cfb      	ldrb	r3, [r7, #19]
 8000c20:	461a      	mov	r2, r3
 8000c22:	2108      	movs	r1, #8
 8000c24:	68f8      	ldr	r0, [r7, #12]
 8000c26:	f7ff ff5e 	bl	8000ae6 <Modbus_SendRequest>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	74bb      	strb	r3, [r7, #18]
    if (status != MODBUS_OK) return status;
 8000c2e:	7cbb      	ldrb	r3, [r7, #18]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <Modbus_ReadHoldingRegisters+0x98>
 8000c34:	7cbb      	ldrb	r3, [r7, #18]
 8000c36:	e023      	b.n	8000c80 <Modbus_ReadHoldingRegisters+0xe0>

    for (uint16_t i = 0; i < quantity; i++) {
 8000c38:	2300      	movs	r3, #0
 8000c3a:	82fb      	strh	r3, [r7, #22]
 8000c3c:	e01b      	b.n	8000c76 <Modbus_ReadHoldingRegisters+0xd6>
        data[i] = (modbus->rxBuffer[3 + i * 2] << 8) | modbus->rxBuffer[4 + i * 2];
 8000c3e:	8afb      	ldrh	r3, [r7, #22]
 8000c40:	005b      	lsls	r3, r3, #1
 8000c42:	3303      	adds	r3, #3
 8000c44:	68fa      	ldr	r2, [r7, #12]
 8000c46:	4413      	add	r3, r2
 8000c48:	f893 310a 	ldrb.w	r3, [r3, #266]	@ 0x10a
 8000c4c:	021b      	lsls	r3, r3, #8
 8000c4e:	b21a      	sxth	r2, r3
 8000c50:	8afb      	ldrh	r3, [r7, #22]
 8000c52:	3302      	adds	r3, #2
 8000c54:	005b      	lsls	r3, r3, #1
 8000c56:	68f9      	ldr	r1, [r7, #12]
 8000c58:	440b      	add	r3, r1
 8000c5a:	f893 310a 	ldrb.w	r3, [r3, #266]	@ 0x10a
 8000c5e:	b21b      	sxth	r3, r3
 8000c60:	4313      	orrs	r3, r2
 8000c62:	b219      	sxth	r1, r3
 8000c64:	8afb      	ldrh	r3, [r7, #22]
 8000c66:	005b      	lsls	r3, r3, #1
 8000c68:	6a3a      	ldr	r2, [r7, #32]
 8000c6a:	4413      	add	r3, r2
 8000c6c:	b28a      	uxth	r2, r1
 8000c6e:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < quantity; i++) {
 8000c70:	8afb      	ldrh	r3, [r7, #22]
 8000c72:	3301      	adds	r3, #1
 8000c74:	82fb      	strh	r3, [r7, #22]
 8000c76:	8afa      	ldrh	r2, [r7, #22]
 8000c78:	88fb      	ldrh	r3, [r7, #6]
 8000c7a:	429a      	cmp	r2, r3
 8000c7c:	d3df      	bcc.n	8000c3e <Modbus_ReadHoldingRegisters+0x9e>
    }

    return MODBUS_OK;
 8000c7e:	2300      	movs	r3, #0
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	3718      	adds	r7, #24
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}

08000c88 <Modbus_WriteSingleRegister>:

ModbusStatus Modbus_WriteSingleRegister(ModbusMaster* modbus, uint8_t slaveID, uint16_t address, uint16_t value) {
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b086      	sub	sp, #24
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	60f8      	str	r0, [r7, #12]
 8000c90:	4608      	mov	r0, r1
 8000c92:	4611      	mov	r1, r2
 8000c94:	461a      	mov	r2, r3
 8000c96:	4603      	mov	r3, r0
 8000c98:	72fb      	strb	r3, [r7, #11]
 8000c9a:	460b      	mov	r3, r1
 8000c9c:	813b      	strh	r3, [r7, #8]
 8000c9e:	4613      	mov	r3, r2
 8000ca0:	80fb      	strh	r3, [r7, #6]
    modbus->txBuffer[0] = slaveID;
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	7afa      	ldrb	r2, [r7, #11]
 8000ca6:	729a      	strb	r2, [r3, #10]
    modbus->txBuffer[1] = MODBUS_FUNCTION_WRITE_SINGLE_REGISTER;
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	2206      	movs	r2, #6
 8000cac:	72da      	strb	r2, [r3, #11]
    modbus->txBuffer[2] = address >> 8;
 8000cae:	893b      	ldrh	r3, [r7, #8]
 8000cb0:	0a1b      	lsrs	r3, r3, #8
 8000cb2:	b29b      	uxth	r3, r3
 8000cb4:	b2da      	uxtb	r2, r3
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	731a      	strb	r2, [r3, #12]
    modbus->txBuffer[3] = address & 0xFF;
 8000cba:	893b      	ldrh	r3, [r7, #8]
 8000cbc:	b2da      	uxtb	r2, r3
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	735a      	strb	r2, [r3, #13]
    modbus->txBuffer[4] = value >> 8;
 8000cc2:	88fb      	ldrh	r3, [r7, #6]
 8000cc4:	0a1b      	lsrs	r3, r3, #8
 8000cc6:	b29b      	uxth	r3, r3
 8000cc8:	b2da      	uxtb	r2, r3
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	739a      	strb	r2, [r3, #14]
    modbus->txBuffer[5] = value & 0xFF;
 8000cce:	88fb      	ldrh	r3, [r7, #6]
 8000cd0:	b2da      	uxtb	r2, r3
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	73da      	strb	r2, [r3, #15]

    uint16_t crc = crc16(modbus->txBuffer, 6);
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	330a      	adds	r3, #10
 8000cda:	2106      	movs	r1, #6
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f000 f887 	bl	8000df0 <crc16>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	82fb      	strh	r3, [r7, #22]
    modbus->txBuffer[6] = crc & 0xFF;
 8000ce6:	8afb      	ldrh	r3, [r7, #22]
 8000ce8:	b2da      	uxtb	r2, r3
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	741a      	strb	r2, [r3, #16]
    modbus->txBuffer[7] = crc >> 8;
 8000cee:	8afb      	ldrh	r3, [r7, #22]
 8000cf0:	0a1b      	lsrs	r3, r3, #8
 8000cf2:	b29b      	uxth	r3, r3
 8000cf4:	b2da      	uxtb	r2, r3
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	745a      	strb	r2, [r3, #17]

    return Modbus_SendRequest(modbus, 8, 8); // Response is echo of request
 8000cfa:	2208      	movs	r2, #8
 8000cfc:	2108      	movs	r1, #8
 8000cfe:	68f8      	ldr	r0, [r7, #12]
 8000d00:	f7ff fef1 	bl	8000ae6 <Modbus_SendRequest>
 8000d04:	4603      	mov	r3, r0
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3718      	adds	r7, #24
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}

08000d0e <Modbus_WriteMultipleCoils>:
    }

    return MODBUS_OK;
}

ModbusStatus Modbus_WriteMultipleCoils(ModbusMaster* modbus, uint8_t slaveID, uint16_t startAddress, uint16_t quantity, const uint8_t* values) {
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	b086      	sub	sp, #24
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	60f8      	str	r0, [r7, #12]
 8000d16:	4608      	mov	r0, r1
 8000d18:	4611      	mov	r1, r2
 8000d1a:	461a      	mov	r2, r3
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	72fb      	strb	r3, [r7, #11]
 8000d20:	460b      	mov	r3, r1
 8000d22:	813b      	strh	r3, [r7, #8]
 8000d24:	4613      	mov	r3, r2
 8000d26:	80fb      	strh	r3, [r7, #6]
    uint8_t byteCount = (quantity+7) / 8;
 8000d28:	88fb      	ldrh	r3, [r7, #6]
 8000d2a:	3307      	adds	r3, #7
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	da00      	bge.n	8000d32 <Modbus_WriteMultipleCoils+0x24>
 8000d30:	3307      	adds	r3, #7
 8000d32:	10db      	asrs	r3, r3, #3
 8000d34:	75bb      	strb	r3, [r7, #22]

    modbus->txBuffer[0] = slaveID;
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	7afa      	ldrb	r2, [r7, #11]
 8000d3a:	729a      	strb	r2, [r3, #10]
    modbus->txBuffer[1] = MODBUS_FUNCTION_WRITE_MULTIPLE_COILS;
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	220f      	movs	r2, #15
 8000d40:	72da      	strb	r2, [r3, #11]
    modbus->txBuffer[2] = startAddress >> 8;
 8000d42:	893b      	ldrh	r3, [r7, #8]
 8000d44:	0a1b      	lsrs	r3, r3, #8
 8000d46:	b29b      	uxth	r3, r3
 8000d48:	b2da      	uxtb	r2, r3
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	731a      	strb	r2, [r3, #12]
    modbus->txBuffer[3] = startAddress & 0xFF;
 8000d4e:	893b      	ldrh	r3, [r7, #8]
 8000d50:	b2da      	uxtb	r2, r3
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	735a      	strb	r2, [r3, #13]
    modbus->txBuffer[4] = quantity >> 8;
 8000d56:	88fb      	ldrh	r3, [r7, #6]
 8000d58:	0a1b      	lsrs	r3, r3, #8
 8000d5a:	b29b      	uxth	r3, r3
 8000d5c:	b2da      	uxtb	r2, r3
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	739a      	strb	r2, [r3, #14]
    modbus->txBuffer[5] = quantity & 0xFF;
 8000d62:	88fb      	ldrh	r3, [r7, #6]
 8000d64:	b2da      	uxtb	r2, r3
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	73da      	strb	r2, [r3, #15]
    modbus->txBuffer[6] = byteCount;
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	7dba      	ldrb	r2, [r7, #22]
 8000d6e:	741a      	strb	r2, [r3, #16]

    for (uint8_t i = 0; i < byteCount; i++) {
 8000d70:	2300      	movs	r3, #0
 8000d72:	75fb      	strb	r3, [r7, #23]
 8000d74:	e00c      	b.n	8000d90 <Modbus_WriteMultipleCoils+0x82>
        modbus->txBuffer[7 + i] = values[i];
 8000d76:	7dfb      	ldrb	r3, [r7, #23]
 8000d78:	6a3a      	ldr	r2, [r7, #32]
 8000d7a:	441a      	add	r2, r3
 8000d7c:	7dfb      	ldrb	r3, [r7, #23]
 8000d7e:	3307      	adds	r3, #7
 8000d80:	7811      	ldrb	r1, [r2, #0]
 8000d82:	68fa      	ldr	r2, [r7, #12]
 8000d84:	4413      	add	r3, r2
 8000d86:	460a      	mov	r2, r1
 8000d88:	729a      	strb	r2, [r3, #10]
    for (uint8_t i = 0; i < byteCount; i++) {
 8000d8a:	7dfb      	ldrb	r3, [r7, #23]
 8000d8c:	3301      	adds	r3, #1
 8000d8e:	75fb      	strb	r3, [r7, #23]
 8000d90:	7dfa      	ldrb	r2, [r7, #23]
 8000d92:	7dbb      	ldrb	r3, [r7, #22]
 8000d94:	429a      	cmp	r2, r3
 8000d96:	d3ee      	bcc.n	8000d76 <Modbus_WriteMultipleCoils+0x68>
    }

    uint16_t crc = crc16(modbus->txBuffer, 7 + byteCount);
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	f103 020a 	add.w	r2, r3, #10
 8000d9e:	7dbb      	ldrb	r3, [r7, #22]
 8000da0:	b29b      	uxth	r3, r3
 8000da2:	3307      	adds	r3, #7
 8000da4:	b29b      	uxth	r3, r3
 8000da6:	4619      	mov	r1, r3
 8000da8:	4610      	mov	r0, r2
 8000daa:	f000 f821 	bl	8000df0 <crc16>
 8000dae:	4603      	mov	r3, r0
 8000db0:	82bb      	strh	r3, [r7, #20]
    modbus->txBuffer[7 + byteCount] = crc & 0xFF;
 8000db2:	7dbb      	ldrb	r3, [r7, #22]
 8000db4:	3307      	adds	r3, #7
 8000db6:	8aba      	ldrh	r2, [r7, #20]
 8000db8:	b2d1      	uxtb	r1, r2
 8000dba:	68fa      	ldr	r2, [r7, #12]
 8000dbc:	4413      	add	r3, r2
 8000dbe:	460a      	mov	r2, r1
 8000dc0:	729a      	strb	r2, [r3, #10]
    modbus->txBuffer[8 + byteCount] = crc >> 8;
 8000dc2:	8abb      	ldrh	r3, [r7, #20]
 8000dc4:	0a1b      	lsrs	r3, r3, #8
 8000dc6:	b29a      	uxth	r2, r3
 8000dc8:	7dbb      	ldrb	r3, [r7, #22]
 8000dca:	3308      	adds	r3, #8
 8000dcc:	b2d1      	uxtb	r1, r2
 8000dce:	68fa      	ldr	r2, [r7, #12]
 8000dd0:	4413      	add	r3, r2
 8000dd2:	460a      	mov	r2, r1
 8000dd4:	729a      	strb	r2, [r3, #10]

    return Modbus_SendRequest(modbus, 9 + byteCount, 8);
 8000dd6:	7dbb      	ldrb	r3, [r7, #22]
 8000dd8:	3309      	adds	r3, #9
 8000dda:	b2db      	uxtb	r3, r3
 8000ddc:	2208      	movs	r2, #8
 8000dde:	4619      	mov	r1, r3
 8000de0:	68f8      	ldr	r0, [r7, #12]
 8000de2:	f7ff fe80 	bl	8000ae6 <Modbus_SendRequest>
 8000de6:	4603      	mov	r3, r0
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	3718      	adds	r7, #24
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}

08000df0 <crc16>:
    0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42,
    0x43, 0x83, 0x41, 0x81, 0x80, 0x40
};

uint16_t crc16(uint8_t *buffer, uint16_t buffer_length)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b085      	sub	sp, #20
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
 8000df8:	460b      	mov	r3, r1
 8000dfa:	807b      	strh	r3, [r7, #2]
    uint8_t crc_hi = 0xFF; /* high CRC byte initialized */
 8000dfc:	23ff      	movs	r3, #255	@ 0xff
 8000dfe:	73fb      	strb	r3, [r7, #15]
    uint8_t crc_lo = 0xFF; /* low CRC byte initialized */
 8000e00:	23ff      	movs	r3, #255	@ 0xff
 8000e02:	73bb      	strb	r3, [r7, #14]
    unsigned int i; /* will index into CRC lookup */

    /* pass through message buffer */
    while (buffer_length--) {
 8000e04:	e013      	b.n	8000e2e <crc16+0x3e>
        i = crc_lo ^ *buffer++; /* calculate the CRC  */
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	1c5a      	adds	r2, r3, #1
 8000e0a:	607a      	str	r2, [r7, #4]
 8000e0c:	781a      	ldrb	r2, [r3, #0]
 8000e0e:	7bbb      	ldrb	r3, [r7, #14]
 8000e10:	4053      	eors	r3, r2
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	60bb      	str	r3, [r7, #8]
        crc_lo = crc_hi ^ table_crc_hi[i];
 8000e16:	4a0f      	ldr	r2, [pc, #60]	@ (8000e54 <crc16+0x64>)
 8000e18:	68bb      	ldr	r3, [r7, #8]
 8000e1a:	4413      	add	r3, r2
 8000e1c:	781a      	ldrb	r2, [r3, #0]
 8000e1e:	7bfb      	ldrb	r3, [r7, #15]
 8000e20:	4053      	eors	r3, r2
 8000e22:	73bb      	strb	r3, [r7, #14]
        crc_hi = table_crc_lo[i];
 8000e24:	4a0c      	ldr	r2, [pc, #48]	@ (8000e58 <crc16+0x68>)
 8000e26:	68bb      	ldr	r3, [r7, #8]
 8000e28:	4413      	add	r3, r2
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	73fb      	strb	r3, [r7, #15]
    while (buffer_length--) {
 8000e2e:	887b      	ldrh	r3, [r7, #2]
 8000e30:	1e5a      	subs	r2, r3, #1
 8000e32:	807a      	strh	r2, [r7, #2]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d1e6      	bne.n	8000e06 <crc16+0x16>
    }

    return (crc_hi << 8 | crc_lo);
 8000e38:	7bfb      	ldrb	r3, [r7, #15]
 8000e3a:	021b      	lsls	r3, r3, #8
 8000e3c:	b21a      	sxth	r2, r3
 8000e3e:	7bbb      	ldrb	r3, [r7, #14]
 8000e40:	b21b      	sxth	r3, r3
 8000e42:	4313      	orrs	r3, r2
 8000e44:	b21b      	sxth	r3, r3
 8000e46:	b29b      	uxth	r3, r3
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	3714      	adds	r7, #20
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr
 8000e54:	08004630 	.word	0x08004630
 8000e58:	08004730 	.word	0x08004730

08000e5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e62:	2300      	movs	r3, #0
 8000e64:	607b      	str	r3, [r7, #4]
 8000e66:	4b10      	ldr	r3, [pc, #64]	@ (8000ea8 <HAL_MspInit+0x4c>)
 8000e68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e6a:	4a0f      	ldr	r2, [pc, #60]	@ (8000ea8 <HAL_MspInit+0x4c>)
 8000e6c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e70:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e72:	4b0d      	ldr	r3, [pc, #52]	@ (8000ea8 <HAL_MspInit+0x4c>)
 8000e74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e7a:	607b      	str	r3, [r7, #4]
 8000e7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e7e:	2300      	movs	r3, #0
 8000e80:	603b      	str	r3, [r7, #0]
 8000e82:	4b09      	ldr	r3, [pc, #36]	@ (8000ea8 <HAL_MspInit+0x4c>)
 8000e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e86:	4a08      	ldr	r2, [pc, #32]	@ (8000ea8 <HAL_MspInit+0x4c>)
 8000e88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e8e:	4b06      	ldr	r3, [pc, #24]	@ (8000ea8 <HAL_MspInit+0x4c>)
 8000e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e96:	603b      	str	r3, [r7, #0]
 8000e98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e9a:	bf00      	nop
 8000e9c:	370c      	adds	r7, #12
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	40023800 	.word	0x40023800

08000eac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b08a      	sub	sp, #40	@ 0x28
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb4:	f107 0314 	add.w	r3, r7, #20
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	605a      	str	r2, [r3, #4]
 8000ebe:	609a      	str	r2, [r3, #8]
 8000ec0:	60da      	str	r2, [r3, #12]
 8000ec2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a19      	ldr	r2, [pc, #100]	@ (8000f30 <HAL_SPI_MspInit+0x84>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d12c      	bne.n	8000f28 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000ece:	2300      	movs	r3, #0
 8000ed0:	613b      	str	r3, [r7, #16]
 8000ed2:	4b18      	ldr	r3, [pc, #96]	@ (8000f34 <HAL_SPI_MspInit+0x88>)
 8000ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ed6:	4a17      	ldr	r2, [pc, #92]	@ (8000f34 <HAL_SPI_MspInit+0x88>)
 8000ed8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000edc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ede:	4b15      	ldr	r3, [pc, #84]	@ (8000f34 <HAL_SPI_MspInit+0x88>)
 8000ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ee2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ee6:	613b      	str	r3, [r7, #16]
 8000ee8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eea:	2300      	movs	r3, #0
 8000eec:	60fb      	str	r3, [r7, #12]
 8000eee:	4b11      	ldr	r3, [pc, #68]	@ (8000f34 <HAL_SPI_MspInit+0x88>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ef2:	4a10      	ldr	r2, [pc, #64]	@ (8000f34 <HAL_SPI_MspInit+0x88>)
 8000ef4:	f043 0302 	orr.w	r3, r3, #2
 8000ef8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000efa:	4b0e      	ldr	r3, [pc, #56]	@ (8000f34 <HAL_SPI_MspInit+0x88>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000efe:	f003 0302 	and.w	r3, r3, #2
 8000f02:	60fb      	str	r3, [r7, #12]
 8000f04:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000f06:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000f0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f10:	2300      	movs	r3, #0
 8000f12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f14:	2303      	movs	r3, #3
 8000f16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f18:	2305      	movs	r3, #5
 8000f1a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f1c:	f107 0314 	add.w	r3, r7, #20
 8000f20:	4619      	mov	r1, r3
 8000f22:	4805      	ldr	r0, [pc, #20]	@ (8000f38 <HAL_SPI_MspInit+0x8c>)
 8000f24:	f000 ff6c 	bl	8001e00 <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8000f28:	bf00      	nop
 8000f2a:	3728      	adds	r7, #40	@ 0x28
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	40003800 	.word	0x40003800
 8000f34:	40023800 	.word	0x40023800
 8000f38:	40020400 	.word	0x40020400

08000f3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b08c      	sub	sp, #48	@ 0x30
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f44:	f107 031c 	add.w	r3, r7, #28
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	605a      	str	r2, [r3, #4]
 8000f4e:	609a      	str	r2, [r3, #8]
 8000f50:	60da      	str	r2, [r3, #12]
 8000f52:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a9b      	ldr	r2, [pc, #620]	@ (80011c8 <HAL_UART_MspInit+0x28c>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	f040 8095 	bne.w	800108a <HAL_UART_MspInit+0x14e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f60:	2300      	movs	r3, #0
 8000f62:	61bb      	str	r3, [r7, #24]
 8000f64:	4b99      	ldr	r3, [pc, #612]	@ (80011cc <HAL_UART_MspInit+0x290>)
 8000f66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f68:	4a98      	ldr	r2, [pc, #608]	@ (80011cc <HAL_UART_MspInit+0x290>)
 8000f6a:	f043 0310 	orr.w	r3, r3, #16
 8000f6e:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f70:	4b96      	ldr	r3, [pc, #600]	@ (80011cc <HAL_UART_MspInit+0x290>)
 8000f72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f74:	f003 0310 	and.w	r3, r3, #16
 8000f78:	61bb      	str	r3, [r7, #24]
 8000f7a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	617b      	str	r3, [r7, #20]
 8000f80:	4b92      	ldr	r3, [pc, #584]	@ (80011cc <HAL_UART_MspInit+0x290>)
 8000f82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f84:	4a91      	ldr	r2, [pc, #580]	@ (80011cc <HAL_UART_MspInit+0x290>)
 8000f86:	f043 0301 	orr.w	r3, r3, #1
 8000f8a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f8c:	4b8f      	ldr	r3, [pc, #572]	@ (80011cc <HAL_UART_MspInit+0x290>)
 8000f8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f90:	f003 0301 	and.w	r3, r3, #1
 8000f94:	617b      	str	r3, [r7, #20]
 8000f96:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000f98:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000f9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa6:	2303      	movs	r3, #3
 8000fa8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000faa:	2307      	movs	r3, #7
 8000fac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fae:	f107 031c 	add.w	r3, r7, #28
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	4886      	ldr	r0, [pc, #536]	@ (80011d0 <HAL_UART_MspInit+0x294>)
 8000fb6:	f000 ff23 	bl	8001e00 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8000fba:	4b86      	ldr	r3, [pc, #536]	@ (80011d4 <HAL_UART_MspInit+0x298>)
 8000fbc:	4a86      	ldr	r2, [pc, #536]	@ (80011d8 <HAL_UART_MspInit+0x29c>)
 8000fbe:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8000fc0:	4b84      	ldr	r3, [pc, #528]	@ (80011d4 <HAL_UART_MspInit+0x298>)
 8000fc2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000fc6:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fc8:	4b82      	ldr	r3, [pc, #520]	@ (80011d4 <HAL_UART_MspInit+0x298>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fce:	4b81      	ldr	r3, [pc, #516]	@ (80011d4 <HAL_UART_MspInit+0x298>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000fd4:	4b7f      	ldr	r3, [pc, #508]	@ (80011d4 <HAL_UART_MspInit+0x298>)
 8000fd6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000fda:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fdc:	4b7d      	ldr	r3, [pc, #500]	@ (80011d4 <HAL_UART_MspInit+0x298>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fe2:	4b7c      	ldr	r3, [pc, #496]	@ (80011d4 <HAL_UART_MspInit+0x298>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000fe8:	4b7a      	ldr	r3, [pc, #488]	@ (80011d4 <HAL_UART_MspInit+0x298>)
 8000fea:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000fee:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8000ff0:	4b78      	ldr	r3, [pc, #480]	@ (80011d4 <HAL_UART_MspInit+0x298>)
 8000ff2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000ff6:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ff8:	4b76      	ldr	r3, [pc, #472]	@ (80011d4 <HAL_UART_MspInit+0x298>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000ffe:	4875      	ldr	r0, [pc, #468]	@ (80011d4 <HAL_UART_MspInit+0x298>)
 8001000:	f000 fb82 	bl	8001708 <HAL_DMA_Init>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <HAL_UART_MspInit+0xd2>
    {
      Error_Handler();
 800100a:	f7ff fd39 	bl	8000a80 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a70      	ldr	r2, [pc, #448]	@ (80011d4 <HAL_UART_MspInit+0x298>)
 8001012:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001014:	4a6f      	ldr	r2, [pc, #444]	@ (80011d4 <HAL_UART_MspInit+0x298>)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 800101a:	4b70      	ldr	r3, [pc, #448]	@ (80011dc <HAL_UART_MspInit+0x2a0>)
 800101c:	4a70      	ldr	r2, [pc, #448]	@ (80011e0 <HAL_UART_MspInit+0x2a4>)
 800101e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8001020:	4b6e      	ldr	r3, [pc, #440]	@ (80011dc <HAL_UART_MspInit+0x2a0>)
 8001022:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001026:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001028:	4b6c      	ldr	r3, [pc, #432]	@ (80011dc <HAL_UART_MspInit+0x2a0>)
 800102a:	2240      	movs	r2, #64	@ 0x40
 800102c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800102e:	4b6b      	ldr	r3, [pc, #428]	@ (80011dc <HAL_UART_MspInit+0x2a0>)
 8001030:	2200      	movs	r2, #0
 8001032:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001034:	4b69      	ldr	r3, [pc, #420]	@ (80011dc <HAL_UART_MspInit+0x2a0>)
 8001036:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800103a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800103c:	4b67      	ldr	r3, [pc, #412]	@ (80011dc <HAL_UART_MspInit+0x2a0>)
 800103e:	2200      	movs	r2, #0
 8001040:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001042:	4b66      	ldr	r3, [pc, #408]	@ (80011dc <HAL_UART_MspInit+0x2a0>)
 8001044:	2200      	movs	r2, #0
 8001046:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001048:	4b64      	ldr	r3, [pc, #400]	@ (80011dc <HAL_UART_MspInit+0x2a0>)
 800104a:	2200      	movs	r2, #0
 800104c:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800104e:	4b63      	ldr	r3, [pc, #396]	@ (80011dc <HAL_UART_MspInit+0x2a0>)
 8001050:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001054:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001056:	4b61      	ldr	r3, [pc, #388]	@ (80011dc <HAL_UART_MspInit+0x2a0>)
 8001058:	2200      	movs	r2, #0
 800105a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800105c:	485f      	ldr	r0, [pc, #380]	@ (80011dc <HAL_UART_MspInit+0x2a0>)
 800105e:	f000 fb53 	bl	8001708 <HAL_DMA_Init>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <HAL_UART_MspInit+0x130>
    {
      Error_Handler();
 8001068:	f7ff fd0a 	bl	8000a80 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	4a5b      	ldr	r2, [pc, #364]	@ (80011dc <HAL_UART_MspInit+0x2a0>)
 8001070:	639a      	str	r2, [r3, #56]	@ 0x38
 8001072:	4a5a      	ldr	r2, [pc, #360]	@ (80011dc <HAL_UART_MspInit+0x2a0>)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001078:	2200      	movs	r2, #0
 800107a:	2100      	movs	r1, #0
 800107c:	2025      	movs	r0, #37	@ 0x25
 800107e:	f000 fb0c 	bl	800169a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001082:	2025      	movs	r0, #37	@ 0x25
 8001084:	f000 fb25 	bl	80016d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001088:	e099      	b.n	80011be <HAL_UART_MspInit+0x282>
  else if(huart->Instance==USART3)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4a55      	ldr	r2, [pc, #340]	@ (80011e4 <HAL_UART_MspInit+0x2a8>)
 8001090:	4293      	cmp	r3, r2
 8001092:	f040 8094 	bne.w	80011be <HAL_UART_MspInit+0x282>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001096:	2300      	movs	r3, #0
 8001098:	613b      	str	r3, [r7, #16]
 800109a:	4b4c      	ldr	r3, [pc, #304]	@ (80011cc <HAL_UART_MspInit+0x290>)
 800109c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800109e:	4a4b      	ldr	r2, [pc, #300]	@ (80011cc <HAL_UART_MspInit+0x290>)
 80010a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80010a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80010a6:	4b49      	ldr	r3, [pc, #292]	@ (80011cc <HAL_UART_MspInit+0x290>)
 80010a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80010ae:	613b      	str	r3, [r7, #16]
 80010b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010b2:	2300      	movs	r3, #0
 80010b4:	60fb      	str	r3, [r7, #12]
 80010b6:	4b45      	ldr	r3, [pc, #276]	@ (80011cc <HAL_UART_MspInit+0x290>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ba:	4a44      	ldr	r2, [pc, #272]	@ (80011cc <HAL_UART_MspInit+0x290>)
 80010bc:	f043 0302 	orr.w	r3, r3, #2
 80010c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010c2:	4b42      	ldr	r3, [pc, #264]	@ (80011cc <HAL_UART_MspInit+0x290>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010c6:	f003 0302 	and.w	r3, r3, #2
 80010ca:	60fb      	str	r3, [r7, #12]
 80010cc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80010ce:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80010d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d4:	2302      	movs	r3, #2
 80010d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d8:	2300      	movs	r3, #0
 80010da:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010dc:	2303      	movs	r3, #3
 80010de:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80010e0:	2307      	movs	r3, #7
 80010e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010e4:	f107 031c 	add.w	r3, r7, #28
 80010e8:	4619      	mov	r1, r3
 80010ea:	483f      	ldr	r0, [pc, #252]	@ (80011e8 <HAL_UART_MspInit+0x2ac>)
 80010ec:	f000 fe88 	bl	8001e00 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80010f0:	4b3e      	ldr	r3, [pc, #248]	@ (80011ec <HAL_UART_MspInit+0x2b0>)
 80010f2:	4a3f      	ldr	r2, [pc, #252]	@ (80011f0 <HAL_UART_MspInit+0x2b4>)
 80010f4:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80010f6:	4b3d      	ldr	r3, [pc, #244]	@ (80011ec <HAL_UART_MspInit+0x2b0>)
 80010f8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80010fc:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010fe:	4b3b      	ldr	r3, [pc, #236]	@ (80011ec <HAL_UART_MspInit+0x2b0>)
 8001100:	2200      	movs	r2, #0
 8001102:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001104:	4b39      	ldr	r3, [pc, #228]	@ (80011ec <HAL_UART_MspInit+0x2b0>)
 8001106:	2200      	movs	r2, #0
 8001108:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800110a:	4b38      	ldr	r3, [pc, #224]	@ (80011ec <HAL_UART_MspInit+0x2b0>)
 800110c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001110:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001112:	4b36      	ldr	r3, [pc, #216]	@ (80011ec <HAL_UART_MspInit+0x2b0>)
 8001114:	2200      	movs	r2, #0
 8001116:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001118:	4b34      	ldr	r3, [pc, #208]	@ (80011ec <HAL_UART_MspInit+0x2b0>)
 800111a:	2200      	movs	r2, #0
 800111c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 800111e:	4b33      	ldr	r3, [pc, #204]	@ (80011ec <HAL_UART_MspInit+0x2b0>)
 8001120:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001124:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001126:	4b31      	ldr	r3, [pc, #196]	@ (80011ec <HAL_UART_MspInit+0x2b0>)
 8001128:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800112c:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800112e:	4b2f      	ldr	r3, [pc, #188]	@ (80011ec <HAL_UART_MspInit+0x2b0>)
 8001130:	2200      	movs	r2, #0
 8001132:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001134:	482d      	ldr	r0, [pc, #180]	@ (80011ec <HAL_UART_MspInit+0x2b0>)
 8001136:	f000 fae7 	bl	8001708 <HAL_DMA_Init>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <HAL_UART_MspInit+0x208>
      Error_Handler();
 8001140:	f7ff fc9e 	bl	8000a80 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	4a29      	ldr	r2, [pc, #164]	@ (80011ec <HAL_UART_MspInit+0x2b0>)
 8001148:	63da      	str	r2, [r3, #60]	@ 0x3c
 800114a:	4a28      	ldr	r2, [pc, #160]	@ (80011ec <HAL_UART_MspInit+0x2b0>)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8001150:	4b28      	ldr	r3, [pc, #160]	@ (80011f4 <HAL_UART_MspInit+0x2b8>)
 8001152:	4a29      	ldr	r2, [pc, #164]	@ (80011f8 <HAL_UART_MspInit+0x2bc>)
 8001154:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8001156:	4b27      	ldr	r3, [pc, #156]	@ (80011f4 <HAL_UART_MspInit+0x2b8>)
 8001158:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800115c:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800115e:	4b25      	ldr	r3, [pc, #148]	@ (80011f4 <HAL_UART_MspInit+0x2b8>)
 8001160:	2240      	movs	r2, #64	@ 0x40
 8001162:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001164:	4b23      	ldr	r3, [pc, #140]	@ (80011f4 <HAL_UART_MspInit+0x2b8>)
 8001166:	2200      	movs	r2, #0
 8001168:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800116a:	4b22      	ldr	r3, [pc, #136]	@ (80011f4 <HAL_UART_MspInit+0x2b8>)
 800116c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001170:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001172:	4b20      	ldr	r3, [pc, #128]	@ (80011f4 <HAL_UART_MspInit+0x2b8>)
 8001174:	2200      	movs	r2, #0
 8001176:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001178:	4b1e      	ldr	r3, [pc, #120]	@ (80011f4 <HAL_UART_MspInit+0x2b8>)
 800117a:	2200      	movs	r2, #0
 800117c:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800117e:	4b1d      	ldr	r3, [pc, #116]	@ (80011f4 <HAL_UART_MspInit+0x2b8>)
 8001180:	2200      	movs	r2, #0
 8001182:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001184:	4b1b      	ldr	r3, [pc, #108]	@ (80011f4 <HAL_UART_MspInit+0x2b8>)
 8001186:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800118a:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800118c:	4b19      	ldr	r3, [pc, #100]	@ (80011f4 <HAL_UART_MspInit+0x2b8>)
 800118e:	2200      	movs	r2, #0
 8001190:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001192:	4818      	ldr	r0, [pc, #96]	@ (80011f4 <HAL_UART_MspInit+0x2b8>)
 8001194:	f000 fab8 	bl	8001708 <HAL_DMA_Init>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <HAL_UART_MspInit+0x266>
      Error_Handler();
 800119e:	f7ff fc6f 	bl	8000a80 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a13      	ldr	r2, [pc, #76]	@ (80011f4 <HAL_UART_MspInit+0x2b8>)
 80011a6:	639a      	str	r2, [r3, #56]	@ 0x38
 80011a8:	4a12      	ldr	r2, [pc, #72]	@ (80011f4 <HAL_UART_MspInit+0x2b8>)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80011ae:	2200      	movs	r2, #0
 80011b0:	2100      	movs	r1, #0
 80011b2:	2027      	movs	r0, #39	@ 0x27
 80011b4:	f000 fa71 	bl	800169a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80011b8:	2027      	movs	r0, #39	@ 0x27
 80011ba:	f000 fa8a 	bl	80016d2 <HAL_NVIC_EnableIRQ>
}
 80011be:	bf00      	nop
 80011c0:	3730      	adds	r7, #48	@ 0x30
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40011000 	.word	0x40011000
 80011cc:	40023800 	.word	0x40023800
 80011d0:	40020000 	.word	0x40020000
 80011d4:	20000160 	.word	0x20000160
 80011d8:	40026440 	.word	0x40026440
 80011dc:	200001c0 	.word	0x200001c0
 80011e0:	400264b8 	.word	0x400264b8
 80011e4:	40004800 	.word	0x40004800
 80011e8:	40020400 	.word	0x40020400
 80011ec:	20000220 	.word	0x20000220
 80011f0:	40026028 	.word	0x40026028
 80011f4:	20000280 	.word	0x20000280
 80011f8:	40026058 	.word	0x40026058

080011fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001200:	bf00      	nop
 8001202:	e7fd      	b.n	8001200 <NMI_Handler+0x4>

08001204 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001208:	bf00      	nop
 800120a:	e7fd      	b.n	8001208 <HardFault_Handler+0x4>

0800120c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001210:	bf00      	nop
 8001212:	e7fd      	b.n	8001210 <MemManage_Handler+0x4>

08001214 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001218:	bf00      	nop
 800121a:	e7fd      	b.n	8001218 <BusFault_Handler+0x4>

0800121c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001220:	bf00      	nop
 8001222:	e7fd      	b.n	8001220 <UsageFault_Handler+0x4>

08001224 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001228:	bf00      	nop
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr

08001232 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001232:	b480      	push	{r7}
 8001234:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001236:	bf00      	nop
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr

08001240 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001244:	bf00      	nop
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr

0800124e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800124e:	b580      	push	{r7, lr}
 8001250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001252:	f000 f903 	bl	800145c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001256:	bf00      	nop
 8001258:	bd80      	pop	{r7, pc}
	...

0800125c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001260:	4802      	ldr	r0, [pc, #8]	@ (800126c <DMA1_Stream1_IRQHandler+0x10>)
 8001262:	f000 fb91 	bl	8001988 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001266:	bf00      	nop
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	20000220 	.word	0x20000220

08001270 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001274:	4802      	ldr	r0, [pc, #8]	@ (8001280 <DMA1_Stream3_IRQHandler+0x10>)
 8001276:	f000 fb87 	bl	8001988 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800127a:	bf00      	nop
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	20000280 	.word	0x20000280

08001284 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001288:	4802      	ldr	r0, [pc, #8]	@ (8001294 <USART1_IRQHandler+0x10>)
 800128a:	f001 fddd 	bl	8002e48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800128e:	bf00      	nop
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	200000d0 	.word	0x200000d0

08001298 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800129c:	4802      	ldr	r0, [pc, #8]	@ (80012a8 <USART3_IRQHandler+0x10>)
 800129e:	f001 fdd3 	bl	8002e48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80012a2:	bf00      	nop
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	20000118 	.word	0x20000118

080012ac <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80012b0:	4802      	ldr	r0, [pc, #8]	@ (80012bc <DMA2_Stream2_IRQHandler+0x10>)
 80012b2:	f000 fb69 	bl	8001988 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80012b6:	bf00      	nop
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	20000160 	.word	0x20000160

080012c0 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80012c4:	4802      	ldr	r0, [pc, #8]	@ (80012d0 <DMA2_Stream7_IRQHandler+0x10>)
 80012c6:	f000 fb5f 	bl	8001988 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80012ca:	bf00      	nop
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	200001c0 	.word	0x200001c0

080012d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b086      	sub	sp, #24
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012dc:	4a14      	ldr	r2, [pc, #80]	@ (8001330 <_sbrk+0x5c>)
 80012de:	4b15      	ldr	r3, [pc, #84]	@ (8001334 <_sbrk+0x60>)
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012e8:	4b13      	ldr	r3, [pc, #76]	@ (8001338 <_sbrk+0x64>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d102      	bne.n	80012f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012f0:	4b11      	ldr	r3, [pc, #68]	@ (8001338 <_sbrk+0x64>)
 80012f2:	4a12      	ldr	r2, [pc, #72]	@ (800133c <_sbrk+0x68>)
 80012f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012f6:	4b10      	ldr	r3, [pc, #64]	@ (8001338 <_sbrk+0x64>)
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4413      	add	r3, r2
 80012fe:	693a      	ldr	r2, [r7, #16]
 8001300:	429a      	cmp	r2, r3
 8001302:	d207      	bcs.n	8001314 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001304:	f002 fd04 	bl	8003d10 <__errno>
 8001308:	4603      	mov	r3, r0
 800130a:	220c      	movs	r2, #12
 800130c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800130e:	f04f 33ff 	mov.w	r3, #4294967295
 8001312:	e009      	b.n	8001328 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001314:	4b08      	ldr	r3, [pc, #32]	@ (8001338 <_sbrk+0x64>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800131a:	4b07      	ldr	r3, [pc, #28]	@ (8001338 <_sbrk+0x64>)
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4413      	add	r3, r2
 8001322:	4a05      	ldr	r2, [pc, #20]	@ (8001338 <_sbrk+0x64>)
 8001324:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001326:	68fb      	ldr	r3, [r7, #12]
}
 8001328:	4618      	mov	r0, r3
 800132a:	3718      	adds	r7, #24
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	20020000 	.word	0x20020000
 8001334:	00000400 	.word	0x00000400
 8001338:	200004ec 	.word	0x200004ec
 800133c:	20000640 	.word	0x20000640

08001340 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001344:	4b06      	ldr	r3, [pc, #24]	@ (8001360 <SystemInit+0x20>)
 8001346:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800134a:	4a05      	ldr	r2, [pc, #20]	@ (8001360 <SystemInit+0x20>)
 800134c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001350:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001354:	bf00      	nop
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	e000ed00 	.word	0xe000ed00

08001364 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001364:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800139c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001368:	f7ff ffea 	bl	8001340 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800136c:	480c      	ldr	r0, [pc, #48]	@ (80013a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800136e:	490d      	ldr	r1, [pc, #52]	@ (80013a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001370:	4a0d      	ldr	r2, [pc, #52]	@ (80013a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001372:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001374:	e002      	b.n	800137c <LoopCopyDataInit>

08001376 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001376:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001378:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800137a:	3304      	adds	r3, #4

0800137c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800137c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800137e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001380:	d3f9      	bcc.n	8001376 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001382:	4a0a      	ldr	r2, [pc, #40]	@ (80013ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001384:	4c0a      	ldr	r4, [pc, #40]	@ (80013b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001386:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001388:	e001      	b.n	800138e <LoopFillZerobss>

0800138a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800138a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800138c:	3204      	adds	r2, #4

0800138e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800138e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001390:	d3fb      	bcc.n	800138a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001392:	f002 fcc3 	bl	8003d1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001396:	f7ff f8eb 	bl	8000570 <main>
  bx  lr    
 800139a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800139c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013a4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80013a8:	08004894 	.word	0x08004894
  ldr r2, =_sbss
 80013ac:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80013b0:	2000063c 	.word	0x2000063c

080013b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013b4:	e7fe      	b.n	80013b4 <ADC_IRQHandler>
	...

080013b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013bc:	4b0e      	ldr	r3, [pc, #56]	@ (80013f8 <HAL_Init+0x40>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a0d      	ldr	r2, [pc, #52]	@ (80013f8 <HAL_Init+0x40>)
 80013c2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80013c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013c8:	4b0b      	ldr	r3, [pc, #44]	@ (80013f8 <HAL_Init+0x40>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a0a      	ldr	r2, [pc, #40]	@ (80013f8 <HAL_Init+0x40>)
 80013ce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80013d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013d4:	4b08      	ldr	r3, [pc, #32]	@ (80013f8 <HAL_Init+0x40>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a07      	ldr	r2, [pc, #28]	@ (80013f8 <HAL_Init+0x40>)
 80013da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013e0:	2003      	movs	r0, #3
 80013e2:	f000 f94f 	bl	8001684 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013e6:	2000      	movs	r0, #0
 80013e8:	f000 f808 	bl	80013fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013ec:	f7ff fd36 	bl	8000e5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013f0:	2300      	movs	r3, #0
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	40023c00 	.word	0x40023c00

080013fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001404:	4b12      	ldr	r3, [pc, #72]	@ (8001450 <HAL_InitTick+0x54>)
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	4b12      	ldr	r3, [pc, #72]	@ (8001454 <HAL_InitTick+0x58>)
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	4619      	mov	r1, r3
 800140e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001412:	fbb3 f3f1 	udiv	r3, r3, r1
 8001416:	fbb2 f3f3 	udiv	r3, r2, r3
 800141a:	4618      	mov	r0, r3
 800141c:	f000 f967 	bl	80016ee <HAL_SYSTICK_Config>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e00e      	b.n	8001448 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2b0f      	cmp	r3, #15
 800142e:	d80a      	bhi.n	8001446 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001430:	2200      	movs	r2, #0
 8001432:	6879      	ldr	r1, [r7, #4]
 8001434:	f04f 30ff 	mov.w	r0, #4294967295
 8001438:	f000 f92f 	bl	800169a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800143c:	4a06      	ldr	r2, [pc, #24]	@ (8001458 <HAL_InitTick+0x5c>)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001442:	2300      	movs	r3, #0
 8001444:	e000      	b.n	8001448 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
}
 8001448:	4618      	mov	r0, r3
 800144a:	3708      	adds	r7, #8
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	20000000 	.word	0x20000000
 8001454:	20000008 	.word	0x20000008
 8001458:	20000004 	.word	0x20000004

0800145c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001460:	4b06      	ldr	r3, [pc, #24]	@ (800147c <HAL_IncTick+0x20>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	461a      	mov	r2, r3
 8001466:	4b06      	ldr	r3, [pc, #24]	@ (8001480 <HAL_IncTick+0x24>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4413      	add	r3, r2
 800146c:	4a04      	ldr	r2, [pc, #16]	@ (8001480 <HAL_IncTick+0x24>)
 800146e:	6013      	str	r3, [r2, #0]
}
 8001470:	bf00      	nop
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	20000008 	.word	0x20000008
 8001480:	200004f0 	.word	0x200004f0

08001484 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  return uwTick;
 8001488:	4b03      	ldr	r3, [pc, #12]	@ (8001498 <HAL_GetTick+0x14>)
 800148a:	681b      	ldr	r3, [r3, #0]
}
 800148c:	4618      	mov	r0, r3
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	200004f0 	.word	0x200004f0

0800149c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014a4:	f7ff ffee 	bl	8001484 <HAL_GetTick>
 80014a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014b4:	d005      	beq.n	80014c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014b6:	4b0a      	ldr	r3, [pc, #40]	@ (80014e0 <HAL_Delay+0x44>)
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	461a      	mov	r2, r3
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	4413      	add	r3, r2
 80014c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80014c2:	bf00      	nop
 80014c4:	f7ff ffde 	bl	8001484 <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	68fa      	ldr	r2, [r7, #12]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d8f7      	bhi.n	80014c4 <HAL_Delay+0x28>
  {
  }
}
 80014d4:	bf00      	nop
 80014d6:	bf00      	nop
 80014d8:	3710      	adds	r7, #16
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	20000008 	.word	0x20000008

080014e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b085      	sub	sp, #20
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	f003 0307 	and.w	r3, r3, #7
 80014f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001528 <__NVIC_SetPriorityGrouping+0x44>)
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014fa:	68ba      	ldr	r2, [r7, #8]
 80014fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001500:	4013      	ands	r3, r2
 8001502:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800150c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001510:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001514:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001516:	4a04      	ldr	r2, [pc, #16]	@ (8001528 <__NVIC_SetPriorityGrouping+0x44>)
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	60d3      	str	r3, [r2, #12]
}
 800151c:	bf00      	nop
 800151e:	3714      	adds	r7, #20
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr
 8001528:	e000ed00 	.word	0xe000ed00

0800152c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001530:	4b04      	ldr	r3, [pc, #16]	@ (8001544 <__NVIC_GetPriorityGrouping+0x18>)
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	0a1b      	lsrs	r3, r3, #8
 8001536:	f003 0307 	and.w	r3, r3, #7
}
 800153a:	4618      	mov	r0, r3
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr
 8001544:	e000ed00 	.word	0xe000ed00

08001548 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	4603      	mov	r3, r0
 8001550:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001556:	2b00      	cmp	r3, #0
 8001558:	db0b      	blt.n	8001572 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800155a:	79fb      	ldrb	r3, [r7, #7]
 800155c:	f003 021f 	and.w	r2, r3, #31
 8001560:	4907      	ldr	r1, [pc, #28]	@ (8001580 <__NVIC_EnableIRQ+0x38>)
 8001562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001566:	095b      	lsrs	r3, r3, #5
 8001568:	2001      	movs	r0, #1
 800156a:	fa00 f202 	lsl.w	r2, r0, r2
 800156e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001572:	bf00      	nop
 8001574:	370c      	adds	r7, #12
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	e000e100 	.word	0xe000e100

08001584 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	4603      	mov	r3, r0
 800158c:	6039      	str	r1, [r7, #0]
 800158e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001590:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001594:	2b00      	cmp	r3, #0
 8001596:	db0a      	blt.n	80015ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	b2da      	uxtb	r2, r3
 800159c:	490c      	ldr	r1, [pc, #48]	@ (80015d0 <__NVIC_SetPriority+0x4c>)
 800159e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a2:	0112      	lsls	r2, r2, #4
 80015a4:	b2d2      	uxtb	r2, r2
 80015a6:	440b      	add	r3, r1
 80015a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015ac:	e00a      	b.n	80015c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	b2da      	uxtb	r2, r3
 80015b2:	4908      	ldr	r1, [pc, #32]	@ (80015d4 <__NVIC_SetPriority+0x50>)
 80015b4:	79fb      	ldrb	r3, [r7, #7]
 80015b6:	f003 030f 	and.w	r3, r3, #15
 80015ba:	3b04      	subs	r3, #4
 80015bc:	0112      	lsls	r2, r2, #4
 80015be:	b2d2      	uxtb	r2, r2
 80015c0:	440b      	add	r3, r1
 80015c2:	761a      	strb	r2, [r3, #24]
}
 80015c4:	bf00      	nop
 80015c6:	370c      	adds	r7, #12
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr
 80015d0:	e000e100 	.word	0xe000e100
 80015d4:	e000ed00 	.word	0xe000ed00

080015d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015d8:	b480      	push	{r7}
 80015da:	b089      	sub	sp, #36	@ 0x24
 80015dc:	af00      	add	r7, sp, #0
 80015de:	60f8      	str	r0, [r7, #12]
 80015e0:	60b9      	str	r1, [r7, #8]
 80015e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	f003 0307 	and.w	r3, r3, #7
 80015ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	f1c3 0307 	rsb	r3, r3, #7
 80015f2:	2b04      	cmp	r3, #4
 80015f4:	bf28      	it	cs
 80015f6:	2304      	movcs	r3, #4
 80015f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	3304      	adds	r3, #4
 80015fe:	2b06      	cmp	r3, #6
 8001600:	d902      	bls.n	8001608 <NVIC_EncodePriority+0x30>
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	3b03      	subs	r3, #3
 8001606:	e000      	b.n	800160a <NVIC_EncodePriority+0x32>
 8001608:	2300      	movs	r3, #0
 800160a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800160c:	f04f 32ff 	mov.w	r2, #4294967295
 8001610:	69bb      	ldr	r3, [r7, #24]
 8001612:	fa02 f303 	lsl.w	r3, r2, r3
 8001616:	43da      	mvns	r2, r3
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	401a      	ands	r2, r3
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001620:	f04f 31ff 	mov.w	r1, #4294967295
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	fa01 f303 	lsl.w	r3, r1, r3
 800162a:	43d9      	mvns	r1, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001630:	4313      	orrs	r3, r2
         );
}
 8001632:	4618      	mov	r0, r3
 8001634:	3724      	adds	r7, #36	@ 0x24
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
	...

08001640 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	3b01      	subs	r3, #1
 800164c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001650:	d301      	bcc.n	8001656 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001652:	2301      	movs	r3, #1
 8001654:	e00f      	b.n	8001676 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001656:	4a0a      	ldr	r2, [pc, #40]	@ (8001680 <SysTick_Config+0x40>)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	3b01      	subs	r3, #1
 800165c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800165e:	210f      	movs	r1, #15
 8001660:	f04f 30ff 	mov.w	r0, #4294967295
 8001664:	f7ff ff8e 	bl	8001584 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001668:	4b05      	ldr	r3, [pc, #20]	@ (8001680 <SysTick_Config+0x40>)
 800166a:	2200      	movs	r2, #0
 800166c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800166e:	4b04      	ldr	r3, [pc, #16]	@ (8001680 <SysTick_Config+0x40>)
 8001670:	2207      	movs	r2, #7
 8001672:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001674:	2300      	movs	r3, #0
}
 8001676:	4618      	mov	r0, r3
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	e000e010 	.word	0xe000e010

08001684 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f7ff ff29 	bl	80014e4 <__NVIC_SetPriorityGrouping>
}
 8001692:	bf00      	nop
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}

0800169a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800169a:	b580      	push	{r7, lr}
 800169c:	b086      	sub	sp, #24
 800169e:	af00      	add	r7, sp, #0
 80016a0:	4603      	mov	r3, r0
 80016a2:	60b9      	str	r1, [r7, #8]
 80016a4:	607a      	str	r2, [r7, #4]
 80016a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016a8:	2300      	movs	r3, #0
 80016aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016ac:	f7ff ff3e 	bl	800152c <__NVIC_GetPriorityGrouping>
 80016b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	68b9      	ldr	r1, [r7, #8]
 80016b6:	6978      	ldr	r0, [r7, #20]
 80016b8:	f7ff ff8e 	bl	80015d8 <NVIC_EncodePriority>
 80016bc:	4602      	mov	r2, r0
 80016be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016c2:	4611      	mov	r1, r2
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7ff ff5d 	bl	8001584 <__NVIC_SetPriority>
}
 80016ca:	bf00      	nop
 80016cc:	3718      	adds	r7, #24
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016d2:	b580      	push	{r7, lr}
 80016d4:	b082      	sub	sp, #8
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	4603      	mov	r3, r0
 80016da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7ff ff31 	bl	8001548 <__NVIC_EnableIRQ>
}
 80016e6:	bf00      	nop
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}

080016ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016ee:	b580      	push	{r7, lr}
 80016f0:	b082      	sub	sp, #8
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f7ff ffa2 	bl	8001640 <SysTick_Config>
 80016fc:	4603      	mov	r3, r0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
	...

08001708 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b086      	sub	sp, #24
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001710:	2300      	movs	r3, #0
 8001712:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001714:	f7ff feb6 	bl	8001484 <HAL_GetTick>
 8001718:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d101      	bne.n	8001724 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	e099      	b.n	8001858 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2202      	movs	r2, #2
 8001728:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2200      	movs	r2, #0
 8001730:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f022 0201 	bic.w	r2, r2, #1
 8001742:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001744:	e00f      	b.n	8001766 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001746:	f7ff fe9d 	bl	8001484 <HAL_GetTick>
 800174a:	4602      	mov	r2, r0
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	1ad3      	subs	r3, r2, r3
 8001750:	2b05      	cmp	r3, #5
 8001752:	d908      	bls.n	8001766 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2220      	movs	r2, #32
 8001758:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2203      	movs	r2, #3
 800175e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001762:	2303      	movs	r3, #3
 8001764:	e078      	b.n	8001858 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 0301 	and.w	r3, r3, #1
 8001770:	2b00      	cmp	r3, #0
 8001772:	d1e8      	bne.n	8001746 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800177c:	697a      	ldr	r2, [r7, #20]
 800177e:	4b38      	ldr	r3, [pc, #224]	@ (8001860 <HAL_DMA_Init+0x158>)
 8001780:	4013      	ands	r3, r2
 8001782:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	685a      	ldr	r2, [r3, #4]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001792:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	691b      	ldr	r3, [r3, #16]
 8001798:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800179e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	699b      	ldr	r3, [r3, #24]
 80017a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6a1b      	ldr	r3, [r3, #32]
 80017b0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017b2:	697a      	ldr	r2, [r7, #20]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017bc:	2b04      	cmp	r3, #4
 80017be:	d107      	bne.n	80017d0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017c8:	4313      	orrs	r3, r2
 80017ca:	697a      	ldr	r2, [r7, #20]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	697a      	ldr	r2, [r7, #20]
 80017d6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	695b      	ldr	r3, [r3, #20]
 80017de:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	f023 0307 	bic.w	r3, r3, #7
 80017e6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017ec:	697a      	ldr	r2, [r7, #20]
 80017ee:	4313      	orrs	r3, r2
 80017f0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017f6:	2b04      	cmp	r3, #4
 80017f8:	d117      	bne.n	800182a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017fe:	697a      	ldr	r2, [r7, #20]
 8001800:	4313      	orrs	r3, r2
 8001802:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001808:	2b00      	cmp	r3, #0
 800180a:	d00e      	beq.n	800182a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	f000 fa7b 	bl	8001d08 <DMA_CheckFifoParam>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d008      	beq.n	800182a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2240      	movs	r2, #64	@ 0x40
 800181c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2201      	movs	r2, #1
 8001822:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001826:	2301      	movs	r3, #1
 8001828:	e016      	b.n	8001858 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	697a      	ldr	r2, [r7, #20]
 8001830:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f000 fa32 	bl	8001c9c <DMA_CalcBaseAndBitshift>
 8001838:	4603      	mov	r3, r0
 800183a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001840:	223f      	movs	r2, #63	@ 0x3f
 8001842:	409a      	lsls	r2, r3
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2200      	movs	r2, #0
 800184c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2201      	movs	r2, #1
 8001852:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001856:	2300      	movs	r3, #0
}
 8001858:	4618      	mov	r0, r3
 800185a:	3718      	adds	r7, #24
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	f010803f 	.word	0xf010803f

08001864 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001870:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001872:	f7ff fe07 	bl	8001484 <HAL_GetTick>
 8001876:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800187e:	b2db      	uxtb	r3, r3
 8001880:	2b02      	cmp	r3, #2
 8001882:	d008      	beq.n	8001896 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2280      	movs	r2, #128	@ 0x80
 8001888:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2200      	movs	r2, #0
 800188e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e052      	b.n	800193c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f022 0216 	bic.w	r2, r2, #22
 80018a4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	695a      	ldr	r2, [r3, #20]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80018b4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d103      	bne.n	80018c6 <HAL_DMA_Abort+0x62>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d007      	beq.n	80018d6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f022 0208 	bic.w	r2, r2, #8
 80018d4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f022 0201 	bic.w	r2, r2, #1
 80018e4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018e6:	e013      	b.n	8001910 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80018e8:	f7ff fdcc 	bl	8001484 <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	2b05      	cmp	r3, #5
 80018f4:	d90c      	bls.n	8001910 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2220      	movs	r2, #32
 80018fa:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2203      	movs	r2, #3
 8001900:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2200      	movs	r2, #0
 8001908:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800190c:	2303      	movs	r3, #3
 800190e:	e015      	b.n	800193c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0301 	and.w	r3, r3, #1
 800191a:	2b00      	cmp	r3, #0
 800191c:	d1e4      	bne.n	80018e8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001922:	223f      	movs	r2, #63	@ 0x3f
 8001924:	409a      	lsls	r2, r3
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2201      	movs	r2, #1
 800192e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2200      	movs	r2, #0
 8001936:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800193a:	2300      	movs	r3, #0
}
 800193c:	4618      	mov	r0, r3
 800193e:	3710      	adds	r7, #16
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}

08001944 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001952:	b2db      	uxtb	r3, r3
 8001954:	2b02      	cmp	r3, #2
 8001956:	d004      	beq.n	8001962 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2280      	movs	r2, #128	@ 0x80
 800195c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e00c      	b.n	800197c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2205      	movs	r2, #5
 8001966:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f022 0201 	bic.w	r2, r2, #1
 8001978:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800197a:	2300      	movs	r3, #0
}
 800197c:	4618      	mov	r0, r3
 800197e:	370c      	adds	r7, #12
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr

08001988 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b086      	sub	sp, #24
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001990:	2300      	movs	r3, #0
 8001992:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001994:	4b8e      	ldr	r3, [pc, #568]	@ (8001bd0 <HAL_DMA_IRQHandler+0x248>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a8e      	ldr	r2, [pc, #568]	@ (8001bd4 <HAL_DMA_IRQHandler+0x24c>)
 800199a:	fba2 2303 	umull	r2, r3, r2, r3
 800199e:	0a9b      	lsrs	r3, r3, #10
 80019a0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019a6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019b2:	2208      	movs	r2, #8
 80019b4:	409a      	lsls	r2, r3
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	4013      	ands	r3, r2
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d01a      	beq.n	80019f4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 0304 	and.w	r3, r3, #4
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d013      	beq.n	80019f4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f022 0204 	bic.w	r2, r2, #4
 80019da:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019e0:	2208      	movs	r2, #8
 80019e2:	409a      	lsls	r2, r3
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019ec:	f043 0201 	orr.w	r2, r3, #1
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019f8:	2201      	movs	r2, #1
 80019fa:	409a      	lsls	r2, r3
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	4013      	ands	r3, r2
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d012      	beq.n	8001a2a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	695b      	ldr	r3, [r3, #20]
 8001a0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d00b      	beq.n	8001a2a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a16:	2201      	movs	r2, #1
 8001a18:	409a      	lsls	r2, r3
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a22:	f043 0202 	orr.w	r2, r3, #2
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a2e:	2204      	movs	r2, #4
 8001a30:	409a      	lsls	r2, r3
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	4013      	ands	r3, r2
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d012      	beq.n	8001a60 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 0302 	and.w	r3, r3, #2
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d00b      	beq.n	8001a60 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a4c:	2204      	movs	r2, #4
 8001a4e:	409a      	lsls	r2, r3
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a58:	f043 0204 	orr.w	r2, r3, #4
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a64:	2210      	movs	r2, #16
 8001a66:	409a      	lsls	r2, r3
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d043      	beq.n	8001af8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0308 	and.w	r3, r3, #8
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d03c      	beq.n	8001af8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a82:	2210      	movs	r2, #16
 8001a84:	409a      	lsls	r2, r3
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d018      	beq.n	8001aca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d108      	bne.n	8001ab8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d024      	beq.n	8001af8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	4798      	blx	r3
 8001ab6:	e01f      	b.n	8001af8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d01b      	beq.n	8001af8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	4798      	blx	r3
 8001ac8:	e016      	b.n	8001af8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d107      	bne.n	8001ae8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f022 0208 	bic.w	r2, r2, #8
 8001ae6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d003      	beq.n	8001af8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001afc:	2220      	movs	r2, #32
 8001afe:	409a      	lsls	r2, r3
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	4013      	ands	r3, r2
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	f000 808f 	beq.w	8001c28 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 0310 	and.w	r3, r3, #16
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	f000 8087 	beq.w	8001c28 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b1e:	2220      	movs	r2, #32
 8001b20:	409a      	lsls	r2, r3
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	2b05      	cmp	r3, #5
 8001b30:	d136      	bne.n	8001ba0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f022 0216 	bic.w	r2, r2, #22
 8001b40:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	695a      	ldr	r2, [r3, #20]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001b50:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d103      	bne.n	8001b62 <HAL_DMA_IRQHandler+0x1da>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d007      	beq.n	8001b72 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f022 0208 	bic.w	r2, r2, #8
 8001b70:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b76:	223f      	movs	r2, #63	@ 0x3f
 8001b78:	409a      	lsls	r2, r3
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2201      	movs	r2, #1
 8001b82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d07e      	beq.n	8001c94 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	4798      	blx	r3
        }
        return;
 8001b9e:	e079      	b.n	8001c94 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d01d      	beq.n	8001bea <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d10d      	bne.n	8001bd8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d031      	beq.n	8001c28 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	4798      	blx	r3
 8001bcc:	e02c      	b.n	8001c28 <HAL_DMA_IRQHandler+0x2a0>
 8001bce:	bf00      	nop
 8001bd0:	20000000 	.word	0x20000000
 8001bd4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d023      	beq.n	8001c28 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	4798      	blx	r3
 8001be8:	e01e      	b.n	8001c28 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d10f      	bne.n	8001c18 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f022 0210 	bic.w	r2, r2, #16
 8001c06:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2200      	movs	r2, #0
 8001c14:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d003      	beq.n	8001c28 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d032      	beq.n	8001c96 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c34:	f003 0301 	and.w	r3, r3, #1
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d022      	beq.n	8001c82 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2205      	movs	r2, #5
 8001c40:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f022 0201 	bic.w	r2, r2, #1
 8001c52:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	3301      	adds	r3, #1
 8001c58:	60bb      	str	r3, [r7, #8]
 8001c5a:	697a      	ldr	r2, [r7, #20]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d307      	bcc.n	8001c70 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0301 	and.w	r3, r3, #1
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d1f2      	bne.n	8001c54 <HAL_DMA_IRQHandler+0x2cc>
 8001c6e:	e000      	b.n	8001c72 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001c70:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2201      	movs	r2, #1
 8001c76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d005      	beq.n	8001c96 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	4798      	blx	r3
 8001c92:	e000      	b.n	8001c96 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001c94:	bf00      	nop
    }
  }
}
 8001c96:	3718      	adds	r7, #24
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}

08001c9c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b085      	sub	sp, #20
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	3b10      	subs	r3, #16
 8001cac:	4a14      	ldr	r2, [pc, #80]	@ (8001d00 <DMA_CalcBaseAndBitshift+0x64>)
 8001cae:	fba2 2303 	umull	r2, r3, r2, r3
 8001cb2:	091b      	lsrs	r3, r3, #4
 8001cb4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001cb6:	4a13      	ldr	r2, [pc, #76]	@ (8001d04 <DMA_CalcBaseAndBitshift+0x68>)
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	4413      	add	r3, r2
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	2b03      	cmp	r3, #3
 8001cc8:	d909      	bls.n	8001cde <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001cd2:	f023 0303 	bic.w	r3, r3, #3
 8001cd6:	1d1a      	adds	r2, r3, #4
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	659a      	str	r2, [r3, #88]	@ 0x58
 8001cdc:	e007      	b.n	8001cee <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001ce6:	f023 0303 	bic.w	r3, r3, #3
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3714      	adds	r7, #20
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	aaaaaaab 	.word	0xaaaaaaab
 8001d04:	08004848 	.word	0x08004848

08001d08 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b085      	sub	sp, #20
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d10:	2300      	movs	r3, #0
 8001d12:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d18:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	699b      	ldr	r3, [r3, #24]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d11f      	bne.n	8001d62 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	2b03      	cmp	r3, #3
 8001d26:	d856      	bhi.n	8001dd6 <DMA_CheckFifoParam+0xce>
 8001d28:	a201      	add	r2, pc, #4	@ (adr r2, 8001d30 <DMA_CheckFifoParam+0x28>)
 8001d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d2e:	bf00      	nop
 8001d30:	08001d41 	.word	0x08001d41
 8001d34:	08001d53 	.word	0x08001d53
 8001d38:	08001d41 	.word	0x08001d41
 8001d3c:	08001dd7 	.word	0x08001dd7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d44:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d046      	beq.n	8001dda <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d50:	e043      	b.n	8001dda <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d56:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001d5a:	d140      	bne.n	8001dde <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d60:	e03d      	b.n	8001dde <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	699b      	ldr	r3, [r3, #24]
 8001d66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001d6a:	d121      	bne.n	8001db0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	2b03      	cmp	r3, #3
 8001d70:	d837      	bhi.n	8001de2 <DMA_CheckFifoParam+0xda>
 8001d72:	a201      	add	r2, pc, #4	@ (adr r2, 8001d78 <DMA_CheckFifoParam+0x70>)
 8001d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d78:	08001d89 	.word	0x08001d89
 8001d7c:	08001d8f 	.word	0x08001d8f
 8001d80:	08001d89 	.word	0x08001d89
 8001d84:	08001da1 	.word	0x08001da1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	73fb      	strb	r3, [r7, #15]
      break;
 8001d8c:	e030      	b.n	8001df0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d92:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d025      	beq.n	8001de6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d9e:	e022      	b.n	8001de6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001da4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001da8:	d11f      	bne.n	8001dea <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001dae:	e01c      	b.n	8001dea <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d903      	bls.n	8001dbe <DMA_CheckFifoParam+0xb6>
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	2b03      	cmp	r3, #3
 8001dba:	d003      	beq.n	8001dc4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001dbc:	e018      	b.n	8001df0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	73fb      	strb	r3, [r7, #15]
      break;
 8001dc2:	e015      	b.n	8001df0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dc8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d00e      	beq.n	8001dee <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	73fb      	strb	r3, [r7, #15]
      break;
 8001dd4:	e00b      	b.n	8001dee <DMA_CheckFifoParam+0xe6>
      break;
 8001dd6:	bf00      	nop
 8001dd8:	e00a      	b.n	8001df0 <DMA_CheckFifoParam+0xe8>
      break;
 8001dda:	bf00      	nop
 8001ddc:	e008      	b.n	8001df0 <DMA_CheckFifoParam+0xe8>
      break;
 8001dde:	bf00      	nop
 8001de0:	e006      	b.n	8001df0 <DMA_CheckFifoParam+0xe8>
      break;
 8001de2:	bf00      	nop
 8001de4:	e004      	b.n	8001df0 <DMA_CheckFifoParam+0xe8>
      break;
 8001de6:	bf00      	nop
 8001de8:	e002      	b.n	8001df0 <DMA_CheckFifoParam+0xe8>
      break;   
 8001dea:	bf00      	nop
 8001dec:	e000      	b.n	8001df0 <DMA_CheckFifoParam+0xe8>
      break;
 8001dee:	bf00      	nop
    }
  } 
  
  return status; 
 8001df0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3714      	adds	r7, #20
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop

08001e00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b089      	sub	sp, #36	@ 0x24
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e12:	2300      	movs	r3, #0
 8001e14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e16:	2300      	movs	r3, #0
 8001e18:	61fb      	str	r3, [r7, #28]
 8001e1a:	e16b      	b.n	80020f4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	fa02 f303 	lsl.w	r3, r2, r3
 8001e24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	697a      	ldr	r2, [r7, #20]
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e30:	693a      	ldr	r2, [r7, #16]
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	f040 815a 	bne.w	80020ee <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f003 0303 	and.w	r3, r3, #3
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d005      	beq.n	8001e52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d130      	bne.n	8001eb4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	005b      	lsls	r3, r3, #1
 8001e5c:	2203      	movs	r2, #3
 8001e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e62:	43db      	mvns	r3, r3
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	4013      	ands	r3, r2
 8001e68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	68da      	ldr	r2, [r3, #12]
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	005b      	lsls	r3, r3, #1
 8001e72:	fa02 f303 	lsl.w	r3, r2, r3
 8001e76:	69ba      	ldr	r2, [r7, #24]
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	69ba      	ldr	r2, [r7, #24]
 8001e80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e88:	2201      	movs	r2, #1
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e90:	43db      	mvns	r3, r3
 8001e92:	69ba      	ldr	r2, [r7, #24]
 8001e94:	4013      	ands	r3, r2
 8001e96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	091b      	lsrs	r3, r3, #4
 8001e9e:	f003 0201 	and.w	r2, r3, #1
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea8:	69ba      	ldr	r2, [r7, #24]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	69ba      	ldr	r2, [r7, #24]
 8001eb2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f003 0303 	and.w	r3, r3, #3
 8001ebc:	2b03      	cmp	r3, #3
 8001ebe:	d017      	beq.n	8001ef0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	005b      	lsls	r3, r3, #1
 8001eca:	2203      	movs	r2, #3
 8001ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed0:	43db      	mvns	r3, r3
 8001ed2:	69ba      	ldr	r2, [r7, #24]
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	689a      	ldr	r2, [r3, #8]
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	005b      	lsls	r3, r3, #1
 8001ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee4:	69ba      	ldr	r2, [r7, #24]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	69ba      	ldr	r2, [r7, #24]
 8001eee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f003 0303 	and.w	r3, r3, #3
 8001ef8:	2b02      	cmp	r3, #2
 8001efa:	d123      	bne.n	8001f44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	08da      	lsrs	r2, r3, #3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	3208      	adds	r2, #8
 8001f04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	f003 0307 	and.w	r3, r3, #7
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	220f      	movs	r2, #15
 8001f14:	fa02 f303 	lsl.w	r3, r2, r3
 8001f18:	43db      	mvns	r3, r3
 8001f1a:	69ba      	ldr	r2, [r7, #24]
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	691a      	ldr	r2, [r3, #16]
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	f003 0307 	and.w	r3, r3, #7
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	08da      	lsrs	r2, r3, #3
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	3208      	adds	r2, #8
 8001f3e:	69b9      	ldr	r1, [r7, #24]
 8001f40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	2203      	movs	r2, #3
 8001f50:	fa02 f303 	lsl.w	r3, r2, r3
 8001f54:	43db      	mvns	r3, r3
 8001f56:	69ba      	ldr	r2, [r7, #24]
 8001f58:	4013      	ands	r3, r2
 8001f5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f003 0203 	and.w	r2, r3, #3
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	69ba      	ldr	r2, [r7, #24]
 8001f76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	f000 80b4 	beq.w	80020ee <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f86:	2300      	movs	r3, #0
 8001f88:	60fb      	str	r3, [r7, #12]
 8001f8a:	4b60      	ldr	r3, [pc, #384]	@ (800210c <HAL_GPIO_Init+0x30c>)
 8001f8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f8e:	4a5f      	ldr	r2, [pc, #380]	@ (800210c <HAL_GPIO_Init+0x30c>)
 8001f90:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f94:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f96:	4b5d      	ldr	r3, [pc, #372]	@ (800210c <HAL_GPIO_Init+0x30c>)
 8001f98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f9e:	60fb      	str	r3, [r7, #12]
 8001fa0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fa2:	4a5b      	ldr	r2, [pc, #364]	@ (8002110 <HAL_GPIO_Init+0x310>)
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	089b      	lsrs	r3, r3, #2
 8001fa8:	3302      	adds	r3, #2
 8001faa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	f003 0303 	and.w	r3, r3, #3
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	220f      	movs	r2, #15
 8001fba:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbe:	43db      	mvns	r3, r3
 8001fc0:	69ba      	ldr	r2, [r7, #24]
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a52      	ldr	r2, [pc, #328]	@ (8002114 <HAL_GPIO_Init+0x314>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d02b      	beq.n	8002026 <HAL_GPIO_Init+0x226>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4a51      	ldr	r2, [pc, #324]	@ (8002118 <HAL_GPIO_Init+0x318>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d025      	beq.n	8002022 <HAL_GPIO_Init+0x222>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a50      	ldr	r2, [pc, #320]	@ (800211c <HAL_GPIO_Init+0x31c>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d01f      	beq.n	800201e <HAL_GPIO_Init+0x21e>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a4f      	ldr	r2, [pc, #316]	@ (8002120 <HAL_GPIO_Init+0x320>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d019      	beq.n	800201a <HAL_GPIO_Init+0x21a>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a4e      	ldr	r2, [pc, #312]	@ (8002124 <HAL_GPIO_Init+0x324>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d013      	beq.n	8002016 <HAL_GPIO_Init+0x216>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4a4d      	ldr	r2, [pc, #308]	@ (8002128 <HAL_GPIO_Init+0x328>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d00d      	beq.n	8002012 <HAL_GPIO_Init+0x212>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4a4c      	ldr	r2, [pc, #304]	@ (800212c <HAL_GPIO_Init+0x32c>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d007      	beq.n	800200e <HAL_GPIO_Init+0x20e>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a4b      	ldr	r2, [pc, #300]	@ (8002130 <HAL_GPIO_Init+0x330>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d101      	bne.n	800200a <HAL_GPIO_Init+0x20a>
 8002006:	2307      	movs	r3, #7
 8002008:	e00e      	b.n	8002028 <HAL_GPIO_Init+0x228>
 800200a:	2308      	movs	r3, #8
 800200c:	e00c      	b.n	8002028 <HAL_GPIO_Init+0x228>
 800200e:	2306      	movs	r3, #6
 8002010:	e00a      	b.n	8002028 <HAL_GPIO_Init+0x228>
 8002012:	2305      	movs	r3, #5
 8002014:	e008      	b.n	8002028 <HAL_GPIO_Init+0x228>
 8002016:	2304      	movs	r3, #4
 8002018:	e006      	b.n	8002028 <HAL_GPIO_Init+0x228>
 800201a:	2303      	movs	r3, #3
 800201c:	e004      	b.n	8002028 <HAL_GPIO_Init+0x228>
 800201e:	2302      	movs	r3, #2
 8002020:	e002      	b.n	8002028 <HAL_GPIO_Init+0x228>
 8002022:	2301      	movs	r3, #1
 8002024:	e000      	b.n	8002028 <HAL_GPIO_Init+0x228>
 8002026:	2300      	movs	r3, #0
 8002028:	69fa      	ldr	r2, [r7, #28]
 800202a:	f002 0203 	and.w	r2, r2, #3
 800202e:	0092      	lsls	r2, r2, #2
 8002030:	4093      	lsls	r3, r2
 8002032:	69ba      	ldr	r2, [r7, #24]
 8002034:	4313      	orrs	r3, r2
 8002036:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002038:	4935      	ldr	r1, [pc, #212]	@ (8002110 <HAL_GPIO_Init+0x310>)
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	089b      	lsrs	r3, r3, #2
 800203e:	3302      	adds	r3, #2
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002046:	4b3b      	ldr	r3, [pc, #236]	@ (8002134 <HAL_GPIO_Init+0x334>)
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	43db      	mvns	r3, r3
 8002050:	69ba      	ldr	r2, [r7, #24]
 8002052:	4013      	ands	r3, r2
 8002054:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d003      	beq.n	800206a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	4313      	orrs	r3, r2
 8002068:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800206a:	4a32      	ldr	r2, [pc, #200]	@ (8002134 <HAL_GPIO_Init+0x334>)
 800206c:	69bb      	ldr	r3, [r7, #24]
 800206e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002070:	4b30      	ldr	r3, [pc, #192]	@ (8002134 <HAL_GPIO_Init+0x334>)
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	43db      	mvns	r3, r3
 800207a:	69ba      	ldr	r2, [r7, #24]
 800207c:	4013      	ands	r3, r2
 800207e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002088:	2b00      	cmp	r3, #0
 800208a:	d003      	beq.n	8002094 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800208c:	69ba      	ldr	r2, [r7, #24]
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	4313      	orrs	r3, r2
 8002092:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002094:	4a27      	ldr	r2, [pc, #156]	@ (8002134 <HAL_GPIO_Init+0x334>)
 8002096:	69bb      	ldr	r3, [r7, #24]
 8002098:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800209a:	4b26      	ldr	r3, [pc, #152]	@ (8002134 <HAL_GPIO_Init+0x334>)
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	43db      	mvns	r3, r3
 80020a4:	69ba      	ldr	r2, [r7, #24]
 80020a6:	4013      	ands	r3, r2
 80020a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d003      	beq.n	80020be <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80020b6:	69ba      	ldr	r2, [r7, #24]
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020be:	4a1d      	ldr	r2, [pc, #116]	@ (8002134 <HAL_GPIO_Init+0x334>)
 80020c0:	69bb      	ldr	r3, [r7, #24]
 80020c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020c4:	4b1b      	ldr	r3, [pc, #108]	@ (8002134 <HAL_GPIO_Init+0x334>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	43db      	mvns	r3, r3
 80020ce:	69ba      	ldr	r2, [r7, #24]
 80020d0:	4013      	ands	r3, r2
 80020d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d003      	beq.n	80020e8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020e8:	4a12      	ldr	r2, [pc, #72]	@ (8002134 <HAL_GPIO_Init+0x334>)
 80020ea:	69bb      	ldr	r3, [r7, #24]
 80020ec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	3301      	adds	r3, #1
 80020f2:	61fb      	str	r3, [r7, #28]
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	2b0f      	cmp	r3, #15
 80020f8:	f67f ae90 	bls.w	8001e1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80020fc:	bf00      	nop
 80020fe:	bf00      	nop
 8002100:	3724      	adds	r7, #36	@ 0x24
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr
 800210a:	bf00      	nop
 800210c:	40023800 	.word	0x40023800
 8002110:	40013800 	.word	0x40013800
 8002114:	40020000 	.word	0x40020000
 8002118:	40020400 	.word	0x40020400
 800211c:	40020800 	.word	0x40020800
 8002120:	40020c00 	.word	0x40020c00
 8002124:	40021000 	.word	0x40021000
 8002128:	40021400 	.word	0x40021400
 800212c:	40021800 	.word	0x40021800
 8002130:	40021c00 	.word	0x40021c00
 8002134:	40013c00 	.word	0x40013c00

08002138 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	460b      	mov	r3, r1
 8002142:	807b      	strh	r3, [r7, #2]
 8002144:	4613      	mov	r3, r2
 8002146:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002148:	787b      	ldrb	r3, [r7, #1]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d003      	beq.n	8002156 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800214e:	887a      	ldrh	r2, [r7, #2]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002154:	e003      	b.n	800215e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002156:	887b      	ldrh	r3, [r7, #2]
 8002158:	041a      	lsls	r2, r3, #16
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	619a      	str	r2, [r3, #24]
}
 800215e:	bf00      	nop
 8002160:	370c      	adds	r7, #12
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr

0800216a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800216a:	b480      	push	{r7}
 800216c:	b085      	sub	sp, #20
 800216e:	af00      	add	r7, sp, #0
 8002170:	6078      	str	r0, [r7, #4]
 8002172:	460b      	mov	r3, r1
 8002174:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	695b      	ldr	r3, [r3, #20]
 800217a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800217c:	887a      	ldrh	r2, [r7, #2]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	4013      	ands	r3, r2
 8002182:	041a      	lsls	r2, r3, #16
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	43d9      	mvns	r1, r3
 8002188:	887b      	ldrh	r3, [r7, #2]
 800218a:	400b      	ands	r3, r1
 800218c:	431a      	orrs	r2, r3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	619a      	str	r2, [r3, #24]
}
 8002192:	bf00      	nop
 8002194:	3714      	adds	r7, #20
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
	...

080021a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b086      	sub	sp, #24
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d101      	bne.n	80021b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e267      	b.n	8002682 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0301 	and.w	r3, r3, #1
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d075      	beq.n	80022aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80021be:	4b88      	ldr	r3, [pc, #544]	@ (80023e0 <HAL_RCC_OscConfig+0x240>)
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	f003 030c 	and.w	r3, r3, #12
 80021c6:	2b04      	cmp	r3, #4
 80021c8:	d00c      	beq.n	80021e4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021ca:	4b85      	ldr	r3, [pc, #532]	@ (80023e0 <HAL_RCC_OscConfig+0x240>)
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80021d2:	2b08      	cmp	r3, #8
 80021d4:	d112      	bne.n	80021fc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021d6:	4b82      	ldr	r3, [pc, #520]	@ (80023e0 <HAL_RCC_OscConfig+0x240>)
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021de:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80021e2:	d10b      	bne.n	80021fc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021e4:	4b7e      	ldr	r3, [pc, #504]	@ (80023e0 <HAL_RCC_OscConfig+0x240>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d05b      	beq.n	80022a8 <HAL_RCC_OscConfig+0x108>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d157      	bne.n	80022a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e242      	b.n	8002682 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002204:	d106      	bne.n	8002214 <HAL_RCC_OscConfig+0x74>
 8002206:	4b76      	ldr	r3, [pc, #472]	@ (80023e0 <HAL_RCC_OscConfig+0x240>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a75      	ldr	r2, [pc, #468]	@ (80023e0 <HAL_RCC_OscConfig+0x240>)
 800220c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002210:	6013      	str	r3, [r2, #0]
 8002212:	e01d      	b.n	8002250 <HAL_RCC_OscConfig+0xb0>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800221c:	d10c      	bne.n	8002238 <HAL_RCC_OscConfig+0x98>
 800221e:	4b70      	ldr	r3, [pc, #448]	@ (80023e0 <HAL_RCC_OscConfig+0x240>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a6f      	ldr	r2, [pc, #444]	@ (80023e0 <HAL_RCC_OscConfig+0x240>)
 8002224:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002228:	6013      	str	r3, [r2, #0]
 800222a:	4b6d      	ldr	r3, [pc, #436]	@ (80023e0 <HAL_RCC_OscConfig+0x240>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a6c      	ldr	r2, [pc, #432]	@ (80023e0 <HAL_RCC_OscConfig+0x240>)
 8002230:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002234:	6013      	str	r3, [r2, #0]
 8002236:	e00b      	b.n	8002250 <HAL_RCC_OscConfig+0xb0>
 8002238:	4b69      	ldr	r3, [pc, #420]	@ (80023e0 <HAL_RCC_OscConfig+0x240>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a68      	ldr	r2, [pc, #416]	@ (80023e0 <HAL_RCC_OscConfig+0x240>)
 800223e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002242:	6013      	str	r3, [r2, #0]
 8002244:	4b66      	ldr	r3, [pc, #408]	@ (80023e0 <HAL_RCC_OscConfig+0x240>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a65      	ldr	r2, [pc, #404]	@ (80023e0 <HAL_RCC_OscConfig+0x240>)
 800224a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800224e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d013      	beq.n	8002280 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002258:	f7ff f914 	bl	8001484 <HAL_GetTick>
 800225c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800225e:	e008      	b.n	8002272 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002260:	f7ff f910 	bl	8001484 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b64      	cmp	r3, #100	@ 0x64
 800226c:	d901      	bls.n	8002272 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e207      	b.n	8002682 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002272:	4b5b      	ldr	r3, [pc, #364]	@ (80023e0 <HAL_RCC_OscConfig+0x240>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d0f0      	beq.n	8002260 <HAL_RCC_OscConfig+0xc0>
 800227e:	e014      	b.n	80022aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002280:	f7ff f900 	bl	8001484 <HAL_GetTick>
 8002284:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002286:	e008      	b.n	800229a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002288:	f7ff f8fc 	bl	8001484 <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	2b64      	cmp	r3, #100	@ 0x64
 8002294:	d901      	bls.n	800229a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e1f3      	b.n	8002682 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800229a:	4b51      	ldr	r3, [pc, #324]	@ (80023e0 <HAL_RCC_OscConfig+0x240>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d1f0      	bne.n	8002288 <HAL_RCC_OscConfig+0xe8>
 80022a6:	e000      	b.n	80022aa <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0302 	and.w	r3, r3, #2
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d063      	beq.n	800237e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80022b6:	4b4a      	ldr	r3, [pc, #296]	@ (80023e0 <HAL_RCC_OscConfig+0x240>)
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	f003 030c 	and.w	r3, r3, #12
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d00b      	beq.n	80022da <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022c2:	4b47      	ldr	r3, [pc, #284]	@ (80023e0 <HAL_RCC_OscConfig+0x240>)
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80022ca:	2b08      	cmp	r3, #8
 80022cc:	d11c      	bne.n	8002308 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022ce:	4b44      	ldr	r3, [pc, #272]	@ (80023e0 <HAL_RCC_OscConfig+0x240>)
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d116      	bne.n	8002308 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022da:	4b41      	ldr	r3, [pc, #260]	@ (80023e0 <HAL_RCC_OscConfig+0x240>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0302 	and.w	r3, r3, #2
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d005      	beq.n	80022f2 <HAL_RCC_OscConfig+0x152>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	68db      	ldr	r3, [r3, #12]
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d001      	beq.n	80022f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e1c7      	b.n	8002682 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022f2:	4b3b      	ldr	r3, [pc, #236]	@ (80023e0 <HAL_RCC_OscConfig+0x240>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	691b      	ldr	r3, [r3, #16]
 80022fe:	00db      	lsls	r3, r3, #3
 8002300:	4937      	ldr	r1, [pc, #220]	@ (80023e0 <HAL_RCC_OscConfig+0x240>)
 8002302:	4313      	orrs	r3, r2
 8002304:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002306:	e03a      	b.n	800237e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d020      	beq.n	8002352 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002310:	4b34      	ldr	r3, [pc, #208]	@ (80023e4 <HAL_RCC_OscConfig+0x244>)
 8002312:	2201      	movs	r2, #1
 8002314:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002316:	f7ff f8b5 	bl	8001484 <HAL_GetTick>
 800231a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800231c:	e008      	b.n	8002330 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800231e:	f7ff f8b1 	bl	8001484 <HAL_GetTick>
 8002322:	4602      	mov	r2, r0
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	2b02      	cmp	r3, #2
 800232a:	d901      	bls.n	8002330 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800232c:	2303      	movs	r3, #3
 800232e:	e1a8      	b.n	8002682 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002330:	4b2b      	ldr	r3, [pc, #172]	@ (80023e0 <HAL_RCC_OscConfig+0x240>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0302 	and.w	r3, r3, #2
 8002338:	2b00      	cmp	r3, #0
 800233a:	d0f0      	beq.n	800231e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800233c:	4b28      	ldr	r3, [pc, #160]	@ (80023e0 <HAL_RCC_OscConfig+0x240>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	691b      	ldr	r3, [r3, #16]
 8002348:	00db      	lsls	r3, r3, #3
 800234a:	4925      	ldr	r1, [pc, #148]	@ (80023e0 <HAL_RCC_OscConfig+0x240>)
 800234c:	4313      	orrs	r3, r2
 800234e:	600b      	str	r3, [r1, #0]
 8002350:	e015      	b.n	800237e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002352:	4b24      	ldr	r3, [pc, #144]	@ (80023e4 <HAL_RCC_OscConfig+0x244>)
 8002354:	2200      	movs	r2, #0
 8002356:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002358:	f7ff f894 	bl	8001484 <HAL_GetTick>
 800235c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800235e:	e008      	b.n	8002372 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002360:	f7ff f890 	bl	8001484 <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	2b02      	cmp	r3, #2
 800236c:	d901      	bls.n	8002372 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	e187      	b.n	8002682 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002372:	4b1b      	ldr	r3, [pc, #108]	@ (80023e0 <HAL_RCC_OscConfig+0x240>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0302 	and.w	r3, r3, #2
 800237a:	2b00      	cmp	r3, #0
 800237c:	d1f0      	bne.n	8002360 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0308 	and.w	r3, r3, #8
 8002386:	2b00      	cmp	r3, #0
 8002388:	d036      	beq.n	80023f8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	695b      	ldr	r3, [r3, #20]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d016      	beq.n	80023c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002392:	4b15      	ldr	r3, [pc, #84]	@ (80023e8 <HAL_RCC_OscConfig+0x248>)
 8002394:	2201      	movs	r2, #1
 8002396:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002398:	f7ff f874 	bl	8001484 <HAL_GetTick>
 800239c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800239e:	e008      	b.n	80023b2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023a0:	f7ff f870 	bl	8001484 <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d901      	bls.n	80023b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e167      	b.n	8002682 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023b2:	4b0b      	ldr	r3, [pc, #44]	@ (80023e0 <HAL_RCC_OscConfig+0x240>)
 80023b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023b6:	f003 0302 	and.w	r3, r3, #2
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d0f0      	beq.n	80023a0 <HAL_RCC_OscConfig+0x200>
 80023be:	e01b      	b.n	80023f8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023c0:	4b09      	ldr	r3, [pc, #36]	@ (80023e8 <HAL_RCC_OscConfig+0x248>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023c6:	f7ff f85d 	bl	8001484 <HAL_GetTick>
 80023ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023cc:	e00e      	b.n	80023ec <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023ce:	f7ff f859 	bl	8001484 <HAL_GetTick>
 80023d2:	4602      	mov	r2, r0
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d907      	bls.n	80023ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	e150      	b.n	8002682 <HAL_RCC_OscConfig+0x4e2>
 80023e0:	40023800 	.word	0x40023800
 80023e4:	42470000 	.word	0x42470000
 80023e8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023ec:	4b88      	ldr	r3, [pc, #544]	@ (8002610 <HAL_RCC_OscConfig+0x470>)
 80023ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023f0:	f003 0302 	and.w	r3, r3, #2
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d1ea      	bne.n	80023ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0304 	and.w	r3, r3, #4
 8002400:	2b00      	cmp	r3, #0
 8002402:	f000 8097 	beq.w	8002534 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002406:	2300      	movs	r3, #0
 8002408:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800240a:	4b81      	ldr	r3, [pc, #516]	@ (8002610 <HAL_RCC_OscConfig+0x470>)
 800240c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800240e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d10f      	bne.n	8002436 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002416:	2300      	movs	r3, #0
 8002418:	60bb      	str	r3, [r7, #8]
 800241a:	4b7d      	ldr	r3, [pc, #500]	@ (8002610 <HAL_RCC_OscConfig+0x470>)
 800241c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800241e:	4a7c      	ldr	r2, [pc, #496]	@ (8002610 <HAL_RCC_OscConfig+0x470>)
 8002420:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002424:	6413      	str	r3, [r2, #64]	@ 0x40
 8002426:	4b7a      	ldr	r3, [pc, #488]	@ (8002610 <HAL_RCC_OscConfig+0x470>)
 8002428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800242a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800242e:	60bb      	str	r3, [r7, #8]
 8002430:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002432:	2301      	movs	r3, #1
 8002434:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002436:	4b77      	ldr	r3, [pc, #476]	@ (8002614 <HAL_RCC_OscConfig+0x474>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800243e:	2b00      	cmp	r3, #0
 8002440:	d118      	bne.n	8002474 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002442:	4b74      	ldr	r3, [pc, #464]	@ (8002614 <HAL_RCC_OscConfig+0x474>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a73      	ldr	r2, [pc, #460]	@ (8002614 <HAL_RCC_OscConfig+0x474>)
 8002448:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800244c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800244e:	f7ff f819 	bl	8001484 <HAL_GetTick>
 8002452:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002454:	e008      	b.n	8002468 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002456:	f7ff f815 	bl	8001484 <HAL_GetTick>
 800245a:	4602      	mov	r2, r0
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	2b02      	cmp	r3, #2
 8002462:	d901      	bls.n	8002468 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002464:	2303      	movs	r3, #3
 8002466:	e10c      	b.n	8002682 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002468:	4b6a      	ldr	r3, [pc, #424]	@ (8002614 <HAL_RCC_OscConfig+0x474>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002470:	2b00      	cmp	r3, #0
 8002472:	d0f0      	beq.n	8002456 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	2b01      	cmp	r3, #1
 800247a:	d106      	bne.n	800248a <HAL_RCC_OscConfig+0x2ea>
 800247c:	4b64      	ldr	r3, [pc, #400]	@ (8002610 <HAL_RCC_OscConfig+0x470>)
 800247e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002480:	4a63      	ldr	r2, [pc, #396]	@ (8002610 <HAL_RCC_OscConfig+0x470>)
 8002482:	f043 0301 	orr.w	r3, r3, #1
 8002486:	6713      	str	r3, [r2, #112]	@ 0x70
 8002488:	e01c      	b.n	80024c4 <HAL_RCC_OscConfig+0x324>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	2b05      	cmp	r3, #5
 8002490:	d10c      	bne.n	80024ac <HAL_RCC_OscConfig+0x30c>
 8002492:	4b5f      	ldr	r3, [pc, #380]	@ (8002610 <HAL_RCC_OscConfig+0x470>)
 8002494:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002496:	4a5e      	ldr	r2, [pc, #376]	@ (8002610 <HAL_RCC_OscConfig+0x470>)
 8002498:	f043 0304 	orr.w	r3, r3, #4
 800249c:	6713      	str	r3, [r2, #112]	@ 0x70
 800249e:	4b5c      	ldr	r3, [pc, #368]	@ (8002610 <HAL_RCC_OscConfig+0x470>)
 80024a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024a2:	4a5b      	ldr	r2, [pc, #364]	@ (8002610 <HAL_RCC_OscConfig+0x470>)
 80024a4:	f043 0301 	orr.w	r3, r3, #1
 80024a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80024aa:	e00b      	b.n	80024c4 <HAL_RCC_OscConfig+0x324>
 80024ac:	4b58      	ldr	r3, [pc, #352]	@ (8002610 <HAL_RCC_OscConfig+0x470>)
 80024ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024b0:	4a57      	ldr	r2, [pc, #348]	@ (8002610 <HAL_RCC_OscConfig+0x470>)
 80024b2:	f023 0301 	bic.w	r3, r3, #1
 80024b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80024b8:	4b55      	ldr	r3, [pc, #340]	@ (8002610 <HAL_RCC_OscConfig+0x470>)
 80024ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024bc:	4a54      	ldr	r2, [pc, #336]	@ (8002610 <HAL_RCC_OscConfig+0x470>)
 80024be:	f023 0304 	bic.w	r3, r3, #4
 80024c2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d015      	beq.n	80024f8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024cc:	f7fe ffda 	bl	8001484 <HAL_GetTick>
 80024d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024d2:	e00a      	b.n	80024ea <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024d4:	f7fe ffd6 	bl	8001484 <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d901      	bls.n	80024ea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e0cb      	b.n	8002682 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024ea:	4b49      	ldr	r3, [pc, #292]	@ (8002610 <HAL_RCC_OscConfig+0x470>)
 80024ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024ee:	f003 0302 	and.w	r3, r3, #2
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d0ee      	beq.n	80024d4 <HAL_RCC_OscConfig+0x334>
 80024f6:	e014      	b.n	8002522 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024f8:	f7fe ffc4 	bl	8001484 <HAL_GetTick>
 80024fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024fe:	e00a      	b.n	8002516 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002500:	f7fe ffc0 	bl	8001484 <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800250e:	4293      	cmp	r3, r2
 8002510:	d901      	bls.n	8002516 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e0b5      	b.n	8002682 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002516:	4b3e      	ldr	r3, [pc, #248]	@ (8002610 <HAL_RCC_OscConfig+0x470>)
 8002518:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800251a:	f003 0302 	and.w	r3, r3, #2
 800251e:	2b00      	cmp	r3, #0
 8002520:	d1ee      	bne.n	8002500 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002522:	7dfb      	ldrb	r3, [r7, #23]
 8002524:	2b01      	cmp	r3, #1
 8002526:	d105      	bne.n	8002534 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002528:	4b39      	ldr	r3, [pc, #228]	@ (8002610 <HAL_RCC_OscConfig+0x470>)
 800252a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800252c:	4a38      	ldr	r2, [pc, #224]	@ (8002610 <HAL_RCC_OscConfig+0x470>)
 800252e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002532:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	699b      	ldr	r3, [r3, #24]
 8002538:	2b00      	cmp	r3, #0
 800253a:	f000 80a1 	beq.w	8002680 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800253e:	4b34      	ldr	r3, [pc, #208]	@ (8002610 <HAL_RCC_OscConfig+0x470>)
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	f003 030c 	and.w	r3, r3, #12
 8002546:	2b08      	cmp	r3, #8
 8002548:	d05c      	beq.n	8002604 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	699b      	ldr	r3, [r3, #24]
 800254e:	2b02      	cmp	r3, #2
 8002550:	d141      	bne.n	80025d6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002552:	4b31      	ldr	r3, [pc, #196]	@ (8002618 <HAL_RCC_OscConfig+0x478>)
 8002554:	2200      	movs	r2, #0
 8002556:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002558:	f7fe ff94 	bl	8001484 <HAL_GetTick>
 800255c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800255e:	e008      	b.n	8002572 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002560:	f7fe ff90 	bl	8001484 <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	2b02      	cmp	r3, #2
 800256c:	d901      	bls.n	8002572 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e087      	b.n	8002682 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002572:	4b27      	ldr	r3, [pc, #156]	@ (8002610 <HAL_RCC_OscConfig+0x470>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d1f0      	bne.n	8002560 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	69da      	ldr	r2, [r3, #28]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6a1b      	ldr	r3, [r3, #32]
 8002586:	431a      	orrs	r2, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800258c:	019b      	lsls	r3, r3, #6
 800258e:	431a      	orrs	r2, r3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002594:	085b      	lsrs	r3, r3, #1
 8002596:	3b01      	subs	r3, #1
 8002598:	041b      	lsls	r3, r3, #16
 800259a:	431a      	orrs	r2, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025a0:	061b      	lsls	r3, r3, #24
 80025a2:	491b      	ldr	r1, [pc, #108]	@ (8002610 <HAL_RCC_OscConfig+0x470>)
 80025a4:	4313      	orrs	r3, r2
 80025a6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025a8:	4b1b      	ldr	r3, [pc, #108]	@ (8002618 <HAL_RCC_OscConfig+0x478>)
 80025aa:	2201      	movs	r2, #1
 80025ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ae:	f7fe ff69 	bl	8001484 <HAL_GetTick>
 80025b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025b4:	e008      	b.n	80025c8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025b6:	f7fe ff65 	bl	8001484 <HAL_GetTick>
 80025ba:	4602      	mov	r2, r0
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	d901      	bls.n	80025c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80025c4:	2303      	movs	r3, #3
 80025c6:	e05c      	b.n	8002682 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025c8:	4b11      	ldr	r3, [pc, #68]	@ (8002610 <HAL_RCC_OscConfig+0x470>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d0f0      	beq.n	80025b6 <HAL_RCC_OscConfig+0x416>
 80025d4:	e054      	b.n	8002680 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025d6:	4b10      	ldr	r3, [pc, #64]	@ (8002618 <HAL_RCC_OscConfig+0x478>)
 80025d8:	2200      	movs	r2, #0
 80025da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025dc:	f7fe ff52 	bl	8001484 <HAL_GetTick>
 80025e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025e2:	e008      	b.n	80025f6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025e4:	f7fe ff4e 	bl	8001484 <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d901      	bls.n	80025f6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e045      	b.n	8002682 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025f6:	4b06      	ldr	r3, [pc, #24]	@ (8002610 <HAL_RCC_OscConfig+0x470>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d1f0      	bne.n	80025e4 <HAL_RCC_OscConfig+0x444>
 8002602:	e03d      	b.n	8002680 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	699b      	ldr	r3, [r3, #24]
 8002608:	2b01      	cmp	r3, #1
 800260a:	d107      	bne.n	800261c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	e038      	b.n	8002682 <HAL_RCC_OscConfig+0x4e2>
 8002610:	40023800 	.word	0x40023800
 8002614:	40007000 	.word	0x40007000
 8002618:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800261c:	4b1b      	ldr	r3, [pc, #108]	@ (800268c <HAL_RCC_OscConfig+0x4ec>)
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	699b      	ldr	r3, [r3, #24]
 8002626:	2b01      	cmp	r3, #1
 8002628:	d028      	beq.n	800267c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002634:	429a      	cmp	r2, r3
 8002636:	d121      	bne.n	800267c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002642:	429a      	cmp	r2, r3
 8002644:	d11a      	bne.n	800267c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002646:	68fa      	ldr	r2, [r7, #12]
 8002648:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800264c:	4013      	ands	r3, r2
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002652:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002654:	4293      	cmp	r3, r2
 8002656:	d111      	bne.n	800267c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002662:	085b      	lsrs	r3, r3, #1
 8002664:	3b01      	subs	r3, #1
 8002666:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002668:	429a      	cmp	r2, r3
 800266a:	d107      	bne.n	800267c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002676:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002678:	429a      	cmp	r2, r3
 800267a:	d001      	beq.n	8002680 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e000      	b.n	8002682 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002680:	2300      	movs	r3, #0
}
 8002682:	4618      	mov	r0, r3
 8002684:	3718      	adds	r7, #24
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	40023800 	.word	0x40023800

08002690 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d101      	bne.n	80026a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e0cc      	b.n	800283e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026a4:	4b68      	ldr	r3, [pc, #416]	@ (8002848 <HAL_RCC_ClockConfig+0x1b8>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0307 	and.w	r3, r3, #7
 80026ac:	683a      	ldr	r2, [r7, #0]
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d90c      	bls.n	80026cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026b2:	4b65      	ldr	r3, [pc, #404]	@ (8002848 <HAL_RCC_ClockConfig+0x1b8>)
 80026b4:	683a      	ldr	r2, [r7, #0]
 80026b6:	b2d2      	uxtb	r2, r2
 80026b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ba:	4b63      	ldr	r3, [pc, #396]	@ (8002848 <HAL_RCC_ClockConfig+0x1b8>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0307 	and.w	r3, r3, #7
 80026c2:	683a      	ldr	r2, [r7, #0]
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d001      	beq.n	80026cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e0b8      	b.n	800283e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0302 	and.w	r3, r3, #2
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d020      	beq.n	800271a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0304 	and.w	r3, r3, #4
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d005      	beq.n	80026f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026e4:	4b59      	ldr	r3, [pc, #356]	@ (800284c <HAL_RCC_ClockConfig+0x1bc>)
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	4a58      	ldr	r2, [pc, #352]	@ (800284c <HAL_RCC_ClockConfig+0x1bc>)
 80026ea:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80026ee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0308 	and.w	r3, r3, #8
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d005      	beq.n	8002708 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026fc:	4b53      	ldr	r3, [pc, #332]	@ (800284c <HAL_RCC_ClockConfig+0x1bc>)
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	4a52      	ldr	r2, [pc, #328]	@ (800284c <HAL_RCC_ClockConfig+0x1bc>)
 8002702:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002706:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002708:	4b50      	ldr	r3, [pc, #320]	@ (800284c <HAL_RCC_ClockConfig+0x1bc>)
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	494d      	ldr	r1, [pc, #308]	@ (800284c <HAL_RCC_ClockConfig+0x1bc>)
 8002716:	4313      	orrs	r3, r2
 8002718:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0301 	and.w	r3, r3, #1
 8002722:	2b00      	cmp	r3, #0
 8002724:	d044      	beq.n	80027b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	2b01      	cmp	r3, #1
 800272c:	d107      	bne.n	800273e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800272e:	4b47      	ldr	r3, [pc, #284]	@ (800284c <HAL_RCC_ClockConfig+0x1bc>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d119      	bne.n	800276e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e07f      	b.n	800283e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	2b02      	cmp	r3, #2
 8002744:	d003      	beq.n	800274e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800274a:	2b03      	cmp	r3, #3
 800274c:	d107      	bne.n	800275e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800274e:	4b3f      	ldr	r3, [pc, #252]	@ (800284c <HAL_RCC_ClockConfig+0x1bc>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d109      	bne.n	800276e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e06f      	b.n	800283e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800275e:	4b3b      	ldr	r3, [pc, #236]	@ (800284c <HAL_RCC_ClockConfig+0x1bc>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0302 	and.w	r3, r3, #2
 8002766:	2b00      	cmp	r3, #0
 8002768:	d101      	bne.n	800276e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e067      	b.n	800283e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800276e:	4b37      	ldr	r3, [pc, #220]	@ (800284c <HAL_RCC_ClockConfig+0x1bc>)
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	f023 0203 	bic.w	r2, r3, #3
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	4934      	ldr	r1, [pc, #208]	@ (800284c <HAL_RCC_ClockConfig+0x1bc>)
 800277c:	4313      	orrs	r3, r2
 800277e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002780:	f7fe fe80 	bl	8001484 <HAL_GetTick>
 8002784:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002786:	e00a      	b.n	800279e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002788:	f7fe fe7c 	bl	8001484 <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002796:	4293      	cmp	r3, r2
 8002798:	d901      	bls.n	800279e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e04f      	b.n	800283e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800279e:	4b2b      	ldr	r3, [pc, #172]	@ (800284c <HAL_RCC_ClockConfig+0x1bc>)
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	f003 020c 	and.w	r2, r3, #12
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d1eb      	bne.n	8002788 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027b0:	4b25      	ldr	r3, [pc, #148]	@ (8002848 <HAL_RCC_ClockConfig+0x1b8>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0307 	and.w	r3, r3, #7
 80027b8:	683a      	ldr	r2, [r7, #0]
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d20c      	bcs.n	80027d8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027be:	4b22      	ldr	r3, [pc, #136]	@ (8002848 <HAL_RCC_ClockConfig+0x1b8>)
 80027c0:	683a      	ldr	r2, [r7, #0]
 80027c2:	b2d2      	uxtb	r2, r2
 80027c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027c6:	4b20      	ldr	r3, [pc, #128]	@ (8002848 <HAL_RCC_ClockConfig+0x1b8>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0307 	and.w	r3, r3, #7
 80027ce:	683a      	ldr	r2, [r7, #0]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d001      	beq.n	80027d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e032      	b.n	800283e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0304 	and.w	r3, r3, #4
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d008      	beq.n	80027f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027e4:	4b19      	ldr	r3, [pc, #100]	@ (800284c <HAL_RCC_ClockConfig+0x1bc>)
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	4916      	ldr	r1, [pc, #88]	@ (800284c <HAL_RCC_ClockConfig+0x1bc>)
 80027f2:	4313      	orrs	r3, r2
 80027f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0308 	and.w	r3, r3, #8
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d009      	beq.n	8002816 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002802:	4b12      	ldr	r3, [pc, #72]	@ (800284c <HAL_RCC_ClockConfig+0x1bc>)
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	691b      	ldr	r3, [r3, #16]
 800280e:	00db      	lsls	r3, r3, #3
 8002810:	490e      	ldr	r1, [pc, #56]	@ (800284c <HAL_RCC_ClockConfig+0x1bc>)
 8002812:	4313      	orrs	r3, r2
 8002814:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002816:	f000 f821 	bl	800285c <HAL_RCC_GetSysClockFreq>
 800281a:	4602      	mov	r2, r0
 800281c:	4b0b      	ldr	r3, [pc, #44]	@ (800284c <HAL_RCC_ClockConfig+0x1bc>)
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	091b      	lsrs	r3, r3, #4
 8002822:	f003 030f 	and.w	r3, r3, #15
 8002826:	490a      	ldr	r1, [pc, #40]	@ (8002850 <HAL_RCC_ClockConfig+0x1c0>)
 8002828:	5ccb      	ldrb	r3, [r1, r3]
 800282a:	fa22 f303 	lsr.w	r3, r2, r3
 800282e:	4a09      	ldr	r2, [pc, #36]	@ (8002854 <HAL_RCC_ClockConfig+0x1c4>)
 8002830:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002832:	4b09      	ldr	r3, [pc, #36]	@ (8002858 <HAL_RCC_ClockConfig+0x1c8>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4618      	mov	r0, r3
 8002838:	f7fe fde0 	bl	80013fc <HAL_InitTick>

  return HAL_OK;
 800283c:	2300      	movs	r3, #0
}
 800283e:	4618      	mov	r0, r3
 8002840:	3710      	adds	r7, #16
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	40023c00 	.word	0x40023c00
 800284c:	40023800 	.word	0x40023800
 8002850:	08004830 	.word	0x08004830
 8002854:	20000000 	.word	0x20000000
 8002858:	20000004 	.word	0x20000004

0800285c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800285c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002860:	b090      	sub	sp, #64	@ 0x40
 8002862:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002864:	2300      	movs	r3, #0
 8002866:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002868:	2300      	movs	r3, #0
 800286a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800286c:	2300      	movs	r3, #0
 800286e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002870:	2300      	movs	r3, #0
 8002872:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002874:	4b59      	ldr	r3, [pc, #356]	@ (80029dc <HAL_RCC_GetSysClockFreq+0x180>)
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	f003 030c 	and.w	r3, r3, #12
 800287c:	2b08      	cmp	r3, #8
 800287e:	d00d      	beq.n	800289c <HAL_RCC_GetSysClockFreq+0x40>
 8002880:	2b08      	cmp	r3, #8
 8002882:	f200 80a1 	bhi.w	80029c8 <HAL_RCC_GetSysClockFreq+0x16c>
 8002886:	2b00      	cmp	r3, #0
 8002888:	d002      	beq.n	8002890 <HAL_RCC_GetSysClockFreq+0x34>
 800288a:	2b04      	cmp	r3, #4
 800288c:	d003      	beq.n	8002896 <HAL_RCC_GetSysClockFreq+0x3a>
 800288e:	e09b      	b.n	80029c8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002890:	4b53      	ldr	r3, [pc, #332]	@ (80029e0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002892:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002894:	e09b      	b.n	80029ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002896:	4b53      	ldr	r3, [pc, #332]	@ (80029e4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002898:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800289a:	e098      	b.n	80029ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800289c:	4b4f      	ldr	r3, [pc, #316]	@ (80029dc <HAL_RCC_GetSysClockFreq+0x180>)
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80028a4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028a6:	4b4d      	ldr	r3, [pc, #308]	@ (80029dc <HAL_RCC_GetSysClockFreq+0x180>)
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d028      	beq.n	8002904 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028b2:	4b4a      	ldr	r3, [pc, #296]	@ (80029dc <HAL_RCC_GetSysClockFreq+0x180>)
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	099b      	lsrs	r3, r3, #6
 80028b8:	2200      	movs	r2, #0
 80028ba:	623b      	str	r3, [r7, #32]
 80028bc:	627a      	str	r2, [r7, #36]	@ 0x24
 80028be:	6a3b      	ldr	r3, [r7, #32]
 80028c0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80028c4:	2100      	movs	r1, #0
 80028c6:	4b47      	ldr	r3, [pc, #284]	@ (80029e4 <HAL_RCC_GetSysClockFreq+0x188>)
 80028c8:	fb03 f201 	mul.w	r2, r3, r1
 80028cc:	2300      	movs	r3, #0
 80028ce:	fb00 f303 	mul.w	r3, r0, r3
 80028d2:	4413      	add	r3, r2
 80028d4:	4a43      	ldr	r2, [pc, #268]	@ (80029e4 <HAL_RCC_GetSysClockFreq+0x188>)
 80028d6:	fba0 1202 	umull	r1, r2, r0, r2
 80028da:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80028dc:	460a      	mov	r2, r1
 80028de:	62ba      	str	r2, [r7, #40]	@ 0x28
 80028e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80028e2:	4413      	add	r3, r2
 80028e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80028e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028e8:	2200      	movs	r2, #0
 80028ea:	61bb      	str	r3, [r7, #24]
 80028ec:	61fa      	str	r2, [r7, #28]
 80028ee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028f2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80028f6:	f7fd fcc3 	bl	8000280 <__aeabi_uldivmod>
 80028fa:	4602      	mov	r2, r0
 80028fc:	460b      	mov	r3, r1
 80028fe:	4613      	mov	r3, r2
 8002900:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002902:	e053      	b.n	80029ac <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002904:	4b35      	ldr	r3, [pc, #212]	@ (80029dc <HAL_RCC_GetSysClockFreq+0x180>)
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	099b      	lsrs	r3, r3, #6
 800290a:	2200      	movs	r2, #0
 800290c:	613b      	str	r3, [r7, #16]
 800290e:	617a      	str	r2, [r7, #20]
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002916:	f04f 0b00 	mov.w	fp, #0
 800291a:	4652      	mov	r2, sl
 800291c:	465b      	mov	r3, fp
 800291e:	f04f 0000 	mov.w	r0, #0
 8002922:	f04f 0100 	mov.w	r1, #0
 8002926:	0159      	lsls	r1, r3, #5
 8002928:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800292c:	0150      	lsls	r0, r2, #5
 800292e:	4602      	mov	r2, r0
 8002930:	460b      	mov	r3, r1
 8002932:	ebb2 080a 	subs.w	r8, r2, sl
 8002936:	eb63 090b 	sbc.w	r9, r3, fp
 800293a:	f04f 0200 	mov.w	r2, #0
 800293e:	f04f 0300 	mov.w	r3, #0
 8002942:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002946:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800294a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800294e:	ebb2 0408 	subs.w	r4, r2, r8
 8002952:	eb63 0509 	sbc.w	r5, r3, r9
 8002956:	f04f 0200 	mov.w	r2, #0
 800295a:	f04f 0300 	mov.w	r3, #0
 800295e:	00eb      	lsls	r3, r5, #3
 8002960:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002964:	00e2      	lsls	r2, r4, #3
 8002966:	4614      	mov	r4, r2
 8002968:	461d      	mov	r5, r3
 800296a:	eb14 030a 	adds.w	r3, r4, sl
 800296e:	603b      	str	r3, [r7, #0]
 8002970:	eb45 030b 	adc.w	r3, r5, fp
 8002974:	607b      	str	r3, [r7, #4]
 8002976:	f04f 0200 	mov.w	r2, #0
 800297a:	f04f 0300 	mov.w	r3, #0
 800297e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002982:	4629      	mov	r1, r5
 8002984:	028b      	lsls	r3, r1, #10
 8002986:	4621      	mov	r1, r4
 8002988:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800298c:	4621      	mov	r1, r4
 800298e:	028a      	lsls	r2, r1, #10
 8002990:	4610      	mov	r0, r2
 8002992:	4619      	mov	r1, r3
 8002994:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002996:	2200      	movs	r2, #0
 8002998:	60bb      	str	r3, [r7, #8]
 800299a:	60fa      	str	r2, [r7, #12]
 800299c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80029a0:	f7fd fc6e 	bl	8000280 <__aeabi_uldivmod>
 80029a4:	4602      	mov	r2, r0
 80029a6:	460b      	mov	r3, r1
 80029a8:	4613      	mov	r3, r2
 80029aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80029ac:	4b0b      	ldr	r3, [pc, #44]	@ (80029dc <HAL_RCC_GetSysClockFreq+0x180>)
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	0c1b      	lsrs	r3, r3, #16
 80029b2:	f003 0303 	and.w	r3, r3, #3
 80029b6:	3301      	adds	r3, #1
 80029b8:	005b      	lsls	r3, r3, #1
 80029ba:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80029bc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80029be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80029c4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80029c6:	e002      	b.n	80029ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80029c8:	4b05      	ldr	r3, [pc, #20]	@ (80029e0 <HAL_RCC_GetSysClockFreq+0x184>)
 80029ca:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80029cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3740      	adds	r7, #64	@ 0x40
 80029d4:	46bd      	mov	sp, r7
 80029d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80029da:	bf00      	nop
 80029dc:	40023800 	.word	0x40023800
 80029e0:	00f42400 	.word	0x00f42400
 80029e4:	017d7840 	.word	0x017d7840

080029e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029e8:	b480      	push	{r7}
 80029ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029ec:	4b03      	ldr	r3, [pc, #12]	@ (80029fc <HAL_RCC_GetHCLKFreq+0x14>)
 80029ee:	681b      	ldr	r3, [r3, #0]
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr
 80029fa:	bf00      	nop
 80029fc:	20000000 	.word	0x20000000

08002a00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a04:	f7ff fff0 	bl	80029e8 <HAL_RCC_GetHCLKFreq>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	4b05      	ldr	r3, [pc, #20]	@ (8002a20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	0a9b      	lsrs	r3, r3, #10
 8002a10:	f003 0307 	and.w	r3, r3, #7
 8002a14:	4903      	ldr	r1, [pc, #12]	@ (8002a24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a16:	5ccb      	ldrb	r3, [r1, r3]
 8002a18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	40023800 	.word	0x40023800
 8002a24:	08004840 	.word	0x08004840

08002a28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a2c:	f7ff ffdc 	bl	80029e8 <HAL_RCC_GetHCLKFreq>
 8002a30:	4602      	mov	r2, r0
 8002a32:	4b05      	ldr	r3, [pc, #20]	@ (8002a48 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	0b5b      	lsrs	r3, r3, #13
 8002a38:	f003 0307 	and.w	r3, r3, #7
 8002a3c:	4903      	ldr	r1, [pc, #12]	@ (8002a4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a3e:	5ccb      	ldrb	r3, [r1, r3]
 8002a40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	40023800 	.word	0x40023800
 8002a4c:	08004840 	.word	0x08004840

08002a50 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d101      	bne.n	8002a62 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e07b      	b.n	8002b5a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d108      	bne.n	8002a7c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002a72:	d009      	beq.n	8002a88 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	61da      	str	r2, [r3, #28]
 8002a7a:	e005      	b.n	8002a88 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2200      	movs	r2, #0
 8002a86:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d106      	bne.n	8002aa8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f7fe fa02 	bl	8000eac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2202      	movs	r2, #2
 8002aac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002abe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002ad0:	431a      	orrs	r2, r3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ada:	431a      	orrs	r2, r3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	691b      	ldr	r3, [r3, #16]
 8002ae0:	f003 0302 	and.w	r3, r3, #2
 8002ae4:	431a      	orrs	r2, r3
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	695b      	ldr	r3, [r3, #20]
 8002aea:	f003 0301 	and.w	r3, r3, #1
 8002aee:	431a      	orrs	r2, r3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	699b      	ldr	r3, [r3, #24]
 8002af4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002af8:	431a      	orrs	r2, r3
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	69db      	ldr	r3, [r3, #28]
 8002afe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002b02:	431a      	orrs	r2, r3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6a1b      	ldr	r3, [r3, #32]
 8002b08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b0c:	ea42 0103 	orr.w	r1, r2, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b14:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	430a      	orrs	r2, r1
 8002b1e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	699b      	ldr	r3, [r3, #24]
 8002b24:	0c1b      	lsrs	r3, r3, #16
 8002b26:	f003 0104 	and.w	r1, r3, #4
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b2e:	f003 0210 	and.w	r2, r3, #16
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	430a      	orrs	r2, r1
 8002b38:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	69da      	ldr	r2, [r3, #28]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b48:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2201      	movs	r2, #1
 8002b54:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002b58:	2300      	movs	r3, #0
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3708      	adds	r7, #8
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}

08002b62 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b62:	b580      	push	{r7, lr}
 8002b64:	b082      	sub	sp, #8
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d101      	bne.n	8002b74 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e042      	b.n	8002bfa <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d106      	bne.n	8002b8e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2200      	movs	r2, #0
 8002b84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f7fe f9d7 	bl	8000f3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2224      	movs	r2, #36	@ 0x24
 8002b92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	68da      	ldr	r2, [r3, #12]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002ba4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f000 fe16 	bl	80037d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	691a      	ldr	r2, [r3, #16]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002bba:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	695a      	ldr	r2, [r3, #20]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002bca:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	68da      	ldr	r2, [r3, #12]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002bda:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2200      	movs	r2, #0
 8002be0:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2220      	movs	r2, #32
 8002be6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2220      	movs	r2, #32
 8002bee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002bf8:	2300      	movs	r3, #0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3708      	adds	r7, #8
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}

08002c02 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c02:	b580      	push	{r7, lr}
 8002c04:	b08a      	sub	sp, #40	@ 0x28
 8002c06:	af02      	add	r7, sp, #8
 8002c08:	60f8      	str	r0, [r7, #12]
 8002c0a:	60b9      	str	r1, [r7, #8]
 8002c0c:	603b      	str	r3, [r7, #0]
 8002c0e:	4613      	mov	r3, r2
 8002c10:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002c12:	2300      	movs	r3, #0
 8002c14:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	2b20      	cmp	r3, #32
 8002c20:	d175      	bne.n	8002d0e <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d002      	beq.n	8002c2e <HAL_UART_Transmit+0x2c>
 8002c28:	88fb      	ldrh	r3, [r7, #6]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d101      	bne.n	8002c32 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e06e      	b.n	8002d10 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2200      	movs	r2, #0
 8002c36:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2221      	movs	r2, #33	@ 0x21
 8002c3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c40:	f7fe fc20 	bl	8001484 <HAL_GetTick>
 8002c44:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	88fa      	ldrh	r2, [r7, #6]
 8002c4a:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	88fa      	ldrh	r2, [r7, #6]
 8002c50:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c5a:	d108      	bne.n	8002c6e <HAL_UART_Transmit+0x6c>
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	691b      	ldr	r3, [r3, #16]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d104      	bne.n	8002c6e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002c64:	2300      	movs	r3, #0
 8002c66:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	61bb      	str	r3, [r7, #24]
 8002c6c:	e003      	b.n	8002c76 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c72:	2300      	movs	r3, #0
 8002c74:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002c76:	e02e      	b.n	8002cd6 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	9300      	str	r3, [sp, #0]
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	2180      	movs	r1, #128	@ 0x80
 8002c82:	68f8      	ldr	r0, [r7, #12]
 8002c84:	f000 fbb4 	bl	80033f0 <UART_WaitOnFlagUntilTimeout>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d005      	beq.n	8002c9a <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2220      	movs	r2, #32
 8002c92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e03a      	b.n	8002d10 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d10b      	bne.n	8002cb8 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	881b      	ldrh	r3, [r3, #0]
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002cae:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	3302      	adds	r3, #2
 8002cb4:	61bb      	str	r3, [r7, #24]
 8002cb6:	e007      	b.n	8002cc8 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	781a      	ldrb	r2, [r3, #0]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	3301      	adds	r3, #1
 8002cc6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	3b01      	subs	r3, #1
 8002cd0:	b29a      	uxth	r2, r3
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d1cb      	bne.n	8002c78 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	9300      	str	r3, [sp, #0]
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	2140      	movs	r1, #64	@ 0x40
 8002cea:	68f8      	ldr	r0, [r7, #12]
 8002cec:	f000 fb80 	bl	80033f0 <UART_WaitOnFlagUntilTimeout>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d005      	beq.n	8002d02 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2220      	movs	r2, #32
 8002cfa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e006      	b.n	8002d10 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2220      	movs	r2, #32
 8002d06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	e000      	b.n	8002d10 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002d0e:	2302      	movs	r3, #2
  }
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3720      	adds	r7, #32
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}

08002d18 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b08a      	sub	sp, #40	@ 0x28
 8002d1c:	af02      	add	r7, sp, #8
 8002d1e:	60f8      	str	r0, [r7, #12]
 8002d20:	60b9      	str	r1, [r7, #8]
 8002d22:	603b      	str	r3, [r7, #0]
 8002d24:	4613      	mov	r3, r2
 8002d26:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	2b20      	cmp	r3, #32
 8002d36:	f040 8081 	bne.w	8002e3c <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d002      	beq.n	8002d46 <HAL_UART_Receive+0x2e>
 8002d40:	88fb      	ldrh	r3, [r7, #6]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d101      	bne.n	8002d4a <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e079      	b.n	8002e3e <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2222      	movs	r2, #34	@ 0x22
 8002d54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d5e:	f7fe fb91 	bl	8001484 <HAL_GetTick>
 8002d62:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	88fa      	ldrh	r2, [r7, #6]
 8002d68:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	88fa      	ldrh	r2, [r7, #6]
 8002d6e:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d78:	d108      	bne.n	8002d8c <HAL_UART_Receive+0x74>
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	691b      	ldr	r3, [r3, #16]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d104      	bne.n	8002d8c <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8002d82:	2300      	movs	r3, #0
 8002d84:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	61bb      	str	r3, [r7, #24]
 8002d8a:	e003      	b.n	8002d94 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d90:	2300      	movs	r3, #0
 8002d92:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002d94:	e047      	b.n	8002e26 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	9300      	str	r3, [sp, #0]
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	2120      	movs	r1, #32
 8002da0:	68f8      	ldr	r0, [r7, #12]
 8002da2:	f000 fb25 	bl	80033f0 <UART_WaitOnFlagUntilTimeout>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d005      	beq.n	8002db8 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2220      	movs	r2, #32
 8002db0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8002db4:	2303      	movs	r3, #3
 8002db6:	e042      	b.n	8002e3e <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d10c      	bne.n	8002dd8 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dca:	b29a      	uxth	r2, r3
 8002dcc:	69bb      	ldr	r3, [r7, #24]
 8002dce:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	3302      	adds	r3, #2
 8002dd4:	61bb      	str	r3, [r7, #24]
 8002dd6:	e01f      	b.n	8002e18 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002de0:	d007      	beq.n	8002df2 <HAL_UART_Receive+0xda>
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d10a      	bne.n	8002e00 <HAL_UART_Receive+0xe8>
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	691b      	ldr	r3, [r3, #16]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d106      	bne.n	8002e00 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	b2da      	uxtb	r2, r3
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	701a      	strb	r2, [r3, #0]
 8002dfe:	e008      	b.n	8002e12 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002e0c:	b2da      	uxtb	r2, r3
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	3301      	adds	r3, #1
 8002e16:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	3b01      	subs	r3, #1
 8002e20:	b29a      	uxth	r2, r3
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d1b2      	bne.n	8002d96 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2220      	movs	r2, #32
 8002e34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	e000      	b.n	8002e3e <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8002e3c:	2302      	movs	r3, #2
  }
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3720      	adds	r7, #32
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
	...

08002e48 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b0ba      	sub	sp, #232	@ 0xe8
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	695b      	ldr	r3, [r3, #20]
 8002e6a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002e74:	2300      	movs	r3, #0
 8002e76:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002e7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e7e:	f003 030f 	and.w	r3, r3, #15
 8002e82:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002e86:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d10f      	bne.n	8002eae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e92:	f003 0320 	and.w	r3, r3, #32
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d009      	beq.n	8002eae <HAL_UART_IRQHandler+0x66>
 8002e9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e9e:	f003 0320 	and.w	r3, r3, #32
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d003      	beq.n	8002eae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f000 fbd7 	bl	800365a <UART_Receive_IT>
      return;
 8002eac:	e273      	b.n	8003396 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002eae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	f000 80de 	beq.w	8003074 <HAL_UART_IRQHandler+0x22c>
 8002eb8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002ebc:	f003 0301 	and.w	r3, r3, #1
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d106      	bne.n	8002ed2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002ec4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ec8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	f000 80d1 	beq.w	8003074 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002ed2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ed6:	f003 0301 	and.w	r3, r3, #1
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d00b      	beq.n	8002ef6 <HAL_UART_IRQHandler+0xae>
 8002ede:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ee2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d005      	beq.n	8002ef6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eee:	f043 0201 	orr.w	r2, r3, #1
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002ef6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002efa:	f003 0304 	and.w	r3, r3, #4
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d00b      	beq.n	8002f1a <HAL_UART_IRQHandler+0xd2>
 8002f02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002f06:	f003 0301 	and.w	r3, r3, #1
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d005      	beq.n	8002f1a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f12:	f043 0202 	orr.w	r2, r3, #2
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002f1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f1e:	f003 0302 	and.w	r3, r3, #2
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d00b      	beq.n	8002f3e <HAL_UART_IRQHandler+0xf6>
 8002f26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002f2a:	f003 0301 	and.w	r3, r3, #1
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d005      	beq.n	8002f3e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f36:	f043 0204 	orr.w	r2, r3, #4
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002f3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f42:	f003 0308 	and.w	r3, r3, #8
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d011      	beq.n	8002f6e <HAL_UART_IRQHandler+0x126>
 8002f4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f4e:	f003 0320 	and.w	r3, r3, #32
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d105      	bne.n	8002f62 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002f56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002f5a:	f003 0301 	and.w	r3, r3, #1
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d005      	beq.n	8002f6e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f66:	f043 0208 	orr.w	r2, r3, #8
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	f000 820a 	beq.w	800338c <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002f78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f7c:	f003 0320 	and.w	r3, r3, #32
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d008      	beq.n	8002f96 <HAL_UART_IRQHandler+0x14e>
 8002f84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f88:	f003 0320 	and.w	r3, r3, #32
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d002      	beq.n	8002f96 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f000 fb62 	bl	800365a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	695b      	ldr	r3, [r3, #20]
 8002f9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fa0:	2b40      	cmp	r3, #64	@ 0x40
 8002fa2:	bf0c      	ite	eq
 8002fa4:	2301      	moveq	r3, #1
 8002fa6:	2300      	movne	r3, #0
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fb2:	f003 0308 	and.w	r3, r3, #8
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d103      	bne.n	8002fc2 <HAL_UART_IRQHandler+0x17a>
 8002fba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d04f      	beq.n	8003062 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f000 fa6d 	bl	80034a2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	695b      	ldr	r3, [r3, #20]
 8002fce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fd2:	2b40      	cmp	r3, #64	@ 0x40
 8002fd4:	d141      	bne.n	800305a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	3314      	adds	r3, #20
 8002fdc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fe0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002fe4:	e853 3f00 	ldrex	r3, [r3]
 8002fe8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002fec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002ff0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002ff4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	3314      	adds	r3, #20
 8002ffe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003002:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003006:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800300a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800300e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003012:	e841 2300 	strex	r3, r2, [r1]
 8003016:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800301a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d1d9      	bne.n	8002fd6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003026:	2b00      	cmp	r3, #0
 8003028:	d013      	beq.n	8003052 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800302e:	4a8a      	ldr	r2, [pc, #552]	@ (8003258 <HAL_UART_IRQHandler+0x410>)
 8003030:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003036:	4618      	mov	r0, r3
 8003038:	f7fe fc84 	bl	8001944 <HAL_DMA_Abort_IT>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d016      	beq.n	8003070 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003046:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800304c:	4610      	mov	r0, r2
 800304e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003050:	e00e      	b.n	8003070 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f000 f9b6 	bl	80033c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003058:	e00a      	b.n	8003070 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f000 f9b2 	bl	80033c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003060:	e006      	b.n	8003070 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f000 f9ae 	bl	80033c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2200      	movs	r2, #0
 800306c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800306e:	e18d      	b.n	800338c <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003070:	bf00      	nop
    return;
 8003072:	e18b      	b.n	800338c <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003078:	2b01      	cmp	r3, #1
 800307a:	f040 8167 	bne.w	800334c <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800307e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003082:	f003 0310 	and.w	r3, r3, #16
 8003086:	2b00      	cmp	r3, #0
 8003088:	f000 8160 	beq.w	800334c <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 800308c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003090:	f003 0310 	and.w	r3, r3, #16
 8003094:	2b00      	cmp	r3, #0
 8003096:	f000 8159 	beq.w	800334c <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800309a:	2300      	movs	r3, #0
 800309c:	60bb      	str	r3, [r7, #8]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	60bb      	str	r3, [r7, #8]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	60bb      	str	r3, [r7, #8]
 80030ae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	695b      	ldr	r3, [r3, #20]
 80030b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030ba:	2b40      	cmp	r3, #64	@ 0x40
 80030bc:	f040 80ce 	bne.w	800325c <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80030cc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	f000 80a9 	beq.w	8003228 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80030da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80030de:	429a      	cmp	r2, r3
 80030e0:	f080 80a2 	bcs.w	8003228 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80030ea:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030f0:	69db      	ldr	r3, [r3, #28]
 80030f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80030f6:	f000 8088 	beq.w	800320a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	330c      	adds	r3, #12
 8003100:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003104:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003108:	e853 3f00 	ldrex	r3, [r3]
 800310c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003110:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003114:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003118:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	330c      	adds	r3, #12
 8003122:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003126:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800312a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800312e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003132:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003136:	e841 2300 	strex	r3, r2, [r1]
 800313a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800313e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003142:	2b00      	cmp	r3, #0
 8003144:	d1d9      	bne.n	80030fa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	3314      	adds	r3, #20
 800314c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800314e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003150:	e853 3f00 	ldrex	r3, [r3]
 8003154:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003156:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003158:	f023 0301 	bic.w	r3, r3, #1
 800315c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	3314      	adds	r3, #20
 8003166:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800316a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800316e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003170:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003172:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003176:	e841 2300 	strex	r3, r2, [r1]
 800317a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800317c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800317e:	2b00      	cmp	r3, #0
 8003180:	d1e1      	bne.n	8003146 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	3314      	adds	r3, #20
 8003188:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800318a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800318c:	e853 3f00 	ldrex	r3, [r3]
 8003190:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003192:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003194:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003198:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	3314      	adds	r3, #20
 80031a2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80031a6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80031a8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031aa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80031ac:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80031ae:	e841 2300 	strex	r3, r2, [r1]
 80031b2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80031b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d1e3      	bne.n	8003182 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2220      	movs	r2, #32
 80031be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	330c      	adds	r3, #12
 80031ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80031d2:	e853 3f00 	ldrex	r3, [r3]
 80031d6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80031d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80031da:	f023 0310 	bic.w	r3, r3, #16
 80031de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	330c      	adds	r3, #12
 80031e8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80031ec:	65ba      	str	r2, [r7, #88]	@ 0x58
 80031ee:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031f0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80031f2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80031f4:	e841 2300 	strex	r3, r2, [r1]
 80031f8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80031fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d1e3      	bne.n	80031c8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003204:	4618      	mov	r0, r3
 8003206:	f7fe fb2d 	bl	8001864 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2202      	movs	r2, #2
 800320e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003218:	b29b      	uxth	r3, r3
 800321a:	1ad3      	subs	r3, r2, r3
 800321c:	b29b      	uxth	r3, r3
 800321e:	4619      	mov	r1, r3
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f000 f8d9 	bl	80033d8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8003226:	e0b3      	b.n	8003390 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800322c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003230:	429a      	cmp	r2, r3
 8003232:	f040 80ad 	bne.w	8003390 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800323a:	69db      	ldr	r3, [r3, #28]
 800323c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003240:	f040 80a6 	bne.w	8003390 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2202      	movs	r2, #2
 8003248:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800324e:	4619      	mov	r1, r3
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f000 f8c1 	bl	80033d8 <HAL_UARTEx_RxEventCallback>
      return;
 8003256:	e09b      	b.n	8003390 <HAL_UART_IRQHandler+0x548>
 8003258:	08003569 	.word	0x08003569
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003264:	b29b      	uxth	r3, r3
 8003266:	1ad3      	subs	r3, r2, r3
 8003268:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003270:	b29b      	uxth	r3, r3
 8003272:	2b00      	cmp	r3, #0
 8003274:	f000 808e 	beq.w	8003394 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8003278:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800327c:	2b00      	cmp	r3, #0
 800327e:	f000 8089 	beq.w	8003394 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	330c      	adds	r3, #12
 8003288:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800328a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800328c:	e853 3f00 	ldrex	r3, [r3]
 8003290:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003292:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003294:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003298:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	330c      	adds	r3, #12
 80032a2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80032a6:	647a      	str	r2, [r7, #68]	@ 0x44
 80032a8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032aa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80032ac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80032ae:	e841 2300 	strex	r3, r2, [r1]
 80032b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80032b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d1e3      	bne.n	8003282 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	3314      	adds	r3, #20
 80032c0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032c4:	e853 3f00 	ldrex	r3, [r3]
 80032c8:	623b      	str	r3, [r7, #32]
   return(result);
 80032ca:	6a3b      	ldr	r3, [r7, #32]
 80032cc:	f023 0301 	bic.w	r3, r3, #1
 80032d0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	3314      	adds	r3, #20
 80032da:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80032de:	633a      	str	r2, [r7, #48]	@ 0x30
 80032e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80032e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80032e6:	e841 2300 	strex	r3, r2, [r1]
 80032ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80032ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d1e3      	bne.n	80032ba <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2220      	movs	r2, #32
 80032f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2200      	movs	r2, #0
 80032fe:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	330c      	adds	r3, #12
 8003306:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	e853 3f00 	ldrex	r3, [r3]
 800330e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	f023 0310 	bic.w	r3, r3, #16
 8003316:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	330c      	adds	r3, #12
 8003320:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003324:	61fa      	str	r2, [r7, #28]
 8003326:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003328:	69b9      	ldr	r1, [r7, #24]
 800332a:	69fa      	ldr	r2, [r7, #28]
 800332c:	e841 2300 	strex	r3, r2, [r1]
 8003330:	617b      	str	r3, [r7, #20]
   return(result);
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d1e3      	bne.n	8003300 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2202      	movs	r2, #2
 800333c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800333e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003342:	4619      	mov	r1, r3
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	f000 f847 	bl	80033d8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800334a:	e023      	b.n	8003394 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800334c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003350:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003354:	2b00      	cmp	r3, #0
 8003356:	d009      	beq.n	800336c <HAL_UART_IRQHandler+0x524>
 8003358:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800335c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003360:	2b00      	cmp	r3, #0
 8003362:	d003      	beq.n	800336c <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	f000 f910 	bl	800358a <UART_Transmit_IT>
    return;
 800336a:	e014      	b.n	8003396 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800336c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003370:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003374:	2b00      	cmp	r3, #0
 8003376:	d00e      	beq.n	8003396 <HAL_UART_IRQHandler+0x54e>
 8003378:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800337c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003380:	2b00      	cmp	r3, #0
 8003382:	d008      	beq.n	8003396 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f000 f950 	bl	800362a <UART_EndTransmit_IT>
    return;
 800338a:	e004      	b.n	8003396 <HAL_UART_IRQHandler+0x54e>
    return;
 800338c:	bf00      	nop
 800338e:	e002      	b.n	8003396 <HAL_UART_IRQHandler+0x54e>
      return;
 8003390:	bf00      	nop
 8003392:	e000      	b.n	8003396 <HAL_UART_IRQHandler+0x54e>
      return;
 8003394:	bf00      	nop
  }
}
 8003396:	37e8      	adds	r7, #232	@ 0xe8
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}

0800339c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800339c:	b480      	push	{r7}
 800339e:	b083      	sub	sp, #12
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80033a4:	bf00      	nop
 80033a6:	370c      	adds	r7, #12
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr

080033b0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b083      	sub	sp, #12
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80033b8:	bf00      	nop
 80033ba:	370c      	adds	r7, #12
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr

080033c4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80033cc:	bf00      	nop
 80033ce:	370c      	adds	r7, #12
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr

080033d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	460b      	mov	r3, r1
 80033e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80033e4:	bf00      	nop
 80033e6:	370c      	adds	r7, #12
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr

080033f0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b086      	sub	sp, #24
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	60f8      	str	r0, [r7, #12]
 80033f8:	60b9      	str	r1, [r7, #8]
 80033fa:	603b      	str	r3, [r7, #0]
 80033fc:	4613      	mov	r3, r2
 80033fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003400:	e03b      	b.n	800347a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003402:	6a3b      	ldr	r3, [r7, #32]
 8003404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003408:	d037      	beq.n	800347a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800340a:	f7fe f83b 	bl	8001484 <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	6a3a      	ldr	r2, [r7, #32]
 8003416:	429a      	cmp	r2, r3
 8003418:	d302      	bcc.n	8003420 <UART_WaitOnFlagUntilTimeout+0x30>
 800341a:	6a3b      	ldr	r3, [r7, #32]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d101      	bne.n	8003424 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	e03a      	b.n	800349a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	68db      	ldr	r3, [r3, #12]
 800342a:	f003 0304 	and.w	r3, r3, #4
 800342e:	2b00      	cmp	r3, #0
 8003430:	d023      	beq.n	800347a <UART_WaitOnFlagUntilTimeout+0x8a>
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	2b80      	cmp	r3, #128	@ 0x80
 8003436:	d020      	beq.n	800347a <UART_WaitOnFlagUntilTimeout+0x8a>
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	2b40      	cmp	r3, #64	@ 0x40
 800343c:	d01d      	beq.n	800347a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0308 	and.w	r3, r3, #8
 8003448:	2b08      	cmp	r3, #8
 800344a:	d116      	bne.n	800347a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800344c:	2300      	movs	r3, #0
 800344e:	617b      	str	r3, [r7, #20]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	617b      	str	r3, [r7, #20]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	617b      	str	r3, [r7, #20]
 8003460:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003462:	68f8      	ldr	r0, [r7, #12]
 8003464:	f000 f81d 	bl	80034a2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2208      	movs	r2, #8
 800346c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2200      	movs	r2, #0
 8003472:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e00f      	b.n	800349a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	4013      	ands	r3, r2
 8003484:	68ba      	ldr	r2, [r7, #8]
 8003486:	429a      	cmp	r2, r3
 8003488:	bf0c      	ite	eq
 800348a:	2301      	moveq	r3, #1
 800348c:	2300      	movne	r3, #0
 800348e:	b2db      	uxtb	r3, r3
 8003490:	461a      	mov	r2, r3
 8003492:	79fb      	ldrb	r3, [r7, #7]
 8003494:	429a      	cmp	r2, r3
 8003496:	d0b4      	beq.n	8003402 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003498:	2300      	movs	r3, #0
}
 800349a:	4618      	mov	r0, r3
 800349c:	3718      	adds	r7, #24
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}

080034a2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80034a2:	b480      	push	{r7}
 80034a4:	b095      	sub	sp, #84	@ 0x54
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	330c      	adds	r3, #12
 80034b0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034b4:	e853 3f00 	ldrex	r3, [r3]
 80034b8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80034ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80034c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	330c      	adds	r3, #12
 80034c8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80034ca:	643a      	str	r2, [r7, #64]	@ 0x40
 80034cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034ce:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80034d0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80034d2:	e841 2300 	strex	r3, r2, [r1]
 80034d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80034d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d1e5      	bne.n	80034aa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	3314      	adds	r3, #20
 80034e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034e6:	6a3b      	ldr	r3, [r7, #32]
 80034e8:	e853 3f00 	ldrex	r3, [r3]
 80034ec:	61fb      	str	r3, [r7, #28]
   return(result);
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	f023 0301 	bic.w	r3, r3, #1
 80034f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	3314      	adds	r3, #20
 80034fc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80034fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003500:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003502:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003504:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003506:	e841 2300 	strex	r3, r2, [r1]
 800350a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800350c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800350e:	2b00      	cmp	r3, #0
 8003510:	d1e5      	bne.n	80034de <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003516:	2b01      	cmp	r3, #1
 8003518:	d119      	bne.n	800354e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	330c      	adds	r3, #12
 8003520:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	e853 3f00 	ldrex	r3, [r3]
 8003528:	60bb      	str	r3, [r7, #8]
   return(result);
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	f023 0310 	bic.w	r3, r3, #16
 8003530:	647b      	str	r3, [r7, #68]	@ 0x44
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	330c      	adds	r3, #12
 8003538:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800353a:	61ba      	str	r2, [r7, #24]
 800353c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800353e:	6979      	ldr	r1, [r7, #20]
 8003540:	69ba      	ldr	r2, [r7, #24]
 8003542:	e841 2300 	strex	r3, r2, [r1]
 8003546:	613b      	str	r3, [r7, #16]
   return(result);
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d1e5      	bne.n	800351a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2220      	movs	r2, #32
 8003552:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800355c:	bf00      	nop
 800355e:	3754      	adds	r7, #84	@ 0x54
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr

08003568 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b084      	sub	sp, #16
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003574:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2200      	movs	r2, #0
 800357a:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800357c:	68f8      	ldr	r0, [r7, #12]
 800357e:	f7ff ff21 	bl	80033c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003582:	bf00      	nop
 8003584:	3710      	adds	r7, #16
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}

0800358a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800358a:	b480      	push	{r7}
 800358c:	b085      	sub	sp, #20
 800358e:	af00      	add	r7, sp, #0
 8003590:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003598:	b2db      	uxtb	r3, r3
 800359a:	2b21      	cmp	r3, #33	@ 0x21
 800359c:	d13e      	bne.n	800361c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035a6:	d114      	bne.n	80035d2 <UART_Transmit_IT+0x48>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	691b      	ldr	r3, [r3, #16]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d110      	bne.n	80035d2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6a1b      	ldr	r3, [r3, #32]
 80035b4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	881b      	ldrh	r3, [r3, #0]
 80035ba:	461a      	mov	r2, r3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035c4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a1b      	ldr	r3, [r3, #32]
 80035ca:	1c9a      	adds	r2, r3, #2
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	621a      	str	r2, [r3, #32]
 80035d0:	e008      	b.n	80035e4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6a1b      	ldr	r3, [r3, #32]
 80035d6:	1c59      	adds	r1, r3, #1
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	6211      	str	r1, [r2, #32]
 80035dc:	781a      	ldrb	r2, [r3, #0]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	3b01      	subs	r3, #1
 80035ec:	b29b      	uxth	r3, r3
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	4619      	mov	r1, r3
 80035f2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d10f      	bne.n	8003618 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	68da      	ldr	r2, [r3, #12]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003606:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	68da      	ldr	r2, [r3, #12]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003616:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003618:	2300      	movs	r3, #0
 800361a:	e000      	b.n	800361e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800361c:	2302      	movs	r3, #2
  }
}
 800361e:	4618      	mov	r0, r3
 8003620:	3714      	adds	r7, #20
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr

0800362a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800362a:	b580      	push	{r7, lr}
 800362c:	b082      	sub	sp, #8
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	68da      	ldr	r2, [r3, #12]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003640:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2220      	movs	r2, #32
 8003646:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f7ff fea6 	bl	800339c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003650:	2300      	movs	r3, #0
}
 8003652:	4618      	mov	r0, r3
 8003654:	3708      	adds	r7, #8
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}

0800365a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800365a:	b580      	push	{r7, lr}
 800365c:	b08c      	sub	sp, #48	@ 0x30
 800365e:	af00      	add	r7, sp, #0
 8003660:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8003662:	2300      	movs	r3, #0
 8003664:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8003666:	2300      	movs	r3, #0
 8003668:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003670:	b2db      	uxtb	r3, r3
 8003672:	2b22      	cmp	r3, #34	@ 0x22
 8003674:	f040 80aa 	bne.w	80037cc <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003680:	d115      	bne.n	80036ae <UART_Receive_IT+0x54>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	691b      	ldr	r3, [r3, #16]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d111      	bne.n	80036ae <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800368e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	b29b      	uxth	r3, r3
 8003698:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800369c:	b29a      	uxth	r2, r3
 800369e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036a0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036a6:	1c9a      	adds	r2, r3, #2
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	629a      	str	r2, [r3, #40]	@ 0x28
 80036ac:	e024      	b.n	80036f8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036bc:	d007      	beq.n	80036ce <UART_Receive_IT+0x74>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d10a      	bne.n	80036dc <UART_Receive_IT+0x82>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	691b      	ldr	r3, [r3, #16]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d106      	bne.n	80036dc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	b2da      	uxtb	r2, r3
 80036d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036d8:	701a      	strb	r2, [r3, #0]
 80036da:	e008      	b.n	80036ee <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80036e8:	b2da      	uxtb	r2, r3
 80036ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036ec:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036f2:	1c5a      	adds	r2, r3, #1
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80036fc:	b29b      	uxth	r3, r3
 80036fe:	3b01      	subs	r3, #1
 8003700:	b29b      	uxth	r3, r3
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	4619      	mov	r1, r3
 8003706:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003708:	2b00      	cmp	r3, #0
 800370a:	d15d      	bne.n	80037c8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	68da      	ldr	r2, [r3, #12]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f022 0220 	bic.w	r2, r2, #32
 800371a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	68da      	ldr	r2, [r3, #12]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800372a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	695a      	ldr	r2, [r3, #20]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f022 0201 	bic.w	r2, r2, #1
 800373a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2220      	movs	r2, #32
 8003740:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2200      	movs	r2, #0
 8003748:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800374e:	2b01      	cmp	r3, #1
 8003750:	d135      	bne.n	80037be <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	330c      	adds	r3, #12
 800375e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	e853 3f00 	ldrex	r3, [r3]
 8003766:	613b      	str	r3, [r7, #16]
   return(result);
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	f023 0310 	bic.w	r3, r3, #16
 800376e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	330c      	adds	r3, #12
 8003776:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003778:	623a      	str	r2, [r7, #32]
 800377a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800377c:	69f9      	ldr	r1, [r7, #28]
 800377e:	6a3a      	ldr	r2, [r7, #32]
 8003780:	e841 2300 	strex	r3, r2, [r1]
 8003784:	61bb      	str	r3, [r7, #24]
   return(result);
 8003786:	69bb      	ldr	r3, [r7, #24]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d1e5      	bne.n	8003758 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0310 	and.w	r3, r3, #16
 8003796:	2b10      	cmp	r3, #16
 8003798:	d10a      	bne.n	80037b0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800379a:	2300      	movs	r3, #0
 800379c:	60fb      	str	r3, [r7, #12]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	60fb      	str	r3, [r7, #12]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	60fb      	str	r3, [r7, #12]
 80037ae:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80037b4:	4619      	mov	r1, r3
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f7ff fe0e 	bl	80033d8 <HAL_UARTEx_RxEventCallback>
 80037bc:	e002      	b.n	80037c4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f7ff fdf6 	bl	80033b0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80037c4:	2300      	movs	r3, #0
 80037c6:	e002      	b.n	80037ce <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80037c8:	2300      	movs	r3, #0
 80037ca:	e000      	b.n	80037ce <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80037cc:	2302      	movs	r3, #2
  }
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3730      	adds	r7, #48	@ 0x30
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
	...

080037d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037dc:	b0c0      	sub	sp, #256	@ 0x100
 80037de:	af00      	add	r7, sp, #0
 80037e0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	691b      	ldr	r3, [r3, #16]
 80037ec:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80037f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037f4:	68d9      	ldr	r1, [r3, #12]
 80037f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	ea40 0301 	orr.w	r3, r0, r1
 8003800:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003802:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003806:	689a      	ldr	r2, [r3, #8]
 8003808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800380c:	691b      	ldr	r3, [r3, #16]
 800380e:	431a      	orrs	r2, r3
 8003810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003814:	695b      	ldr	r3, [r3, #20]
 8003816:	431a      	orrs	r2, r3
 8003818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800381c:	69db      	ldr	r3, [r3, #28]
 800381e:	4313      	orrs	r3, r2
 8003820:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003830:	f021 010c 	bic.w	r1, r1, #12
 8003834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800383e:	430b      	orrs	r3, r1
 8003840:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003842:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	695b      	ldr	r3, [r3, #20]
 800384a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800384e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003852:	6999      	ldr	r1, [r3, #24]
 8003854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	ea40 0301 	orr.w	r3, r0, r1
 800385e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	4b8f      	ldr	r3, [pc, #572]	@ (8003aa4 <UART_SetConfig+0x2cc>)
 8003868:	429a      	cmp	r2, r3
 800386a:	d005      	beq.n	8003878 <UART_SetConfig+0xa0>
 800386c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	4b8d      	ldr	r3, [pc, #564]	@ (8003aa8 <UART_SetConfig+0x2d0>)
 8003874:	429a      	cmp	r2, r3
 8003876:	d104      	bne.n	8003882 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003878:	f7ff f8d6 	bl	8002a28 <HAL_RCC_GetPCLK2Freq>
 800387c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003880:	e003      	b.n	800388a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003882:	f7ff f8bd 	bl	8002a00 <HAL_RCC_GetPCLK1Freq>
 8003886:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800388a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800388e:	69db      	ldr	r3, [r3, #28]
 8003890:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003894:	f040 810c 	bne.w	8003ab0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003898:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800389c:	2200      	movs	r2, #0
 800389e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80038a2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80038a6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80038aa:	4622      	mov	r2, r4
 80038ac:	462b      	mov	r3, r5
 80038ae:	1891      	adds	r1, r2, r2
 80038b0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80038b2:	415b      	adcs	r3, r3
 80038b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80038b6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80038ba:	4621      	mov	r1, r4
 80038bc:	eb12 0801 	adds.w	r8, r2, r1
 80038c0:	4629      	mov	r1, r5
 80038c2:	eb43 0901 	adc.w	r9, r3, r1
 80038c6:	f04f 0200 	mov.w	r2, #0
 80038ca:	f04f 0300 	mov.w	r3, #0
 80038ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80038d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80038d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80038da:	4690      	mov	r8, r2
 80038dc:	4699      	mov	r9, r3
 80038de:	4623      	mov	r3, r4
 80038e0:	eb18 0303 	adds.w	r3, r8, r3
 80038e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80038e8:	462b      	mov	r3, r5
 80038ea:	eb49 0303 	adc.w	r3, r9, r3
 80038ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80038f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	2200      	movs	r2, #0
 80038fa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80038fe:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003902:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003906:	460b      	mov	r3, r1
 8003908:	18db      	adds	r3, r3, r3
 800390a:	653b      	str	r3, [r7, #80]	@ 0x50
 800390c:	4613      	mov	r3, r2
 800390e:	eb42 0303 	adc.w	r3, r2, r3
 8003912:	657b      	str	r3, [r7, #84]	@ 0x54
 8003914:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003918:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800391c:	f7fc fcb0 	bl	8000280 <__aeabi_uldivmod>
 8003920:	4602      	mov	r2, r0
 8003922:	460b      	mov	r3, r1
 8003924:	4b61      	ldr	r3, [pc, #388]	@ (8003aac <UART_SetConfig+0x2d4>)
 8003926:	fba3 2302 	umull	r2, r3, r3, r2
 800392a:	095b      	lsrs	r3, r3, #5
 800392c:	011c      	lsls	r4, r3, #4
 800392e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003932:	2200      	movs	r2, #0
 8003934:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003938:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800393c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003940:	4642      	mov	r2, r8
 8003942:	464b      	mov	r3, r9
 8003944:	1891      	adds	r1, r2, r2
 8003946:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003948:	415b      	adcs	r3, r3
 800394a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800394c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003950:	4641      	mov	r1, r8
 8003952:	eb12 0a01 	adds.w	sl, r2, r1
 8003956:	4649      	mov	r1, r9
 8003958:	eb43 0b01 	adc.w	fp, r3, r1
 800395c:	f04f 0200 	mov.w	r2, #0
 8003960:	f04f 0300 	mov.w	r3, #0
 8003964:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003968:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800396c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003970:	4692      	mov	sl, r2
 8003972:	469b      	mov	fp, r3
 8003974:	4643      	mov	r3, r8
 8003976:	eb1a 0303 	adds.w	r3, sl, r3
 800397a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800397e:	464b      	mov	r3, r9
 8003980:	eb4b 0303 	adc.w	r3, fp, r3
 8003984:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003988:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	2200      	movs	r2, #0
 8003990:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003994:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003998:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800399c:	460b      	mov	r3, r1
 800399e:	18db      	adds	r3, r3, r3
 80039a0:	643b      	str	r3, [r7, #64]	@ 0x40
 80039a2:	4613      	mov	r3, r2
 80039a4:	eb42 0303 	adc.w	r3, r2, r3
 80039a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80039aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80039ae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80039b2:	f7fc fc65 	bl	8000280 <__aeabi_uldivmod>
 80039b6:	4602      	mov	r2, r0
 80039b8:	460b      	mov	r3, r1
 80039ba:	4611      	mov	r1, r2
 80039bc:	4b3b      	ldr	r3, [pc, #236]	@ (8003aac <UART_SetConfig+0x2d4>)
 80039be:	fba3 2301 	umull	r2, r3, r3, r1
 80039c2:	095b      	lsrs	r3, r3, #5
 80039c4:	2264      	movs	r2, #100	@ 0x64
 80039c6:	fb02 f303 	mul.w	r3, r2, r3
 80039ca:	1acb      	subs	r3, r1, r3
 80039cc:	00db      	lsls	r3, r3, #3
 80039ce:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80039d2:	4b36      	ldr	r3, [pc, #216]	@ (8003aac <UART_SetConfig+0x2d4>)
 80039d4:	fba3 2302 	umull	r2, r3, r3, r2
 80039d8:	095b      	lsrs	r3, r3, #5
 80039da:	005b      	lsls	r3, r3, #1
 80039dc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80039e0:	441c      	add	r4, r3
 80039e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80039e6:	2200      	movs	r2, #0
 80039e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80039ec:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80039f0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80039f4:	4642      	mov	r2, r8
 80039f6:	464b      	mov	r3, r9
 80039f8:	1891      	adds	r1, r2, r2
 80039fa:	63b9      	str	r1, [r7, #56]	@ 0x38
 80039fc:	415b      	adcs	r3, r3
 80039fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a00:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003a04:	4641      	mov	r1, r8
 8003a06:	1851      	adds	r1, r2, r1
 8003a08:	6339      	str	r1, [r7, #48]	@ 0x30
 8003a0a:	4649      	mov	r1, r9
 8003a0c:	414b      	adcs	r3, r1
 8003a0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a10:	f04f 0200 	mov.w	r2, #0
 8003a14:	f04f 0300 	mov.w	r3, #0
 8003a18:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003a1c:	4659      	mov	r1, fp
 8003a1e:	00cb      	lsls	r3, r1, #3
 8003a20:	4651      	mov	r1, sl
 8003a22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a26:	4651      	mov	r1, sl
 8003a28:	00ca      	lsls	r2, r1, #3
 8003a2a:	4610      	mov	r0, r2
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	4603      	mov	r3, r0
 8003a30:	4642      	mov	r2, r8
 8003a32:	189b      	adds	r3, r3, r2
 8003a34:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003a38:	464b      	mov	r3, r9
 8003a3a:	460a      	mov	r2, r1
 8003a3c:	eb42 0303 	adc.w	r3, r2, r3
 8003a40:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003a50:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003a54:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003a58:	460b      	mov	r3, r1
 8003a5a:	18db      	adds	r3, r3, r3
 8003a5c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a5e:	4613      	mov	r3, r2
 8003a60:	eb42 0303 	adc.w	r3, r2, r3
 8003a64:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a66:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003a6a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003a6e:	f7fc fc07 	bl	8000280 <__aeabi_uldivmod>
 8003a72:	4602      	mov	r2, r0
 8003a74:	460b      	mov	r3, r1
 8003a76:	4b0d      	ldr	r3, [pc, #52]	@ (8003aac <UART_SetConfig+0x2d4>)
 8003a78:	fba3 1302 	umull	r1, r3, r3, r2
 8003a7c:	095b      	lsrs	r3, r3, #5
 8003a7e:	2164      	movs	r1, #100	@ 0x64
 8003a80:	fb01 f303 	mul.w	r3, r1, r3
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	00db      	lsls	r3, r3, #3
 8003a88:	3332      	adds	r3, #50	@ 0x32
 8003a8a:	4a08      	ldr	r2, [pc, #32]	@ (8003aac <UART_SetConfig+0x2d4>)
 8003a8c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a90:	095b      	lsrs	r3, r3, #5
 8003a92:	f003 0207 	and.w	r2, r3, #7
 8003a96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4422      	add	r2, r4
 8003a9e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003aa0:	e106      	b.n	8003cb0 <UART_SetConfig+0x4d8>
 8003aa2:	bf00      	nop
 8003aa4:	40011000 	.word	0x40011000
 8003aa8:	40011400 	.word	0x40011400
 8003aac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ab0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003aba:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003abe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003ac2:	4642      	mov	r2, r8
 8003ac4:	464b      	mov	r3, r9
 8003ac6:	1891      	adds	r1, r2, r2
 8003ac8:	6239      	str	r1, [r7, #32]
 8003aca:	415b      	adcs	r3, r3
 8003acc:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ace:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003ad2:	4641      	mov	r1, r8
 8003ad4:	1854      	adds	r4, r2, r1
 8003ad6:	4649      	mov	r1, r9
 8003ad8:	eb43 0501 	adc.w	r5, r3, r1
 8003adc:	f04f 0200 	mov.w	r2, #0
 8003ae0:	f04f 0300 	mov.w	r3, #0
 8003ae4:	00eb      	lsls	r3, r5, #3
 8003ae6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003aea:	00e2      	lsls	r2, r4, #3
 8003aec:	4614      	mov	r4, r2
 8003aee:	461d      	mov	r5, r3
 8003af0:	4643      	mov	r3, r8
 8003af2:	18e3      	adds	r3, r4, r3
 8003af4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003af8:	464b      	mov	r3, r9
 8003afa:	eb45 0303 	adc.w	r3, r5, r3
 8003afe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003b02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003b0e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003b12:	f04f 0200 	mov.w	r2, #0
 8003b16:	f04f 0300 	mov.w	r3, #0
 8003b1a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003b1e:	4629      	mov	r1, r5
 8003b20:	008b      	lsls	r3, r1, #2
 8003b22:	4621      	mov	r1, r4
 8003b24:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b28:	4621      	mov	r1, r4
 8003b2a:	008a      	lsls	r2, r1, #2
 8003b2c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003b30:	f7fc fba6 	bl	8000280 <__aeabi_uldivmod>
 8003b34:	4602      	mov	r2, r0
 8003b36:	460b      	mov	r3, r1
 8003b38:	4b60      	ldr	r3, [pc, #384]	@ (8003cbc <UART_SetConfig+0x4e4>)
 8003b3a:	fba3 2302 	umull	r2, r3, r3, r2
 8003b3e:	095b      	lsrs	r3, r3, #5
 8003b40:	011c      	lsls	r4, r3, #4
 8003b42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b46:	2200      	movs	r2, #0
 8003b48:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003b4c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003b50:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003b54:	4642      	mov	r2, r8
 8003b56:	464b      	mov	r3, r9
 8003b58:	1891      	adds	r1, r2, r2
 8003b5a:	61b9      	str	r1, [r7, #24]
 8003b5c:	415b      	adcs	r3, r3
 8003b5e:	61fb      	str	r3, [r7, #28]
 8003b60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b64:	4641      	mov	r1, r8
 8003b66:	1851      	adds	r1, r2, r1
 8003b68:	6139      	str	r1, [r7, #16]
 8003b6a:	4649      	mov	r1, r9
 8003b6c:	414b      	adcs	r3, r1
 8003b6e:	617b      	str	r3, [r7, #20]
 8003b70:	f04f 0200 	mov.w	r2, #0
 8003b74:	f04f 0300 	mov.w	r3, #0
 8003b78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b7c:	4659      	mov	r1, fp
 8003b7e:	00cb      	lsls	r3, r1, #3
 8003b80:	4651      	mov	r1, sl
 8003b82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b86:	4651      	mov	r1, sl
 8003b88:	00ca      	lsls	r2, r1, #3
 8003b8a:	4610      	mov	r0, r2
 8003b8c:	4619      	mov	r1, r3
 8003b8e:	4603      	mov	r3, r0
 8003b90:	4642      	mov	r2, r8
 8003b92:	189b      	adds	r3, r3, r2
 8003b94:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003b98:	464b      	mov	r3, r9
 8003b9a:	460a      	mov	r2, r1
 8003b9c:	eb42 0303 	adc.w	r3, r2, r3
 8003ba0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	2200      	movs	r2, #0
 8003bac:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003bae:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003bb0:	f04f 0200 	mov.w	r2, #0
 8003bb4:	f04f 0300 	mov.w	r3, #0
 8003bb8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003bbc:	4649      	mov	r1, r9
 8003bbe:	008b      	lsls	r3, r1, #2
 8003bc0:	4641      	mov	r1, r8
 8003bc2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003bc6:	4641      	mov	r1, r8
 8003bc8:	008a      	lsls	r2, r1, #2
 8003bca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003bce:	f7fc fb57 	bl	8000280 <__aeabi_uldivmod>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	460b      	mov	r3, r1
 8003bd6:	4611      	mov	r1, r2
 8003bd8:	4b38      	ldr	r3, [pc, #224]	@ (8003cbc <UART_SetConfig+0x4e4>)
 8003bda:	fba3 2301 	umull	r2, r3, r3, r1
 8003bde:	095b      	lsrs	r3, r3, #5
 8003be0:	2264      	movs	r2, #100	@ 0x64
 8003be2:	fb02 f303 	mul.w	r3, r2, r3
 8003be6:	1acb      	subs	r3, r1, r3
 8003be8:	011b      	lsls	r3, r3, #4
 8003bea:	3332      	adds	r3, #50	@ 0x32
 8003bec:	4a33      	ldr	r2, [pc, #204]	@ (8003cbc <UART_SetConfig+0x4e4>)
 8003bee:	fba2 2303 	umull	r2, r3, r2, r3
 8003bf2:	095b      	lsrs	r3, r3, #5
 8003bf4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003bf8:	441c      	add	r4, r3
 8003bfa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003bfe:	2200      	movs	r2, #0
 8003c00:	673b      	str	r3, [r7, #112]	@ 0x70
 8003c02:	677a      	str	r2, [r7, #116]	@ 0x74
 8003c04:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003c08:	4642      	mov	r2, r8
 8003c0a:	464b      	mov	r3, r9
 8003c0c:	1891      	adds	r1, r2, r2
 8003c0e:	60b9      	str	r1, [r7, #8]
 8003c10:	415b      	adcs	r3, r3
 8003c12:	60fb      	str	r3, [r7, #12]
 8003c14:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c18:	4641      	mov	r1, r8
 8003c1a:	1851      	adds	r1, r2, r1
 8003c1c:	6039      	str	r1, [r7, #0]
 8003c1e:	4649      	mov	r1, r9
 8003c20:	414b      	adcs	r3, r1
 8003c22:	607b      	str	r3, [r7, #4]
 8003c24:	f04f 0200 	mov.w	r2, #0
 8003c28:	f04f 0300 	mov.w	r3, #0
 8003c2c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003c30:	4659      	mov	r1, fp
 8003c32:	00cb      	lsls	r3, r1, #3
 8003c34:	4651      	mov	r1, sl
 8003c36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c3a:	4651      	mov	r1, sl
 8003c3c:	00ca      	lsls	r2, r1, #3
 8003c3e:	4610      	mov	r0, r2
 8003c40:	4619      	mov	r1, r3
 8003c42:	4603      	mov	r3, r0
 8003c44:	4642      	mov	r2, r8
 8003c46:	189b      	adds	r3, r3, r2
 8003c48:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003c4a:	464b      	mov	r3, r9
 8003c4c:	460a      	mov	r2, r1
 8003c4e:	eb42 0303 	adc.w	r3, r2, r3
 8003c52:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003c54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	663b      	str	r3, [r7, #96]	@ 0x60
 8003c5e:	667a      	str	r2, [r7, #100]	@ 0x64
 8003c60:	f04f 0200 	mov.w	r2, #0
 8003c64:	f04f 0300 	mov.w	r3, #0
 8003c68:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003c6c:	4649      	mov	r1, r9
 8003c6e:	008b      	lsls	r3, r1, #2
 8003c70:	4641      	mov	r1, r8
 8003c72:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c76:	4641      	mov	r1, r8
 8003c78:	008a      	lsls	r2, r1, #2
 8003c7a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003c7e:	f7fc faff 	bl	8000280 <__aeabi_uldivmod>
 8003c82:	4602      	mov	r2, r0
 8003c84:	460b      	mov	r3, r1
 8003c86:	4b0d      	ldr	r3, [pc, #52]	@ (8003cbc <UART_SetConfig+0x4e4>)
 8003c88:	fba3 1302 	umull	r1, r3, r3, r2
 8003c8c:	095b      	lsrs	r3, r3, #5
 8003c8e:	2164      	movs	r1, #100	@ 0x64
 8003c90:	fb01 f303 	mul.w	r3, r1, r3
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	011b      	lsls	r3, r3, #4
 8003c98:	3332      	adds	r3, #50	@ 0x32
 8003c9a:	4a08      	ldr	r2, [pc, #32]	@ (8003cbc <UART_SetConfig+0x4e4>)
 8003c9c:	fba2 2303 	umull	r2, r3, r2, r3
 8003ca0:	095b      	lsrs	r3, r3, #5
 8003ca2:	f003 020f 	and.w	r2, r3, #15
 8003ca6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4422      	add	r2, r4
 8003cae:	609a      	str	r2, [r3, #8]
}
 8003cb0:	bf00      	nop
 8003cb2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cbc:	51eb851f 	.word	0x51eb851f

08003cc0 <siprintf>:
 8003cc0:	b40e      	push	{r1, r2, r3}
 8003cc2:	b500      	push	{lr}
 8003cc4:	b09c      	sub	sp, #112	@ 0x70
 8003cc6:	ab1d      	add	r3, sp, #116	@ 0x74
 8003cc8:	9002      	str	r0, [sp, #8]
 8003cca:	9006      	str	r0, [sp, #24]
 8003ccc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003cd0:	4809      	ldr	r0, [pc, #36]	@ (8003cf8 <siprintf+0x38>)
 8003cd2:	9107      	str	r1, [sp, #28]
 8003cd4:	9104      	str	r1, [sp, #16]
 8003cd6:	4909      	ldr	r1, [pc, #36]	@ (8003cfc <siprintf+0x3c>)
 8003cd8:	f853 2b04 	ldr.w	r2, [r3], #4
 8003cdc:	9105      	str	r1, [sp, #20]
 8003cde:	6800      	ldr	r0, [r0, #0]
 8003ce0:	9301      	str	r3, [sp, #4]
 8003ce2:	a902      	add	r1, sp, #8
 8003ce4:	f000 f994 	bl	8004010 <_svfiprintf_r>
 8003ce8:	9b02      	ldr	r3, [sp, #8]
 8003cea:	2200      	movs	r2, #0
 8003cec:	701a      	strb	r2, [r3, #0]
 8003cee:	b01c      	add	sp, #112	@ 0x70
 8003cf0:	f85d eb04 	ldr.w	lr, [sp], #4
 8003cf4:	b003      	add	sp, #12
 8003cf6:	4770      	bx	lr
 8003cf8:	2000000c 	.word	0x2000000c
 8003cfc:	ffff0208 	.word	0xffff0208

08003d00 <memset>:
 8003d00:	4402      	add	r2, r0
 8003d02:	4603      	mov	r3, r0
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d100      	bne.n	8003d0a <memset+0xa>
 8003d08:	4770      	bx	lr
 8003d0a:	f803 1b01 	strb.w	r1, [r3], #1
 8003d0e:	e7f9      	b.n	8003d04 <memset+0x4>

08003d10 <__errno>:
 8003d10:	4b01      	ldr	r3, [pc, #4]	@ (8003d18 <__errno+0x8>)
 8003d12:	6818      	ldr	r0, [r3, #0]
 8003d14:	4770      	bx	lr
 8003d16:	bf00      	nop
 8003d18:	2000000c 	.word	0x2000000c

08003d1c <__libc_init_array>:
 8003d1c:	b570      	push	{r4, r5, r6, lr}
 8003d1e:	4d0d      	ldr	r5, [pc, #52]	@ (8003d54 <__libc_init_array+0x38>)
 8003d20:	4c0d      	ldr	r4, [pc, #52]	@ (8003d58 <__libc_init_array+0x3c>)
 8003d22:	1b64      	subs	r4, r4, r5
 8003d24:	10a4      	asrs	r4, r4, #2
 8003d26:	2600      	movs	r6, #0
 8003d28:	42a6      	cmp	r6, r4
 8003d2a:	d109      	bne.n	8003d40 <__libc_init_array+0x24>
 8003d2c:	4d0b      	ldr	r5, [pc, #44]	@ (8003d5c <__libc_init_array+0x40>)
 8003d2e:	4c0c      	ldr	r4, [pc, #48]	@ (8003d60 <__libc_init_array+0x44>)
 8003d30:	f000 fc66 	bl	8004600 <_init>
 8003d34:	1b64      	subs	r4, r4, r5
 8003d36:	10a4      	asrs	r4, r4, #2
 8003d38:	2600      	movs	r6, #0
 8003d3a:	42a6      	cmp	r6, r4
 8003d3c:	d105      	bne.n	8003d4a <__libc_init_array+0x2e>
 8003d3e:	bd70      	pop	{r4, r5, r6, pc}
 8003d40:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d44:	4798      	blx	r3
 8003d46:	3601      	adds	r6, #1
 8003d48:	e7ee      	b.n	8003d28 <__libc_init_array+0xc>
 8003d4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d4e:	4798      	blx	r3
 8003d50:	3601      	adds	r6, #1
 8003d52:	e7f2      	b.n	8003d3a <__libc_init_array+0x1e>
 8003d54:	0800488c 	.word	0x0800488c
 8003d58:	0800488c 	.word	0x0800488c
 8003d5c:	0800488c 	.word	0x0800488c
 8003d60:	08004890 	.word	0x08004890

08003d64 <__retarget_lock_acquire_recursive>:
 8003d64:	4770      	bx	lr

08003d66 <__retarget_lock_release_recursive>:
 8003d66:	4770      	bx	lr

08003d68 <_free_r>:
 8003d68:	b538      	push	{r3, r4, r5, lr}
 8003d6a:	4605      	mov	r5, r0
 8003d6c:	2900      	cmp	r1, #0
 8003d6e:	d041      	beq.n	8003df4 <_free_r+0x8c>
 8003d70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d74:	1f0c      	subs	r4, r1, #4
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	bfb8      	it	lt
 8003d7a:	18e4      	addlt	r4, r4, r3
 8003d7c:	f000 f8e0 	bl	8003f40 <__malloc_lock>
 8003d80:	4a1d      	ldr	r2, [pc, #116]	@ (8003df8 <_free_r+0x90>)
 8003d82:	6813      	ldr	r3, [r2, #0]
 8003d84:	b933      	cbnz	r3, 8003d94 <_free_r+0x2c>
 8003d86:	6063      	str	r3, [r4, #4]
 8003d88:	6014      	str	r4, [r2, #0]
 8003d8a:	4628      	mov	r0, r5
 8003d8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d90:	f000 b8dc 	b.w	8003f4c <__malloc_unlock>
 8003d94:	42a3      	cmp	r3, r4
 8003d96:	d908      	bls.n	8003daa <_free_r+0x42>
 8003d98:	6820      	ldr	r0, [r4, #0]
 8003d9a:	1821      	adds	r1, r4, r0
 8003d9c:	428b      	cmp	r3, r1
 8003d9e:	bf01      	itttt	eq
 8003da0:	6819      	ldreq	r1, [r3, #0]
 8003da2:	685b      	ldreq	r3, [r3, #4]
 8003da4:	1809      	addeq	r1, r1, r0
 8003da6:	6021      	streq	r1, [r4, #0]
 8003da8:	e7ed      	b.n	8003d86 <_free_r+0x1e>
 8003daa:	461a      	mov	r2, r3
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	b10b      	cbz	r3, 8003db4 <_free_r+0x4c>
 8003db0:	42a3      	cmp	r3, r4
 8003db2:	d9fa      	bls.n	8003daa <_free_r+0x42>
 8003db4:	6811      	ldr	r1, [r2, #0]
 8003db6:	1850      	adds	r0, r2, r1
 8003db8:	42a0      	cmp	r0, r4
 8003dba:	d10b      	bne.n	8003dd4 <_free_r+0x6c>
 8003dbc:	6820      	ldr	r0, [r4, #0]
 8003dbe:	4401      	add	r1, r0
 8003dc0:	1850      	adds	r0, r2, r1
 8003dc2:	4283      	cmp	r3, r0
 8003dc4:	6011      	str	r1, [r2, #0]
 8003dc6:	d1e0      	bne.n	8003d8a <_free_r+0x22>
 8003dc8:	6818      	ldr	r0, [r3, #0]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	6053      	str	r3, [r2, #4]
 8003dce:	4408      	add	r0, r1
 8003dd0:	6010      	str	r0, [r2, #0]
 8003dd2:	e7da      	b.n	8003d8a <_free_r+0x22>
 8003dd4:	d902      	bls.n	8003ddc <_free_r+0x74>
 8003dd6:	230c      	movs	r3, #12
 8003dd8:	602b      	str	r3, [r5, #0]
 8003dda:	e7d6      	b.n	8003d8a <_free_r+0x22>
 8003ddc:	6820      	ldr	r0, [r4, #0]
 8003dde:	1821      	adds	r1, r4, r0
 8003de0:	428b      	cmp	r3, r1
 8003de2:	bf04      	itt	eq
 8003de4:	6819      	ldreq	r1, [r3, #0]
 8003de6:	685b      	ldreq	r3, [r3, #4]
 8003de8:	6063      	str	r3, [r4, #4]
 8003dea:	bf04      	itt	eq
 8003dec:	1809      	addeq	r1, r1, r0
 8003dee:	6021      	streq	r1, [r4, #0]
 8003df0:	6054      	str	r4, [r2, #4]
 8003df2:	e7ca      	b.n	8003d8a <_free_r+0x22>
 8003df4:	bd38      	pop	{r3, r4, r5, pc}
 8003df6:	bf00      	nop
 8003df8:	20000638 	.word	0x20000638

08003dfc <sbrk_aligned>:
 8003dfc:	b570      	push	{r4, r5, r6, lr}
 8003dfe:	4e0f      	ldr	r6, [pc, #60]	@ (8003e3c <sbrk_aligned+0x40>)
 8003e00:	460c      	mov	r4, r1
 8003e02:	6831      	ldr	r1, [r6, #0]
 8003e04:	4605      	mov	r5, r0
 8003e06:	b911      	cbnz	r1, 8003e0e <sbrk_aligned+0x12>
 8003e08:	f000 fba6 	bl	8004558 <_sbrk_r>
 8003e0c:	6030      	str	r0, [r6, #0]
 8003e0e:	4621      	mov	r1, r4
 8003e10:	4628      	mov	r0, r5
 8003e12:	f000 fba1 	bl	8004558 <_sbrk_r>
 8003e16:	1c43      	adds	r3, r0, #1
 8003e18:	d103      	bne.n	8003e22 <sbrk_aligned+0x26>
 8003e1a:	f04f 34ff 	mov.w	r4, #4294967295
 8003e1e:	4620      	mov	r0, r4
 8003e20:	bd70      	pop	{r4, r5, r6, pc}
 8003e22:	1cc4      	adds	r4, r0, #3
 8003e24:	f024 0403 	bic.w	r4, r4, #3
 8003e28:	42a0      	cmp	r0, r4
 8003e2a:	d0f8      	beq.n	8003e1e <sbrk_aligned+0x22>
 8003e2c:	1a21      	subs	r1, r4, r0
 8003e2e:	4628      	mov	r0, r5
 8003e30:	f000 fb92 	bl	8004558 <_sbrk_r>
 8003e34:	3001      	adds	r0, #1
 8003e36:	d1f2      	bne.n	8003e1e <sbrk_aligned+0x22>
 8003e38:	e7ef      	b.n	8003e1a <sbrk_aligned+0x1e>
 8003e3a:	bf00      	nop
 8003e3c:	20000634 	.word	0x20000634

08003e40 <_malloc_r>:
 8003e40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e44:	1ccd      	adds	r5, r1, #3
 8003e46:	f025 0503 	bic.w	r5, r5, #3
 8003e4a:	3508      	adds	r5, #8
 8003e4c:	2d0c      	cmp	r5, #12
 8003e4e:	bf38      	it	cc
 8003e50:	250c      	movcc	r5, #12
 8003e52:	2d00      	cmp	r5, #0
 8003e54:	4606      	mov	r6, r0
 8003e56:	db01      	blt.n	8003e5c <_malloc_r+0x1c>
 8003e58:	42a9      	cmp	r1, r5
 8003e5a:	d904      	bls.n	8003e66 <_malloc_r+0x26>
 8003e5c:	230c      	movs	r3, #12
 8003e5e:	6033      	str	r3, [r6, #0]
 8003e60:	2000      	movs	r0, #0
 8003e62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e66:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003f3c <_malloc_r+0xfc>
 8003e6a:	f000 f869 	bl	8003f40 <__malloc_lock>
 8003e6e:	f8d8 3000 	ldr.w	r3, [r8]
 8003e72:	461c      	mov	r4, r3
 8003e74:	bb44      	cbnz	r4, 8003ec8 <_malloc_r+0x88>
 8003e76:	4629      	mov	r1, r5
 8003e78:	4630      	mov	r0, r6
 8003e7a:	f7ff ffbf 	bl	8003dfc <sbrk_aligned>
 8003e7e:	1c43      	adds	r3, r0, #1
 8003e80:	4604      	mov	r4, r0
 8003e82:	d158      	bne.n	8003f36 <_malloc_r+0xf6>
 8003e84:	f8d8 4000 	ldr.w	r4, [r8]
 8003e88:	4627      	mov	r7, r4
 8003e8a:	2f00      	cmp	r7, #0
 8003e8c:	d143      	bne.n	8003f16 <_malloc_r+0xd6>
 8003e8e:	2c00      	cmp	r4, #0
 8003e90:	d04b      	beq.n	8003f2a <_malloc_r+0xea>
 8003e92:	6823      	ldr	r3, [r4, #0]
 8003e94:	4639      	mov	r1, r7
 8003e96:	4630      	mov	r0, r6
 8003e98:	eb04 0903 	add.w	r9, r4, r3
 8003e9c:	f000 fb5c 	bl	8004558 <_sbrk_r>
 8003ea0:	4581      	cmp	r9, r0
 8003ea2:	d142      	bne.n	8003f2a <_malloc_r+0xea>
 8003ea4:	6821      	ldr	r1, [r4, #0]
 8003ea6:	1a6d      	subs	r5, r5, r1
 8003ea8:	4629      	mov	r1, r5
 8003eaa:	4630      	mov	r0, r6
 8003eac:	f7ff ffa6 	bl	8003dfc <sbrk_aligned>
 8003eb0:	3001      	adds	r0, #1
 8003eb2:	d03a      	beq.n	8003f2a <_malloc_r+0xea>
 8003eb4:	6823      	ldr	r3, [r4, #0]
 8003eb6:	442b      	add	r3, r5
 8003eb8:	6023      	str	r3, [r4, #0]
 8003eba:	f8d8 3000 	ldr.w	r3, [r8]
 8003ebe:	685a      	ldr	r2, [r3, #4]
 8003ec0:	bb62      	cbnz	r2, 8003f1c <_malloc_r+0xdc>
 8003ec2:	f8c8 7000 	str.w	r7, [r8]
 8003ec6:	e00f      	b.n	8003ee8 <_malloc_r+0xa8>
 8003ec8:	6822      	ldr	r2, [r4, #0]
 8003eca:	1b52      	subs	r2, r2, r5
 8003ecc:	d420      	bmi.n	8003f10 <_malloc_r+0xd0>
 8003ece:	2a0b      	cmp	r2, #11
 8003ed0:	d917      	bls.n	8003f02 <_malloc_r+0xc2>
 8003ed2:	1961      	adds	r1, r4, r5
 8003ed4:	42a3      	cmp	r3, r4
 8003ed6:	6025      	str	r5, [r4, #0]
 8003ed8:	bf18      	it	ne
 8003eda:	6059      	strne	r1, [r3, #4]
 8003edc:	6863      	ldr	r3, [r4, #4]
 8003ede:	bf08      	it	eq
 8003ee0:	f8c8 1000 	streq.w	r1, [r8]
 8003ee4:	5162      	str	r2, [r4, r5]
 8003ee6:	604b      	str	r3, [r1, #4]
 8003ee8:	4630      	mov	r0, r6
 8003eea:	f000 f82f 	bl	8003f4c <__malloc_unlock>
 8003eee:	f104 000b 	add.w	r0, r4, #11
 8003ef2:	1d23      	adds	r3, r4, #4
 8003ef4:	f020 0007 	bic.w	r0, r0, #7
 8003ef8:	1ac2      	subs	r2, r0, r3
 8003efa:	bf1c      	itt	ne
 8003efc:	1a1b      	subne	r3, r3, r0
 8003efe:	50a3      	strne	r3, [r4, r2]
 8003f00:	e7af      	b.n	8003e62 <_malloc_r+0x22>
 8003f02:	6862      	ldr	r2, [r4, #4]
 8003f04:	42a3      	cmp	r3, r4
 8003f06:	bf0c      	ite	eq
 8003f08:	f8c8 2000 	streq.w	r2, [r8]
 8003f0c:	605a      	strne	r2, [r3, #4]
 8003f0e:	e7eb      	b.n	8003ee8 <_malloc_r+0xa8>
 8003f10:	4623      	mov	r3, r4
 8003f12:	6864      	ldr	r4, [r4, #4]
 8003f14:	e7ae      	b.n	8003e74 <_malloc_r+0x34>
 8003f16:	463c      	mov	r4, r7
 8003f18:	687f      	ldr	r7, [r7, #4]
 8003f1a:	e7b6      	b.n	8003e8a <_malloc_r+0x4a>
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	42a3      	cmp	r3, r4
 8003f22:	d1fb      	bne.n	8003f1c <_malloc_r+0xdc>
 8003f24:	2300      	movs	r3, #0
 8003f26:	6053      	str	r3, [r2, #4]
 8003f28:	e7de      	b.n	8003ee8 <_malloc_r+0xa8>
 8003f2a:	230c      	movs	r3, #12
 8003f2c:	6033      	str	r3, [r6, #0]
 8003f2e:	4630      	mov	r0, r6
 8003f30:	f000 f80c 	bl	8003f4c <__malloc_unlock>
 8003f34:	e794      	b.n	8003e60 <_malloc_r+0x20>
 8003f36:	6005      	str	r5, [r0, #0]
 8003f38:	e7d6      	b.n	8003ee8 <_malloc_r+0xa8>
 8003f3a:	bf00      	nop
 8003f3c:	20000638 	.word	0x20000638

08003f40 <__malloc_lock>:
 8003f40:	4801      	ldr	r0, [pc, #4]	@ (8003f48 <__malloc_lock+0x8>)
 8003f42:	f7ff bf0f 	b.w	8003d64 <__retarget_lock_acquire_recursive>
 8003f46:	bf00      	nop
 8003f48:	20000630 	.word	0x20000630

08003f4c <__malloc_unlock>:
 8003f4c:	4801      	ldr	r0, [pc, #4]	@ (8003f54 <__malloc_unlock+0x8>)
 8003f4e:	f7ff bf0a 	b.w	8003d66 <__retarget_lock_release_recursive>
 8003f52:	bf00      	nop
 8003f54:	20000630 	.word	0x20000630

08003f58 <__ssputs_r>:
 8003f58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f5c:	688e      	ldr	r6, [r1, #8]
 8003f5e:	461f      	mov	r7, r3
 8003f60:	42be      	cmp	r6, r7
 8003f62:	680b      	ldr	r3, [r1, #0]
 8003f64:	4682      	mov	sl, r0
 8003f66:	460c      	mov	r4, r1
 8003f68:	4690      	mov	r8, r2
 8003f6a:	d82d      	bhi.n	8003fc8 <__ssputs_r+0x70>
 8003f6c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003f70:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003f74:	d026      	beq.n	8003fc4 <__ssputs_r+0x6c>
 8003f76:	6965      	ldr	r5, [r4, #20]
 8003f78:	6909      	ldr	r1, [r1, #16]
 8003f7a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003f7e:	eba3 0901 	sub.w	r9, r3, r1
 8003f82:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003f86:	1c7b      	adds	r3, r7, #1
 8003f88:	444b      	add	r3, r9
 8003f8a:	106d      	asrs	r5, r5, #1
 8003f8c:	429d      	cmp	r5, r3
 8003f8e:	bf38      	it	cc
 8003f90:	461d      	movcc	r5, r3
 8003f92:	0553      	lsls	r3, r2, #21
 8003f94:	d527      	bpl.n	8003fe6 <__ssputs_r+0x8e>
 8003f96:	4629      	mov	r1, r5
 8003f98:	f7ff ff52 	bl	8003e40 <_malloc_r>
 8003f9c:	4606      	mov	r6, r0
 8003f9e:	b360      	cbz	r0, 8003ffa <__ssputs_r+0xa2>
 8003fa0:	6921      	ldr	r1, [r4, #16]
 8003fa2:	464a      	mov	r2, r9
 8003fa4:	f000 fae8 	bl	8004578 <memcpy>
 8003fa8:	89a3      	ldrh	r3, [r4, #12]
 8003faa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003fae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003fb2:	81a3      	strh	r3, [r4, #12]
 8003fb4:	6126      	str	r6, [r4, #16]
 8003fb6:	6165      	str	r5, [r4, #20]
 8003fb8:	444e      	add	r6, r9
 8003fba:	eba5 0509 	sub.w	r5, r5, r9
 8003fbe:	6026      	str	r6, [r4, #0]
 8003fc0:	60a5      	str	r5, [r4, #8]
 8003fc2:	463e      	mov	r6, r7
 8003fc4:	42be      	cmp	r6, r7
 8003fc6:	d900      	bls.n	8003fca <__ssputs_r+0x72>
 8003fc8:	463e      	mov	r6, r7
 8003fca:	6820      	ldr	r0, [r4, #0]
 8003fcc:	4632      	mov	r2, r6
 8003fce:	4641      	mov	r1, r8
 8003fd0:	f000 faa8 	bl	8004524 <memmove>
 8003fd4:	68a3      	ldr	r3, [r4, #8]
 8003fd6:	1b9b      	subs	r3, r3, r6
 8003fd8:	60a3      	str	r3, [r4, #8]
 8003fda:	6823      	ldr	r3, [r4, #0]
 8003fdc:	4433      	add	r3, r6
 8003fde:	6023      	str	r3, [r4, #0]
 8003fe0:	2000      	movs	r0, #0
 8003fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fe6:	462a      	mov	r2, r5
 8003fe8:	f000 fad4 	bl	8004594 <_realloc_r>
 8003fec:	4606      	mov	r6, r0
 8003fee:	2800      	cmp	r0, #0
 8003ff0:	d1e0      	bne.n	8003fb4 <__ssputs_r+0x5c>
 8003ff2:	6921      	ldr	r1, [r4, #16]
 8003ff4:	4650      	mov	r0, sl
 8003ff6:	f7ff feb7 	bl	8003d68 <_free_r>
 8003ffa:	230c      	movs	r3, #12
 8003ffc:	f8ca 3000 	str.w	r3, [sl]
 8004000:	89a3      	ldrh	r3, [r4, #12]
 8004002:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004006:	81a3      	strh	r3, [r4, #12]
 8004008:	f04f 30ff 	mov.w	r0, #4294967295
 800400c:	e7e9      	b.n	8003fe2 <__ssputs_r+0x8a>
	...

08004010 <_svfiprintf_r>:
 8004010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004014:	4698      	mov	r8, r3
 8004016:	898b      	ldrh	r3, [r1, #12]
 8004018:	061b      	lsls	r3, r3, #24
 800401a:	b09d      	sub	sp, #116	@ 0x74
 800401c:	4607      	mov	r7, r0
 800401e:	460d      	mov	r5, r1
 8004020:	4614      	mov	r4, r2
 8004022:	d510      	bpl.n	8004046 <_svfiprintf_r+0x36>
 8004024:	690b      	ldr	r3, [r1, #16]
 8004026:	b973      	cbnz	r3, 8004046 <_svfiprintf_r+0x36>
 8004028:	2140      	movs	r1, #64	@ 0x40
 800402a:	f7ff ff09 	bl	8003e40 <_malloc_r>
 800402e:	6028      	str	r0, [r5, #0]
 8004030:	6128      	str	r0, [r5, #16]
 8004032:	b930      	cbnz	r0, 8004042 <_svfiprintf_r+0x32>
 8004034:	230c      	movs	r3, #12
 8004036:	603b      	str	r3, [r7, #0]
 8004038:	f04f 30ff 	mov.w	r0, #4294967295
 800403c:	b01d      	add	sp, #116	@ 0x74
 800403e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004042:	2340      	movs	r3, #64	@ 0x40
 8004044:	616b      	str	r3, [r5, #20]
 8004046:	2300      	movs	r3, #0
 8004048:	9309      	str	r3, [sp, #36]	@ 0x24
 800404a:	2320      	movs	r3, #32
 800404c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004050:	f8cd 800c 	str.w	r8, [sp, #12]
 8004054:	2330      	movs	r3, #48	@ 0x30
 8004056:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80041f4 <_svfiprintf_r+0x1e4>
 800405a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800405e:	f04f 0901 	mov.w	r9, #1
 8004062:	4623      	mov	r3, r4
 8004064:	469a      	mov	sl, r3
 8004066:	f813 2b01 	ldrb.w	r2, [r3], #1
 800406a:	b10a      	cbz	r2, 8004070 <_svfiprintf_r+0x60>
 800406c:	2a25      	cmp	r2, #37	@ 0x25
 800406e:	d1f9      	bne.n	8004064 <_svfiprintf_r+0x54>
 8004070:	ebba 0b04 	subs.w	fp, sl, r4
 8004074:	d00b      	beq.n	800408e <_svfiprintf_r+0x7e>
 8004076:	465b      	mov	r3, fp
 8004078:	4622      	mov	r2, r4
 800407a:	4629      	mov	r1, r5
 800407c:	4638      	mov	r0, r7
 800407e:	f7ff ff6b 	bl	8003f58 <__ssputs_r>
 8004082:	3001      	adds	r0, #1
 8004084:	f000 80a7 	beq.w	80041d6 <_svfiprintf_r+0x1c6>
 8004088:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800408a:	445a      	add	r2, fp
 800408c:	9209      	str	r2, [sp, #36]	@ 0x24
 800408e:	f89a 3000 	ldrb.w	r3, [sl]
 8004092:	2b00      	cmp	r3, #0
 8004094:	f000 809f 	beq.w	80041d6 <_svfiprintf_r+0x1c6>
 8004098:	2300      	movs	r3, #0
 800409a:	f04f 32ff 	mov.w	r2, #4294967295
 800409e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80040a2:	f10a 0a01 	add.w	sl, sl, #1
 80040a6:	9304      	str	r3, [sp, #16]
 80040a8:	9307      	str	r3, [sp, #28]
 80040aa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80040ae:	931a      	str	r3, [sp, #104]	@ 0x68
 80040b0:	4654      	mov	r4, sl
 80040b2:	2205      	movs	r2, #5
 80040b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040b8:	484e      	ldr	r0, [pc, #312]	@ (80041f4 <_svfiprintf_r+0x1e4>)
 80040ba:	f7fc f891 	bl	80001e0 <memchr>
 80040be:	9a04      	ldr	r2, [sp, #16]
 80040c0:	b9d8      	cbnz	r0, 80040fa <_svfiprintf_r+0xea>
 80040c2:	06d0      	lsls	r0, r2, #27
 80040c4:	bf44      	itt	mi
 80040c6:	2320      	movmi	r3, #32
 80040c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80040cc:	0711      	lsls	r1, r2, #28
 80040ce:	bf44      	itt	mi
 80040d0:	232b      	movmi	r3, #43	@ 0x2b
 80040d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80040d6:	f89a 3000 	ldrb.w	r3, [sl]
 80040da:	2b2a      	cmp	r3, #42	@ 0x2a
 80040dc:	d015      	beq.n	800410a <_svfiprintf_r+0xfa>
 80040de:	9a07      	ldr	r2, [sp, #28]
 80040e0:	4654      	mov	r4, sl
 80040e2:	2000      	movs	r0, #0
 80040e4:	f04f 0c0a 	mov.w	ip, #10
 80040e8:	4621      	mov	r1, r4
 80040ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80040ee:	3b30      	subs	r3, #48	@ 0x30
 80040f0:	2b09      	cmp	r3, #9
 80040f2:	d94b      	bls.n	800418c <_svfiprintf_r+0x17c>
 80040f4:	b1b0      	cbz	r0, 8004124 <_svfiprintf_r+0x114>
 80040f6:	9207      	str	r2, [sp, #28]
 80040f8:	e014      	b.n	8004124 <_svfiprintf_r+0x114>
 80040fa:	eba0 0308 	sub.w	r3, r0, r8
 80040fe:	fa09 f303 	lsl.w	r3, r9, r3
 8004102:	4313      	orrs	r3, r2
 8004104:	9304      	str	r3, [sp, #16]
 8004106:	46a2      	mov	sl, r4
 8004108:	e7d2      	b.n	80040b0 <_svfiprintf_r+0xa0>
 800410a:	9b03      	ldr	r3, [sp, #12]
 800410c:	1d19      	adds	r1, r3, #4
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	9103      	str	r1, [sp, #12]
 8004112:	2b00      	cmp	r3, #0
 8004114:	bfbb      	ittet	lt
 8004116:	425b      	neglt	r3, r3
 8004118:	f042 0202 	orrlt.w	r2, r2, #2
 800411c:	9307      	strge	r3, [sp, #28]
 800411e:	9307      	strlt	r3, [sp, #28]
 8004120:	bfb8      	it	lt
 8004122:	9204      	strlt	r2, [sp, #16]
 8004124:	7823      	ldrb	r3, [r4, #0]
 8004126:	2b2e      	cmp	r3, #46	@ 0x2e
 8004128:	d10a      	bne.n	8004140 <_svfiprintf_r+0x130>
 800412a:	7863      	ldrb	r3, [r4, #1]
 800412c:	2b2a      	cmp	r3, #42	@ 0x2a
 800412e:	d132      	bne.n	8004196 <_svfiprintf_r+0x186>
 8004130:	9b03      	ldr	r3, [sp, #12]
 8004132:	1d1a      	adds	r2, r3, #4
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	9203      	str	r2, [sp, #12]
 8004138:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800413c:	3402      	adds	r4, #2
 800413e:	9305      	str	r3, [sp, #20]
 8004140:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004204 <_svfiprintf_r+0x1f4>
 8004144:	7821      	ldrb	r1, [r4, #0]
 8004146:	2203      	movs	r2, #3
 8004148:	4650      	mov	r0, sl
 800414a:	f7fc f849 	bl	80001e0 <memchr>
 800414e:	b138      	cbz	r0, 8004160 <_svfiprintf_r+0x150>
 8004150:	9b04      	ldr	r3, [sp, #16]
 8004152:	eba0 000a 	sub.w	r0, r0, sl
 8004156:	2240      	movs	r2, #64	@ 0x40
 8004158:	4082      	lsls	r2, r0
 800415a:	4313      	orrs	r3, r2
 800415c:	3401      	adds	r4, #1
 800415e:	9304      	str	r3, [sp, #16]
 8004160:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004164:	4824      	ldr	r0, [pc, #144]	@ (80041f8 <_svfiprintf_r+0x1e8>)
 8004166:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800416a:	2206      	movs	r2, #6
 800416c:	f7fc f838 	bl	80001e0 <memchr>
 8004170:	2800      	cmp	r0, #0
 8004172:	d036      	beq.n	80041e2 <_svfiprintf_r+0x1d2>
 8004174:	4b21      	ldr	r3, [pc, #132]	@ (80041fc <_svfiprintf_r+0x1ec>)
 8004176:	bb1b      	cbnz	r3, 80041c0 <_svfiprintf_r+0x1b0>
 8004178:	9b03      	ldr	r3, [sp, #12]
 800417a:	3307      	adds	r3, #7
 800417c:	f023 0307 	bic.w	r3, r3, #7
 8004180:	3308      	adds	r3, #8
 8004182:	9303      	str	r3, [sp, #12]
 8004184:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004186:	4433      	add	r3, r6
 8004188:	9309      	str	r3, [sp, #36]	@ 0x24
 800418a:	e76a      	b.n	8004062 <_svfiprintf_r+0x52>
 800418c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004190:	460c      	mov	r4, r1
 8004192:	2001      	movs	r0, #1
 8004194:	e7a8      	b.n	80040e8 <_svfiprintf_r+0xd8>
 8004196:	2300      	movs	r3, #0
 8004198:	3401      	adds	r4, #1
 800419a:	9305      	str	r3, [sp, #20]
 800419c:	4619      	mov	r1, r3
 800419e:	f04f 0c0a 	mov.w	ip, #10
 80041a2:	4620      	mov	r0, r4
 80041a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80041a8:	3a30      	subs	r2, #48	@ 0x30
 80041aa:	2a09      	cmp	r2, #9
 80041ac:	d903      	bls.n	80041b6 <_svfiprintf_r+0x1a6>
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d0c6      	beq.n	8004140 <_svfiprintf_r+0x130>
 80041b2:	9105      	str	r1, [sp, #20]
 80041b4:	e7c4      	b.n	8004140 <_svfiprintf_r+0x130>
 80041b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80041ba:	4604      	mov	r4, r0
 80041bc:	2301      	movs	r3, #1
 80041be:	e7f0      	b.n	80041a2 <_svfiprintf_r+0x192>
 80041c0:	ab03      	add	r3, sp, #12
 80041c2:	9300      	str	r3, [sp, #0]
 80041c4:	462a      	mov	r2, r5
 80041c6:	4b0e      	ldr	r3, [pc, #56]	@ (8004200 <_svfiprintf_r+0x1f0>)
 80041c8:	a904      	add	r1, sp, #16
 80041ca:	4638      	mov	r0, r7
 80041cc:	f3af 8000 	nop.w
 80041d0:	1c42      	adds	r2, r0, #1
 80041d2:	4606      	mov	r6, r0
 80041d4:	d1d6      	bne.n	8004184 <_svfiprintf_r+0x174>
 80041d6:	89ab      	ldrh	r3, [r5, #12]
 80041d8:	065b      	lsls	r3, r3, #25
 80041da:	f53f af2d 	bmi.w	8004038 <_svfiprintf_r+0x28>
 80041de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80041e0:	e72c      	b.n	800403c <_svfiprintf_r+0x2c>
 80041e2:	ab03      	add	r3, sp, #12
 80041e4:	9300      	str	r3, [sp, #0]
 80041e6:	462a      	mov	r2, r5
 80041e8:	4b05      	ldr	r3, [pc, #20]	@ (8004200 <_svfiprintf_r+0x1f0>)
 80041ea:	a904      	add	r1, sp, #16
 80041ec:	4638      	mov	r0, r7
 80041ee:	f000 f879 	bl	80042e4 <_printf_i>
 80041f2:	e7ed      	b.n	80041d0 <_svfiprintf_r+0x1c0>
 80041f4:	08004850 	.word	0x08004850
 80041f8:	0800485a 	.word	0x0800485a
 80041fc:	00000000 	.word	0x00000000
 8004200:	08003f59 	.word	0x08003f59
 8004204:	08004856 	.word	0x08004856

08004208 <_printf_common>:
 8004208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800420c:	4616      	mov	r6, r2
 800420e:	4698      	mov	r8, r3
 8004210:	688a      	ldr	r2, [r1, #8]
 8004212:	690b      	ldr	r3, [r1, #16]
 8004214:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004218:	4293      	cmp	r3, r2
 800421a:	bfb8      	it	lt
 800421c:	4613      	movlt	r3, r2
 800421e:	6033      	str	r3, [r6, #0]
 8004220:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004224:	4607      	mov	r7, r0
 8004226:	460c      	mov	r4, r1
 8004228:	b10a      	cbz	r2, 800422e <_printf_common+0x26>
 800422a:	3301      	adds	r3, #1
 800422c:	6033      	str	r3, [r6, #0]
 800422e:	6823      	ldr	r3, [r4, #0]
 8004230:	0699      	lsls	r1, r3, #26
 8004232:	bf42      	ittt	mi
 8004234:	6833      	ldrmi	r3, [r6, #0]
 8004236:	3302      	addmi	r3, #2
 8004238:	6033      	strmi	r3, [r6, #0]
 800423a:	6825      	ldr	r5, [r4, #0]
 800423c:	f015 0506 	ands.w	r5, r5, #6
 8004240:	d106      	bne.n	8004250 <_printf_common+0x48>
 8004242:	f104 0a19 	add.w	sl, r4, #25
 8004246:	68e3      	ldr	r3, [r4, #12]
 8004248:	6832      	ldr	r2, [r6, #0]
 800424a:	1a9b      	subs	r3, r3, r2
 800424c:	42ab      	cmp	r3, r5
 800424e:	dc26      	bgt.n	800429e <_printf_common+0x96>
 8004250:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004254:	6822      	ldr	r2, [r4, #0]
 8004256:	3b00      	subs	r3, #0
 8004258:	bf18      	it	ne
 800425a:	2301      	movne	r3, #1
 800425c:	0692      	lsls	r2, r2, #26
 800425e:	d42b      	bmi.n	80042b8 <_printf_common+0xb0>
 8004260:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004264:	4641      	mov	r1, r8
 8004266:	4638      	mov	r0, r7
 8004268:	47c8      	blx	r9
 800426a:	3001      	adds	r0, #1
 800426c:	d01e      	beq.n	80042ac <_printf_common+0xa4>
 800426e:	6823      	ldr	r3, [r4, #0]
 8004270:	6922      	ldr	r2, [r4, #16]
 8004272:	f003 0306 	and.w	r3, r3, #6
 8004276:	2b04      	cmp	r3, #4
 8004278:	bf02      	ittt	eq
 800427a:	68e5      	ldreq	r5, [r4, #12]
 800427c:	6833      	ldreq	r3, [r6, #0]
 800427e:	1aed      	subeq	r5, r5, r3
 8004280:	68a3      	ldr	r3, [r4, #8]
 8004282:	bf0c      	ite	eq
 8004284:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004288:	2500      	movne	r5, #0
 800428a:	4293      	cmp	r3, r2
 800428c:	bfc4      	itt	gt
 800428e:	1a9b      	subgt	r3, r3, r2
 8004290:	18ed      	addgt	r5, r5, r3
 8004292:	2600      	movs	r6, #0
 8004294:	341a      	adds	r4, #26
 8004296:	42b5      	cmp	r5, r6
 8004298:	d11a      	bne.n	80042d0 <_printf_common+0xc8>
 800429a:	2000      	movs	r0, #0
 800429c:	e008      	b.n	80042b0 <_printf_common+0xa8>
 800429e:	2301      	movs	r3, #1
 80042a0:	4652      	mov	r2, sl
 80042a2:	4641      	mov	r1, r8
 80042a4:	4638      	mov	r0, r7
 80042a6:	47c8      	blx	r9
 80042a8:	3001      	adds	r0, #1
 80042aa:	d103      	bne.n	80042b4 <_printf_common+0xac>
 80042ac:	f04f 30ff 	mov.w	r0, #4294967295
 80042b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042b4:	3501      	adds	r5, #1
 80042b6:	e7c6      	b.n	8004246 <_printf_common+0x3e>
 80042b8:	18e1      	adds	r1, r4, r3
 80042ba:	1c5a      	adds	r2, r3, #1
 80042bc:	2030      	movs	r0, #48	@ 0x30
 80042be:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80042c2:	4422      	add	r2, r4
 80042c4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80042c8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80042cc:	3302      	adds	r3, #2
 80042ce:	e7c7      	b.n	8004260 <_printf_common+0x58>
 80042d0:	2301      	movs	r3, #1
 80042d2:	4622      	mov	r2, r4
 80042d4:	4641      	mov	r1, r8
 80042d6:	4638      	mov	r0, r7
 80042d8:	47c8      	blx	r9
 80042da:	3001      	adds	r0, #1
 80042dc:	d0e6      	beq.n	80042ac <_printf_common+0xa4>
 80042de:	3601      	adds	r6, #1
 80042e0:	e7d9      	b.n	8004296 <_printf_common+0x8e>
	...

080042e4 <_printf_i>:
 80042e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80042e8:	7e0f      	ldrb	r7, [r1, #24]
 80042ea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80042ec:	2f78      	cmp	r7, #120	@ 0x78
 80042ee:	4691      	mov	r9, r2
 80042f0:	4680      	mov	r8, r0
 80042f2:	460c      	mov	r4, r1
 80042f4:	469a      	mov	sl, r3
 80042f6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80042fa:	d807      	bhi.n	800430c <_printf_i+0x28>
 80042fc:	2f62      	cmp	r7, #98	@ 0x62
 80042fe:	d80a      	bhi.n	8004316 <_printf_i+0x32>
 8004300:	2f00      	cmp	r7, #0
 8004302:	f000 80d2 	beq.w	80044aa <_printf_i+0x1c6>
 8004306:	2f58      	cmp	r7, #88	@ 0x58
 8004308:	f000 80b9 	beq.w	800447e <_printf_i+0x19a>
 800430c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004310:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004314:	e03a      	b.n	800438c <_printf_i+0xa8>
 8004316:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800431a:	2b15      	cmp	r3, #21
 800431c:	d8f6      	bhi.n	800430c <_printf_i+0x28>
 800431e:	a101      	add	r1, pc, #4	@ (adr r1, 8004324 <_printf_i+0x40>)
 8004320:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004324:	0800437d 	.word	0x0800437d
 8004328:	08004391 	.word	0x08004391
 800432c:	0800430d 	.word	0x0800430d
 8004330:	0800430d 	.word	0x0800430d
 8004334:	0800430d 	.word	0x0800430d
 8004338:	0800430d 	.word	0x0800430d
 800433c:	08004391 	.word	0x08004391
 8004340:	0800430d 	.word	0x0800430d
 8004344:	0800430d 	.word	0x0800430d
 8004348:	0800430d 	.word	0x0800430d
 800434c:	0800430d 	.word	0x0800430d
 8004350:	08004491 	.word	0x08004491
 8004354:	080043bb 	.word	0x080043bb
 8004358:	0800444b 	.word	0x0800444b
 800435c:	0800430d 	.word	0x0800430d
 8004360:	0800430d 	.word	0x0800430d
 8004364:	080044b3 	.word	0x080044b3
 8004368:	0800430d 	.word	0x0800430d
 800436c:	080043bb 	.word	0x080043bb
 8004370:	0800430d 	.word	0x0800430d
 8004374:	0800430d 	.word	0x0800430d
 8004378:	08004453 	.word	0x08004453
 800437c:	6833      	ldr	r3, [r6, #0]
 800437e:	1d1a      	adds	r2, r3, #4
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	6032      	str	r2, [r6, #0]
 8004384:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004388:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800438c:	2301      	movs	r3, #1
 800438e:	e09d      	b.n	80044cc <_printf_i+0x1e8>
 8004390:	6833      	ldr	r3, [r6, #0]
 8004392:	6820      	ldr	r0, [r4, #0]
 8004394:	1d19      	adds	r1, r3, #4
 8004396:	6031      	str	r1, [r6, #0]
 8004398:	0606      	lsls	r6, r0, #24
 800439a:	d501      	bpl.n	80043a0 <_printf_i+0xbc>
 800439c:	681d      	ldr	r5, [r3, #0]
 800439e:	e003      	b.n	80043a8 <_printf_i+0xc4>
 80043a0:	0645      	lsls	r5, r0, #25
 80043a2:	d5fb      	bpl.n	800439c <_printf_i+0xb8>
 80043a4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80043a8:	2d00      	cmp	r5, #0
 80043aa:	da03      	bge.n	80043b4 <_printf_i+0xd0>
 80043ac:	232d      	movs	r3, #45	@ 0x2d
 80043ae:	426d      	negs	r5, r5
 80043b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80043b4:	4859      	ldr	r0, [pc, #356]	@ (800451c <_printf_i+0x238>)
 80043b6:	230a      	movs	r3, #10
 80043b8:	e011      	b.n	80043de <_printf_i+0xfa>
 80043ba:	6821      	ldr	r1, [r4, #0]
 80043bc:	6833      	ldr	r3, [r6, #0]
 80043be:	0608      	lsls	r0, r1, #24
 80043c0:	f853 5b04 	ldr.w	r5, [r3], #4
 80043c4:	d402      	bmi.n	80043cc <_printf_i+0xe8>
 80043c6:	0649      	lsls	r1, r1, #25
 80043c8:	bf48      	it	mi
 80043ca:	b2ad      	uxthmi	r5, r5
 80043cc:	2f6f      	cmp	r7, #111	@ 0x6f
 80043ce:	4853      	ldr	r0, [pc, #332]	@ (800451c <_printf_i+0x238>)
 80043d0:	6033      	str	r3, [r6, #0]
 80043d2:	bf14      	ite	ne
 80043d4:	230a      	movne	r3, #10
 80043d6:	2308      	moveq	r3, #8
 80043d8:	2100      	movs	r1, #0
 80043da:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80043de:	6866      	ldr	r6, [r4, #4]
 80043e0:	60a6      	str	r6, [r4, #8]
 80043e2:	2e00      	cmp	r6, #0
 80043e4:	bfa2      	ittt	ge
 80043e6:	6821      	ldrge	r1, [r4, #0]
 80043e8:	f021 0104 	bicge.w	r1, r1, #4
 80043ec:	6021      	strge	r1, [r4, #0]
 80043ee:	b90d      	cbnz	r5, 80043f4 <_printf_i+0x110>
 80043f0:	2e00      	cmp	r6, #0
 80043f2:	d04b      	beq.n	800448c <_printf_i+0x1a8>
 80043f4:	4616      	mov	r6, r2
 80043f6:	fbb5 f1f3 	udiv	r1, r5, r3
 80043fa:	fb03 5711 	mls	r7, r3, r1, r5
 80043fe:	5dc7      	ldrb	r7, [r0, r7]
 8004400:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004404:	462f      	mov	r7, r5
 8004406:	42bb      	cmp	r3, r7
 8004408:	460d      	mov	r5, r1
 800440a:	d9f4      	bls.n	80043f6 <_printf_i+0x112>
 800440c:	2b08      	cmp	r3, #8
 800440e:	d10b      	bne.n	8004428 <_printf_i+0x144>
 8004410:	6823      	ldr	r3, [r4, #0]
 8004412:	07df      	lsls	r7, r3, #31
 8004414:	d508      	bpl.n	8004428 <_printf_i+0x144>
 8004416:	6923      	ldr	r3, [r4, #16]
 8004418:	6861      	ldr	r1, [r4, #4]
 800441a:	4299      	cmp	r1, r3
 800441c:	bfde      	ittt	le
 800441e:	2330      	movle	r3, #48	@ 0x30
 8004420:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004424:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004428:	1b92      	subs	r2, r2, r6
 800442a:	6122      	str	r2, [r4, #16]
 800442c:	f8cd a000 	str.w	sl, [sp]
 8004430:	464b      	mov	r3, r9
 8004432:	aa03      	add	r2, sp, #12
 8004434:	4621      	mov	r1, r4
 8004436:	4640      	mov	r0, r8
 8004438:	f7ff fee6 	bl	8004208 <_printf_common>
 800443c:	3001      	adds	r0, #1
 800443e:	d14a      	bne.n	80044d6 <_printf_i+0x1f2>
 8004440:	f04f 30ff 	mov.w	r0, #4294967295
 8004444:	b004      	add	sp, #16
 8004446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800444a:	6823      	ldr	r3, [r4, #0]
 800444c:	f043 0320 	orr.w	r3, r3, #32
 8004450:	6023      	str	r3, [r4, #0]
 8004452:	4833      	ldr	r0, [pc, #204]	@ (8004520 <_printf_i+0x23c>)
 8004454:	2778      	movs	r7, #120	@ 0x78
 8004456:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800445a:	6823      	ldr	r3, [r4, #0]
 800445c:	6831      	ldr	r1, [r6, #0]
 800445e:	061f      	lsls	r7, r3, #24
 8004460:	f851 5b04 	ldr.w	r5, [r1], #4
 8004464:	d402      	bmi.n	800446c <_printf_i+0x188>
 8004466:	065f      	lsls	r7, r3, #25
 8004468:	bf48      	it	mi
 800446a:	b2ad      	uxthmi	r5, r5
 800446c:	6031      	str	r1, [r6, #0]
 800446e:	07d9      	lsls	r1, r3, #31
 8004470:	bf44      	itt	mi
 8004472:	f043 0320 	orrmi.w	r3, r3, #32
 8004476:	6023      	strmi	r3, [r4, #0]
 8004478:	b11d      	cbz	r5, 8004482 <_printf_i+0x19e>
 800447a:	2310      	movs	r3, #16
 800447c:	e7ac      	b.n	80043d8 <_printf_i+0xf4>
 800447e:	4827      	ldr	r0, [pc, #156]	@ (800451c <_printf_i+0x238>)
 8004480:	e7e9      	b.n	8004456 <_printf_i+0x172>
 8004482:	6823      	ldr	r3, [r4, #0]
 8004484:	f023 0320 	bic.w	r3, r3, #32
 8004488:	6023      	str	r3, [r4, #0]
 800448a:	e7f6      	b.n	800447a <_printf_i+0x196>
 800448c:	4616      	mov	r6, r2
 800448e:	e7bd      	b.n	800440c <_printf_i+0x128>
 8004490:	6833      	ldr	r3, [r6, #0]
 8004492:	6825      	ldr	r5, [r4, #0]
 8004494:	6961      	ldr	r1, [r4, #20]
 8004496:	1d18      	adds	r0, r3, #4
 8004498:	6030      	str	r0, [r6, #0]
 800449a:	062e      	lsls	r6, r5, #24
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	d501      	bpl.n	80044a4 <_printf_i+0x1c0>
 80044a0:	6019      	str	r1, [r3, #0]
 80044a2:	e002      	b.n	80044aa <_printf_i+0x1c6>
 80044a4:	0668      	lsls	r0, r5, #25
 80044a6:	d5fb      	bpl.n	80044a0 <_printf_i+0x1bc>
 80044a8:	8019      	strh	r1, [r3, #0]
 80044aa:	2300      	movs	r3, #0
 80044ac:	6123      	str	r3, [r4, #16]
 80044ae:	4616      	mov	r6, r2
 80044b0:	e7bc      	b.n	800442c <_printf_i+0x148>
 80044b2:	6833      	ldr	r3, [r6, #0]
 80044b4:	1d1a      	adds	r2, r3, #4
 80044b6:	6032      	str	r2, [r6, #0]
 80044b8:	681e      	ldr	r6, [r3, #0]
 80044ba:	6862      	ldr	r2, [r4, #4]
 80044bc:	2100      	movs	r1, #0
 80044be:	4630      	mov	r0, r6
 80044c0:	f7fb fe8e 	bl	80001e0 <memchr>
 80044c4:	b108      	cbz	r0, 80044ca <_printf_i+0x1e6>
 80044c6:	1b80      	subs	r0, r0, r6
 80044c8:	6060      	str	r0, [r4, #4]
 80044ca:	6863      	ldr	r3, [r4, #4]
 80044cc:	6123      	str	r3, [r4, #16]
 80044ce:	2300      	movs	r3, #0
 80044d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80044d4:	e7aa      	b.n	800442c <_printf_i+0x148>
 80044d6:	6923      	ldr	r3, [r4, #16]
 80044d8:	4632      	mov	r2, r6
 80044da:	4649      	mov	r1, r9
 80044dc:	4640      	mov	r0, r8
 80044de:	47d0      	blx	sl
 80044e0:	3001      	adds	r0, #1
 80044e2:	d0ad      	beq.n	8004440 <_printf_i+0x15c>
 80044e4:	6823      	ldr	r3, [r4, #0]
 80044e6:	079b      	lsls	r3, r3, #30
 80044e8:	d413      	bmi.n	8004512 <_printf_i+0x22e>
 80044ea:	68e0      	ldr	r0, [r4, #12]
 80044ec:	9b03      	ldr	r3, [sp, #12]
 80044ee:	4298      	cmp	r0, r3
 80044f0:	bfb8      	it	lt
 80044f2:	4618      	movlt	r0, r3
 80044f4:	e7a6      	b.n	8004444 <_printf_i+0x160>
 80044f6:	2301      	movs	r3, #1
 80044f8:	4632      	mov	r2, r6
 80044fa:	4649      	mov	r1, r9
 80044fc:	4640      	mov	r0, r8
 80044fe:	47d0      	blx	sl
 8004500:	3001      	adds	r0, #1
 8004502:	d09d      	beq.n	8004440 <_printf_i+0x15c>
 8004504:	3501      	adds	r5, #1
 8004506:	68e3      	ldr	r3, [r4, #12]
 8004508:	9903      	ldr	r1, [sp, #12]
 800450a:	1a5b      	subs	r3, r3, r1
 800450c:	42ab      	cmp	r3, r5
 800450e:	dcf2      	bgt.n	80044f6 <_printf_i+0x212>
 8004510:	e7eb      	b.n	80044ea <_printf_i+0x206>
 8004512:	2500      	movs	r5, #0
 8004514:	f104 0619 	add.w	r6, r4, #25
 8004518:	e7f5      	b.n	8004506 <_printf_i+0x222>
 800451a:	bf00      	nop
 800451c:	08004861 	.word	0x08004861
 8004520:	08004872 	.word	0x08004872

08004524 <memmove>:
 8004524:	4288      	cmp	r0, r1
 8004526:	b510      	push	{r4, lr}
 8004528:	eb01 0402 	add.w	r4, r1, r2
 800452c:	d902      	bls.n	8004534 <memmove+0x10>
 800452e:	4284      	cmp	r4, r0
 8004530:	4623      	mov	r3, r4
 8004532:	d807      	bhi.n	8004544 <memmove+0x20>
 8004534:	1e43      	subs	r3, r0, #1
 8004536:	42a1      	cmp	r1, r4
 8004538:	d008      	beq.n	800454c <memmove+0x28>
 800453a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800453e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004542:	e7f8      	b.n	8004536 <memmove+0x12>
 8004544:	4402      	add	r2, r0
 8004546:	4601      	mov	r1, r0
 8004548:	428a      	cmp	r2, r1
 800454a:	d100      	bne.n	800454e <memmove+0x2a>
 800454c:	bd10      	pop	{r4, pc}
 800454e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004552:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004556:	e7f7      	b.n	8004548 <memmove+0x24>

08004558 <_sbrk_r>:
 8004558:	b538      	push	{r3, r4, r5, lr}
 800455a:	4d06      	ldr	r5, [pc, #24]	@ (8004574 <_sbrk_r+0x1c>)
 800455c:	2300      	movs	r3, #0
 800455e:	4604      	mov	r4, r0
 8004560:	4608      	mov	r0, r1
 8004562:	602b      	str	r3, [r5, #0]
 8004564:	f7fc feb6 	bl	80012d4 <_sbrk>
 8004568:	1c43      	adds	r3, r0, #1
 800456a:	d102      	bne.n	8004572 <_sbrk_r+0x1a>
 800456c:	682b      	ldr	r3, [r5, #0]
 800456e:	b103      	cbz	r3, 8004572 <_sbrk_r+0x1a>
 8004570:	6023      	str	r3, [r4, #0]
 8004572:	bd38      	pop	{r3, r4, r5, pc}
 8004574:	2000062c 	.word	0x2000062c

08004578 <memcpy>:
 8004578:	440a      	add	r2, r1
 800457a:	4291      	cmp	r1, r2
 800457c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004580:	d100      	bne.n	8004584 <memcpy+0xc>
 8004582:	4770      	bx	lr
 8004584:	b510      	push	{r4, lr}
 8004586:	f811 4b01 	ldrb.w	r4, [r1], #1
 800458a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800458e:	4291      	cmp	r1, r2
 8004590:	d1f9      	bne.n	8004586 <memcpy+0xe>
 8004592:	bd10      	pop	{r4, pc}

08004594 <_realloc_r>:
 8004594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004598:	4680      	mov	r8, r0
 800459a:	4615      	mov	r5, r2
 800459c:	460c      	mov	r4, r1
 800459e:	b921      	cbnz	r1, 80045aa <_realloc_r+0x16>
 80045a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80045a4:	4611      	mov	r1, r2
 80045a6:	f7ff bc4b 	b.w	8003e40 <_malloc_r>
 80045aa:	b92a      	cbnz	r2, 80045b8 <_realloc_r+0x24>
 80045ac:	f7ff fbdc 	bl	8003d68 <_free_r>
 80045b0:	2400      	movs	r4, #0
 80045b2:	4620      	mov	r0, r4
 80045b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80045b8:	f000 f81a 	bl	80045f0 <_malloc_usable_size_r>
 80045bc:	4285      	cmp	r5, r0
 80045be:	4606      	mov	r6, r0
 80045c0:	d802      	bhi.n	80045c8 <_realloc_r+0x34>
 80045c2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80045c6:	d8f4      	bhi.n	80045b2 <_realloc_r+0x1e>
 80045c8:	4629      	mov	r1, r5
 80045ca:	4640      	mov	r0, r8
 80045cc:	f7ff fc38 	bl	8003e40 <_malloc_r>
 80045d0:	4607      	mov	r7, r0
 80045d2:	2800      	cmp	r0, #0
 80045d4:	d0ec      	beq.n	80045b0 <_realloc_r+0x1c>
 80045d6:	42b5      	cmp	r5, r6
 80045d8:	462a      	mov	r2, r5
 80045da:	4621      	mov	r1, r4
 80045dc:	bf28      	it	cs
 80045de:	4632      	movcs	r2, r6
 80045e0:	f7ff ffca 	bl	8004578 <memcpy>
 80045e4:	4621      	mov	r1, r4
 80045e6:	4640      	mov	r0, r8
 80045e8:	f7ff fbbe 	bl	8003d68 <_free_r>
 80045ec:	463c      	mov	r4, r7
 80045ee:	e7e0      	b.n	80045b2 <_realloc_r+0x1e>

080045f0 <_malloc_usable_size_r>:
 80045f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045f4:	1f18      	subs	r0, r3, #4
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	bfbc      	itt	lt
 80045fa:	580b      	ldrlt	r3, [r1, r0]
 80045fc:	18c0      	addlt	r0, r0, r3
 80045fe:	4770      	bx	lr

08004600 <_init>:
 8004600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004602:	bf00      	nop
 8004604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004606:	bc08      	pop	{r3}
 8004608:	469e      	mov	lr, r3
 800460a:	4770      	bx	lr

0800460c <_fini>:
 800460c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800460e:	bf00      	nop
 8004610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004612:	bc08      	pop	{r3}
 8004614:	469e      	mov	lr, r3
 8004616:	4770      	bx	lr
